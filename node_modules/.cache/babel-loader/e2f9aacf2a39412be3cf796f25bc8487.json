{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamj\\\\OneDrive\\\\Desktop\\\\crwn-clothing-app\\\\src\\\\components\\\\button\\\\button.component.tsx\";\nimport { BaseButton, GoogleSignInButton, InvertedButton, ButtonSpinner } from './button.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let BUTTON_TYPE_CLASSES;\n\n(function (BUTTON_TYPE_CLASSES) {\n  BUTTON_TYPE_CLASSES[\"base\"] = \"base\";\n  BUTTON_TYPE_CLASSES[\"google\"] = \"google-sign-in\";\n  BUTTON_TYPE_CLASSES[\"inverted\"] = \"inverted\";\n})(BUTTON_TYPE_CLASSES || (BUTTON_TYPE_CLASSES = {}));\n\n;\n\nconst getButton = function () {\n  let buttonType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : BUTTON_TYPE_CLASSES.base;\n  return {\n    [BUTTON_TYPE_CLASSES.base]: BaseButton,\n    [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\n    [BUTTON_TYPE_CLASSES.inverted]: InvertedButton\n  }[buttonType];\n};\n\nconst Button = _ref => {\n  let {\n    children,\n    buttonType,\n    isLoading,\n    ...otherProps\n  } = _ref;\n  const CustomButton = getButton(buttonType);\n  return /*#__PURE__*/_jsxDEV(CustomButton, {\n    disabled: isLoading,\n    ...otherProps,\n    children: isLoading ? /*#__PURE__*/_jsxDEV(ButtonSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 18\n    }, this) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Button;\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/src/components/button/button.component.tsx"],"names":["BaseButton","GoogleSignInButton","InvertedButton","ButtonSpinner","BUTTON_TYPE_CLASSES","getButton","buttonType","base","google","inverted","Button","children","isLoading","otherProps","CustomButton"],"mappings":";AAAA,SACEA,UADF,EAEEC,kBAFF,EAGEC,cAHF,EAIEC,aAJF,QAKO,iBALP;;AAOA,WAAYC,mBAAZ;;WAAYA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAIX;;AAED,MAAMC,SAAS,GAAG;AAAA,MAACC,UAAD,uEAAcF,mBAAmB,CAACG,IAAlC;AAAA,SACf;AACC,KAACH,mBAAmB,CAACG,IAArB,GAA4BP,UAD7B;AAEC,KAACI,mBAAmB,CAACI,MAArB,GAA8BP,kBAF/B;AAGC,KAACG,mBAAmB,CAACK,QAArB,GAAgCP;AAHjC,IAICI,UAJD,CADe;AAAA,CAAlB;;AAOA,MAAMI,MAAM,GAAG,QAAwD;AAAA,MAAvD;AAAEC,IAAAA,QAAF;AAAYL,IAAAA,UAAZ;AAAwBM,IAAAA,SAAxB;AAAmC,OAAGC;AAAtC,GAAuD;AACrE,QAAMC,YAAY,GAAGT,SAAS,CAACC,UAAD,CAA9B;AACA,sBACE,QAAC,YAAD;AAAc,IAAA,QAAQ,EAAGM,SAAzB;AAAA,OAAwCC,UAAxC;AAAA,cACCD,SAAS,gBAAG,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAAH,GAAsBD;AADhC;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAPD;;KAAMD,M;AASN,eAAeA,MAAf","sourcesContent":["import {\n  BaseButton,\n  GoogleSignInButton,\n  InvertedButton,\n  ButtonSpinner,\n} from './button.styles';\n\nexport enum BUTTON_TYPE_CLASSES  {\n  base = 'base',\n  google = 'google-sign-in',\n  inverted = 'inverted',\n};\n\nconst getButton = (buttonType = BUTTON_TYPE_CLASSES.base) =>\n  ({\n    [BUTTON_TYPE_CLASSES.base]: BaseButton,\n    [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\n    [BUTTON_TYPE_CLASSES.inverted]: InvertedButton,\n  }[buttonType]);\n\nconst Button = ({ children, buttonType, isLoading, ...otherProps }) => {\n  const CustomButton = getButton(buttonType);\n  return (\n    <CustomButton disabled ={isLoading} {...otherProps}>\n    {isLoading ? <ButtonSpinner/> : children}\n    </CustomButton>\n  );\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}