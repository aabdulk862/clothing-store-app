{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamj\\\\OneDrive\\\\Desktop\\\\crwn-clothing-app\\\\src\\\\contexts\\\\cart.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useReducer } from 'react';\nimport { createAction } from '../utils/reducer/reducer.utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id);\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n\n  return [...cartItems, { ...productToAdd,\n    quantity: 1\n  }];\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  // find the cart item to remove\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id); // check if quantity is equal to 1, if it is remove that item from the cart\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  } // return back cartitems with matching cart item with reduced quantity\n\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};\n\nconst CART_ACTION_TYPES = {\n  SET_IS_CART_OPEN: 'SET_IS_CART_OPEN',\n  SET_CART_ITEMS: 'SET_CART_ITEMS',\n  SET_CART_COUNT: 'SET_CART_COUNT',\n  SET_CART_TOTAL: 'SET_CART_TOTAL'\n};\nconst INITIAL_STATE = {\n  isCartOpen: false,\n  cartItems: [],\n  cartCount: 0,\n  cartTotal: 0\n};\n\nconst cartReducer = (state, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case CART_ACTION_TYPES.SET_CART_ITEMS:\n      return { ...state,\n        ...payload\n      };\n\n    default:\n      throw new Error(`Unhandled type ${type} in cartReducer`);\n  }\n};\n\nconst clearCartItem = (cartItems, cartItemToClear) => cartItems.filter(cartItem => cartItem.id !== cartItemToClear.id);\n\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  removeItemFromCart: () => {},\n  clearItemFromCart: () => {},\n  cartCount: 0,\n  cartTotal: 0\n});\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [{\n    cartCount,\n    cartTotal,\n    cartItems\n  }, dispatch] = useReducer(cartReducer, INITIAL_STATE);\n\n  const updateCartItemsReducer = cartItems => {\n    const newCartCount = cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0);\n    const newCartTotal = cartItems.reduce((total, cartItem) => total + cartItem.quantity * cartItem.price, 0);\n    const payload = {\n      cartItems,\n      cartCount: newCartCount,\n      cartTotal: newCartTotal\n    };\n    dispatch(createAction(CART_ACTION_TYPES.SET_CART_ITEMS, payload));\n  };\n\n  const addItemToCart = productToAdd => {\n    const newCartItems = addCartItem(cartItems, productToAdd);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const removeItemToCart = cartItemToRemove => {\n    const newCartItems = removeCartItem(cartItems, cartItemToRemove);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const clearItemFromCart = cartItemToClear => {\n    const newCartItems = clearCartItem(cartItems, cartItemToClear);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    addItemToCart,\n    removeItemToCart,\n    clearItemFromCart,\n    cartItems,\n    cartCount,\n    cartTotal\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CartProvider, \"Pi96wqJ5DC/xVGqzCIB7CytznYc=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/src/contexts/cart.context.jsx"],"names":["createContext","useState","useReducer","createAction","addCartItem","cartItems","productToAdd","existingCartItem","find","cartItem","id","map","quantity","removeCartItem","cartItemToRemove","filter","CART_ACTION_TYPES","SET_IS_CART_OPEN","SET_CART_ITEMS","SET_CART_COUNT","SET_CART_TOTAL","INITIAL_STATE","isCartOpen","cartCount","cartTotal","cartReducer","state","action","type","payload","Error","clearCartItem","cartItemToClear","CartContext","setIsCartOpen","addItemToCart","removeItemFromCart","clearItemFromCart","CartProvider","children","dispatch","updateCartItemsReducer","newCartCount","reduce","total","newCartTotal","price","newCartItems","removeItemToCart","value"],"mappings":"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","sourcesContent":["import { createContext, useState, useReducer } from 'react';\r\n\r\nimport { createAction } from '../utils/reducer/reducer.utils';\r\n\r\nconst addCartItem = (cartItems, productToAdd) => {\r\n  const existingCartItem = cartItems.find(\r\n    (cartItem) => cartItem.id === productToAdd.id\r\n  );\r\n\r\n  if (existingCartItem) {\r\n    return cartItems.map((cartItem) =>\r\n      cartItem.id === productToAdd.id\r\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\r\n        : cartItem\r\n    );\r\n  }\r\n\r\n  return [...cartItems, { ...productToAdd, quantity: 1 }];\r\n};\r\n\r\nconst removeCartItem = (cartItems, cartItemToRemove) => {\r\n  // find the cart item to remove\r\n  const existingCartItem = cartItems.find(\r\n    (cartItem) => cartItem.id === cartItemToRemove.id\r\n  );\r\n\r\n  // check if quantity is equal to 1, if it is remove that item from the cart\r\n  if (existingCartItem.quantity === 1) {\r\n    return cartItems.filter((cartItem) => cartItem.id !== cartItemToRemove.id);\r\n  }\r\n\r\n  // return back cartitems with matching cart item with reduced quantity\r\n  return cartItems.map((cartItem) =>\r\n    cartItem.id === cartItemToRemove.id\r\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\r\n      : cartItem\r\n  );\r\n};\r\n\r\nconst CART_ACTION_TYPES = {\r\n  SET_IS_CART_OPEN: 'SET_IS_CART_OPEN',\r\n  SET_CART_ITEMS: 'SET_CART_ITEMS',\r\n  SET_CART_COUNT: 'SET_CART_COUNT',\r\n  SET_CART_TOTAL: 'SET_CART_TOTAL',\r\n};\r\n\r\nconst INITIAL_STATE = {\r\n  isCartOpen: false,\r\n  cartItems: [],\r\n  cartCount: 0,\r\n  cartTotal: 0,\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case CART_ACTION_TYPES.SET_CART_ITEMS:\r\n      return {\r\n        ...state,\r\n        ...payload,\r\n      };\r\n    default:\r\n      throw new Error(`Unhandled type ${type} in cartReducer`);\r\n  }\r\n};\r\n\r\nconst clearCartItem = (cartItems, cartItemToClear) =>\r\n  cartItems.filter((cartItem) => cartItem.id !== cartItemToClear.id);\r\n\r\nexport const CartContext = createContext({\r\n  isCartOpen: false,\r\n  setIsCartOpen: () => {},\r\n  cartItems: [],\r\n  addItemToCart: () => {},\r\n  removeItemFromCart: () => {},\r\n  clearItemFromCart: () => {},\r\n  cartCount: 0,\r\n  cartTotal: 0,\r\n});\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [isCartOpen, setIsCartOpen] = useState(false);\r\n\r\n  const [{ cartCount, cartTotal, cartItems }, dispatch] = useReducer(\r\n    cartReducer,\r\n    INITIAL_STATE\r\n  );\r\n\r\n  const updateCartItemsReducer = (cartItems) => {\r\n    const newCartCount = cartItems.reduce(\r\n      (total, cartItem) => total + cartItem.quantity,\r\n      0\r\n    );\r\n\r\n    const newCartTotal = cartItems.reduce(\r\n      (total, cartItem) => total + cartItem.quantity * cartItem.price,\r\n      0\r\n    );\r\n\r\n    const payload = {\r\n      cartItems,\r\n      cartCount: newCartCount,\r\n      cartTotal: newCartTotal,\r\n    };\r\n\r\n    dispatch(createAction(CART_ACTION_TYPES.SET_CART_ITEMS, payload));\r\n  };\r\n\r\n  const addItemToCart = (productToAdd) => {\r\n    const newCartItems = addCartItem(cartItems, productToAdd);\r\n    updateCartItemsReducer(newCartItems);\r\n  };\r\n\r\n  const removeItemToCart = (cartItemToRemove) => {\r\n    const newCartItems = removeCartItem(cartItems, cartItemToRemove);\r\n    updateCartItemsReducer(newCartItems);\r\n  };\r\n\r\n  const clearItemFromCart = (cartItemToClear) => {\r\n    const newCartItems = clearCartItem(cartItems, cartItemToClear);\r\n    updateCartItemsReducer(newCartItems);\r\n  };\r\n\r\n  \r\n\r\n  const value = {\r\n    isCartOpen,\r\n    setIsCartOpen,\r\n    addItemToCart,\r\n    removeItemToCart,\r\n    clearItemFromCart,\r\n    cartItems,\r\n    cartCount,\r\n    cartTotal,\r\n  };\r\n\r\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\r\n};"]},"metadata":{},"sourceType":"module"}