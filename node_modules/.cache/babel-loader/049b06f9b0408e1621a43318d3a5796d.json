{"ast":null,"code":"'use strict';\n\nvar inflection = require('./inflection');\n\nvar Query = require('./query');\n\nvar util = require('util');\n\nvar persistUtil = require('./persist_utils');\n\nvar events = require(\"events\");\n\nvar Connection = require('./connection');\n\nfunction copyValuesIntoObject(values, obj) {\n  var valKey;\n\n  for (valKey in values) {\n    var setter = obj.__lookupSetter__(valKey);\n\n    if (setter) {\n      setter(values[valKey]);\n    } else {\n      obj[valKey] = values[valKey];\n    }\n  }\n}\n\nfunction normalizeType(typeName) {\n  return typeName; // TODO: all lower case, verify string, etc.\n}\n\nfunction doesObjectHaveAConnection(obj) {\n  if (!obj._getConnection) {\n    return false;\n  }\n\n  if (obj._getConnection && !obj._getConnection()) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction addHasManyAssociationMethod(obj, associationName, association) {\n  // create getter to allow this... person1.phones.all(function() {});\n  //   where model == 'Person' and associationName == 'phone'\n  // if phone has a single person and person has many phones the sql would be something like:\n  //   SELECT * FROM phones WHERE person_id = 5\n  // if phone has many person and person has many phones the sql would be something like:\n  //   SELECT * FROM phones\n  //     INNER JOIN person_phone ON person_phone.phone_id = phones.id\n  //     WHERE person_phone.person_id = 5\n  obj.__defineGetter__(associationName, function () {\n    if (!doesObjectHaveAConnection(obj)) {\n      return [];\n    }\n\n    var query = new Query(obj._getConnection(), association.model);\n\n    if (association.through) {\n      query = query.join(association.through, association.manyToManyForeignKey, association.model.getIdColumn().dbColumnName);\n    }\n\n    return query.where(association.foreignKey + \" = ?\", obj.getId());\n  });\n\n  obj.__defineSetter__(associationName, function (val) {\n    obj['_' + associationName] = val;\n  });\n}\n\nfunction addHasOneAssociationMethod(obj, associationName, association) {\n  var foreignKeyPropertyName = inflection.camelize(association.foreignKey, true); // foreignKeyPropertyName = personId\n  // associationName = person\n\n  obj.__defineGetter__(foreignKeyPropertyName, function () {\n    var result = null;\n\n    if (obj['_' + foreignKeyPropertyName]) {\n      result = obj['_' + foreignKeyPropertyName];\n    }\n\n    if (obj['_' + associationName] && obj['_' + associationName].getId) {\n      result = obj['_' + associationName].getId();\n    }\n\n    return result;\n  });\n\n  obj.__defineSetter__(foreignKeyPropertyName, function (val) {\n    obj['_' + foreignKeyPropertyName] = val;\n    obj['_' + associationName] = null;\n  });\n\n  obj.__defineGetter__(associationName, function () {\n    // value was set on the object so treat it as a normal property\n    if (obj['_' + associationName]) {\n      return obj['_' + associationName];\n    } // object didn't come from the database so we can't fetch the query.\n\n\n    if (!doesObjectHaveAConnection(obj)) {\n      return null;\n    } // value was not set on the object so we need to query for it.\n\n\n    var query = new Query(obj._getConnection(), association.model);\n    var foreignKey = obj['_' + foreignKeyPropertyName];\n    var idColumn = association.model.getIdColumn().dbColumnName;\n    var result = query.where(idColumn + \" = ?\", foreignKey);\n    return result;\n  });\n\n  obj.__defineSetter__(associationName, function (val) {\n    obj['_' + foreignKeyPropertyName] = null;\n    obj['_' + associationName] = val;\n  });\n}\n\nfunction addAssociationMethod(obj, associationName, association) {\n  switch (association.type) {\n    case \"hasMany\":\n      addHasManyAssociationMethod(obj, associationName, association);\n      break;\n\n    case \"hasOne\":\n      addHasOneAssociationMethod(obj, associationName, association);\n      break;\n\n    default:\n      throw new Error(\"Invalid association type '\" + association.type + \"'\");\n  }\n}\n\nfunction addAssociationMethods(obj) {\n  var associationName;\n\n  for (associationName in obj._getModel().associations) {\n    var association = obj._getModel().associations[associationName];\n\n    addAssociationMethod(obj, associationName, association);\n  }\n}\n\nfunction createColumnPropertiesOnObject(obj) {\n  var columnName;\n\n  for (columnName in obj._getModel().columns) {\n    var column = obj._getModel().columns[columnName];\n\n    if (!obj.hasOwnProperty(columnName)) {\n      if (!column.foreignKey) {\n        obj[columnName] = column.defaultValue();\n      }\n    }\n  }\n}\n\nfunction ensurePrimaryKeyColumn(model) {\n  if (model.getIdColumn()) {\n    return;\n  }\n\n  var coldef = model.columns['id'] || {};\n  coldef.type = coldef.type || \"integer\";\n  coldef.primaryKey = coldef.primaryKey || true;\n  coldef.autoIncrement = coldef.autoIncrement || true;\n  model.addColumn(\"id\", coldef);\n}\n\nfunction addColumns(model, columnDefs) {\n  var propertyName;\n\n  for (propertyName in columnDefs) {\n    model.addColumn(propertyName, columnDefs[propertyName]);\n  }\n\n  ensurePrimaryKeyColumn(model);\n}\n\nexports.define = function (name, columnDefs, opts) {\n  opts = opts || {};\n\n  var Model = function (values) {\n    this._getModel = function () {\n      return Model;\n    }; // hide from JSON.stringify\n\n\n    this.save = function (connection, callback) {\n      if (!connection) {\n        throw new Error(\"connection is null or undefined\");\n      }\n\n      if (!connection.update) {\n        throw new Error(\"argument 1 to save does not appear to be a connection\");\n      }\n\n      if (this._isPersisted()) {\n        connection.update(this, callback);\n      } else {\n        connection.save(this, callback);\n      }\n    };\n\n    this.save = persistUtil.bind('save', this.save, this);\n\n    this.update = function (connection, props, callback) {\n      copyValuesIntoObject(props, this);\n      this.save(connection, callback);\n    };\n\n    this.update = persistUtil.bind('update', this.update, this);\n\n    this.delete = function (connection, callback) {\n      var self = this;\n\n      this._getModel().emit(\"beforeDelete\", this);\n\n      var query = new Query(connection, this._getModel());\n      query.where(this._getModel().getIdColumn().dbColumnName + \" = ?\", this[this._getModel().getIdPropertyName()]);\n      query.deleteAll(function () {\n        self._getModel().emit(\"afterDelete\", self);\n\n        callback.apply(self, arguments);\n      });\n    };\n\n    this.delete = persistUtil.bind('delete', this.delete, this);\n\n    this.getId = function () {\n      return this[this._getModel().getIdPropertyName()];\n    };\n\n    this.getId = persistUtil.bind('getId', this.getId, this);\n\n    this._isPersisted = function () {\n      return false;\n    };\n\n    addAssociationMethods(this);\n\n    if (values) {\n      copyValuesIntoObject(values, this);\n    }\n\n    createColumnPropertiesOnObject(this);\n    return this;\n  };\n\n  Model.modelName = name;\n  Model.tableName = opts.tableName || inflection.pluralize(name);\n  Model.associations = {};\n  Model.columns = {};\n  Model.eventEmmiter = new events.EventEmitter();\n  var n;\n\n  for (n in events.EventEmitter.prototype) {\n    Model[n] = events.EventEmitter.prototype[n];\n    /*\n     Model[n] = function() {\n     Model.eventEmmiter.apply(Model.eventEmmiter, arguments);\n     }*/\n  }\n\n  Model.normalizeColumnDef = function (propertyName, columnDef) {\n    if (!columnDef) {\n      throw new Error(util.format('Invalid column definition for property \"%s\" of model \"%s\"', propertyName, this.modelName));\n    }\n\n    if (typeof columnDef === \"string\") {\n      columnDef = {\n        type: normalizeType(columnDef)\n      };\n    }\n\n    if (!columnDef.hasOwnProperty('defaultValue')) {\n      columnDef.defaultValue = function () {\n        return null;\n      };\n    } else {\n      if (typeof columnDef.defaultValue !== \"function\") {\n        var val = columnDef.defaultValue;\n\n        columnDef.defaultValue = function () {\n          return val;\n        };\n      }\n    }\n\n    if (!columnDef.dbColumnName) {\n      columnDef.dbColumnName = inflection.underscore(propertyName);\n    }\n\n    return columnDef;\n  };\n\n  Model.addColumn = function (propertyName, columnDef) {\n    var col = this.normalizeColumnDef(propertyName, columnDef);\n    this.columns[propertyName] = col;\n  };\n\n  Model.getIdColumn = function () {\n    var name;\n\n    for (name in this.columns) {\n      if (this.columns[name].primaryKey) {\n        return this.columns[name];\n      }\n    }\n\n    return null;\n  };\n\n  Model.getIdPropertyName = function () {\n    var name;\n\n    for (name in this.columns) {\n      if (this.columns[name].primaryKey) {\n        return name;\n      }\n    }\n\n    return null;\n  };\n\n  Model.normalizeHasManyOptions = function (associatedModel, opts) {\n    var foreignKey = inflection.foreignKey(this.modelName);\n    opts = opts || {};\n    opts.type = \"hasMany\";\n    opts.model = associatedModel;\n    opts.foreignKey = opts.foreignKey || foreignKey;\n    return opts;\n  };\n\n  Model.hasMany = function (associatedModel, opts) {\n    opts = this.normalizeHasManyOptions(associatedModel, opts);\n\n    if (!associatedModel || !associatedModel.modelName) {\n      throw new Error(\"Could not find associated model\");\n    }\n\n    var name = opts.name || inflection.camelize(inflection.pluralize(associatedModel.modelName), true);\n\n    if (this.associations[name]) {\n      return this;\n    }\n\n    this.associations[name] = opts;\n\n    if (opts.through) {\n      opts.manyToManyForeignKey = opts.manyToManyForeignKey || inflection.foreignKey(associatedModel.modelName);\n      var associatedOpts = persistUtil.shallowCopy(opts);\n      delete associatedOpts.manyToManyForeignKey;\n      delete associatedOpts.foreignKey;\n      associatedModel.hasMany(this, associatedOpts);\n    } else {\n      associatedModel.hasOne(this);\n    }\n\n    return this;\n  };\n\n  Model.normalizeHasOneOptions = function (associatedModel, opts) {\n    var foreignKey = inflection.foreignKey(inflection.singularize(associatedModel.modelName));\n    opts = opts || {};\n    opts.type = \"hasOne\";\n    opts.model = associatedModel;\n    opts.foreignKey = opts.foreignKey || foreignKey;\n    return opts;\n  };\n\n  Model.hasOne = function (associatedModel, opts) {\n    opts = this.normalizeHasOneOptions(associatedModel, opts);\n    var name = opts.name || inflection.camelize(inflection.singularize(associatedModel.modelName), true);\n\n    if (this.associations[name]) {\n      return this;\n    }\n\n    this.associations[name] = opts;\n    var foreignKeyPropertyName = inflection.camelize(opts.foreignKey, true);\n    this.addColumn(foreignKeyPropertyName, {\n      type: \"int\",\n      foreignKey: true\n    });\n\n    if (!opts.hasOwnProperty('createHasMany') || opts.createHasMany) {\n      var associatedOpts = persistUtil.shallowCopy(opts);\n      delete associatedOpts.foreignKey;\n      associatedModel.hasMany(this, associatedOpts);\n    }\n\n    return this;\n  };\n\n  Model.using = function (connection) {\n    return new Query(connection, this);\n  }; // connection, id, data, callback\n  // id, data (chaining)\n\n\n  Model.update = function () {\n    var id;\n    var data; // id, data (chaining)\n\n    if (arguments.length === 2) {\n      id = arguments[0];\n      data = arguments[1];\n      var self = this;\n      return persistUtil.bind('update', function (conn, callback) {\n        self.update(conn, id, data, callback);\n      }, this);\n    } // non-chaining\n\n\n    if (!(arguments[0] instanceof Connection)) {\n      throw new Error(\"argument 1 to update does not appear to be a connection\");\n    }\n\n    var connection = arguments[0];\n\n    if (!connection) {\n      throw new Error(\"connection is null or undefined\");\n    }\n\n    id = arguments[1];\n    data = arguments[2];\n    var callback = arguments[3];\n    connection.updatePartial(this, id, data, callback);\n    return null;\n  }; // connection, data, callback\n  // data, callback (chaining)\n\n\n  Model.updateAll = function () {\n    var id;\n    var data; // data, callback (chaining)\n\n    if (arguments.length === 2) {\n      data = arguments[0];\n      var self = this;\n      return persistUtil.bind('update', function (conn, callback) {\n        self.update(conn, data, callback);\n      }, this);\n    } // non-chaining\n\n\n    if (!(arguments[0] instanceof Connection)) {\n      throw new Error(\"argument 1 to update does not appear to be a connection\");\n    }\n\n    var connection = arguments[0];\n\n    if (!connection) {\n      throw new Error(\"connection is null or undefined\");\n    }\n\n    data = arguments[1];\n    var callback = arguments[2];\n    this.using(connection).updateAll(data, callback);\n    return null;\n  }; // connection, id, callback\n  // id (chaining)\n\n\n  Model.getById = function () {\n    var self = this;\n    var id;\n\n    if (arguments.length === 1) {\n      id = arguments[0];\n      return function (connection, callback) {\n        var query = self.using(connection);\n        return query.getById(id, callback);\n      };\n    } else {\n      var connection = arguments[0];\n      id = arguments[1];\n      var callback = arguments[2];\n      var query = self.using(connection);\n      return query.getById(id, callback);\n    }\n  };\n\n  Model.count = function (connection, callback) {\n    return this.using(connection).count(callback);\n  };\n\n  Model.count = persistUtil.bind('count', Model.count, Model);\n\n  Model.orderBy = function () {\n    var query = this.using(null);\n    return query.orderBy.apply(query, arguments);\n  };\n\n  Model.orderBy = persistUtil.bind('orderBy', Model.orderBy, Model);\n\n  Model.limit = function () {\n    var query = this.using(null);\n    return query.limit.apply(query, arguments);\n  };\n\n  Model.limit = persistUtil.bind('limit', Model.limit, Model);\n\n  Model.where = function () {\n    var query = this.using(null);\n    return query.where.apply(query, arguments);\n  };\n\n  Model.where = persistUtil.bind('where', Model.where, Model);\n\n  Model.whereIn = function () {\n    var query = this.using(null);\n    return query.whereIn.apply(query, arguments);\n  };\n\n  Model.whereIn = persistUtil.bind('whereIn', Model.whereIn, Model);\n\n  Model.include = function () {\n    var query = this.using(null);\n    return query.include.apply(query, arguments);\n  };\n\n  Model.include = persistUtil.bind('include', Model.include, Model);\n\n  Model.all = function (connection, callback) {\n    var query = this.using(connection);\n    return query.all.apply(query, arguments);\n  };\n\n  Model.all = persistUtil.bind('all', Model.all, Model);\n\n  Model.each = function (connection, callback) {\n    var query = this.using(connection);\n    return query.each.apply(query, arguments);\n  };\n\n  Model.each = persistUtil.bind('each', Model.each, Model);\n\n  Model.first = function (connection, callback) {\n    var query = this.using(connection);\n    return query.first.apply(query, arguments);\n  };\n\n  Model.first = persistUtil.bind('first', Model.first, Model);\n\n  Model.last = function (connection, callback) {\n    var query = this.using(connection);\n    return query.last.apply(query, arguments);\n  };\n\n  Model.last = persistUtil.bind('last', Model.last, Model);\n\n  Model.deleteAll = function (connection, callback) {\n    var query = this.using(connection);\n    return query.deleteAll.apply(query, arguments);\n  };\n\n  Model.deleteAll = persistUtil.bind('deleteAll', Model.deleteAll, Model);\n\n  Model.min = function (fieldName) {\n    var query = this.using(null);\n    return query.min.apply(query, arguments);\n  };\n\n  Model.min = persistUtil.bind('min', Model.min, Model);\n\n  Model.max = function (fieldName) {\n    var query = this.using(null);\n    return query.max.apply(query, arguments);\n  };\n\n  Model.max = persistUtil.bind('max', Model.max, Model);\n\n  Model.sum = function (fieldName) {\n    var query = this.using(null);\n    return query.sum.apply(query, arguments);\n  };\n\n  Model.sum = persistUtil.bind('sum', Model.sum, Model);\n  addColumns(Model, columnDefs);\n  return Model;\n};","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/node_modules/persist/lib/model.js"],"names":["inflection","require","Query","util","persistUtil","events","Connection","copyValuesIntoObject","values","obj","valKey","setter","__lookupSetter__","normalizeType","typeName","doesObjectHaveAConnection","_getConnection","addHasManyAssociationMethod","associationName","association","__defineGetter__","query","model","through","join","manyToManyForeignKey","getIdColumn","dbColumnName","where","foreignKey","getId","__defineSetter__","val","addHasOneAssociationMethod","foreignKeyPropertyName","camelize","result","idColumn","addAssociationMethod","type","Error","addAssociationMethods","_getModel","associations","createColumnPropertiesOnObject","columnName","columns","column","hasOwnProperty","defaultValue","ensurePrimaryKeyColumn","coldef","primaryKey","autoIncrement","addColumn","addColumns","columnDefs","propertyName","exports","define","name","opts","Model","save","connection","callback","update","_isPersisted","bind","props","delete","self","emit","getIdPropertyName","deleteAll","apply","arguments","modelName","tableName","pluralize","eventEmmiter","EventEmitter","n","prototype","normalizeColumnDef","columnDef","format","underscore","col","normalizeHasManyOptions","associatedModel","hasMany","associatedOpts","shallowCopy","hasOne","normalizeHasOneOptions","singularize","createHasMany","using","id","data","length","conn","updatePartial","updateAll","getById","count","orderBy","limit","whereIn","include","all","each","first","last","min","fieldName","max","sum"],"mappings":"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","sourcesContent":["'use strict';\n\nvar inflection = require('./inflection');\nvar Query = require('./query');\nvar util = require('util');\nvar persistUtil = require('./persist_utils');\nvar events = require(\"events\");\nvar Connection = require('./connection');\n\nfunction copyValuesIntoObject (values, obj) {\n  var valKey;\n  for (valKey in values) {\n    var setter = obj.__lookupSetter__(valKey);\n    if (setter) {\n      setter(values[valKey]);\n    } else {\n      obj[valKey] = values[valKey];\n    }\n  }\n}\n\nfunction normalizeType (typeName) {\n  return typeName; // TODO: all lower case, verify string, etc.\n}\n\nfunction doesObjectHaveAConnection (obj) {\n  if (!obj._getConnection) {\n    return false;\n  }\n  if (obj._getConnection && !obj._getConnection()) {\n    return false;\n  }\n  return true;\n}\n\nfunction addHasManyAssociationMethod (obj, associationName, association) {\n  // create getter to allow this... person1.phones.all(function() {});\n  //   where model == 'Person' and associationName == 'phone'\n  // if phone has a single person and person has many phones the sql would be something like:\n  //   SELECT * FROM phones WHERE person_id = 5\n  // if phone has many person and person has many phones the sql would be something like:\n  //   SELECT * FROM phones\n  //     INNER JOIN person_phone ON person_phone.phone_id = phones.id\n  //     WHERE person_phone.person_id = 5\n  obj.__defineGetter__(associationName, function () {\n    if (!doesObjectHaveAConnection(obj)) {\n      return [];\n    }\n    var query = new Query(obj._getConnection(), association.model);\n    if (association.through) {\n      query = query.join(association.through, association.manyToManyForeignKey, association.model.getIdColumn().dbColumnName);\n    }\n    return query.where(association.foreignKey + \" = ?\", obj.getId());\n  });\n  obj.__defineSetter__(associationName, function (val) {\n    obj['_' + associationName] = val;\n  });\n}\n\nfunction addHasOneAssociationMethod (obj, associationName, association) {\n  var foreignKeyPropertyName = inflection.camelize(association.foreignKey, true);\n\n  // foreignKeyPropertyName = personId\n  // associationName = person\n\n  obj.__defineGetter__(foreignKeyPropertyName, function () {\n    var result = null;\n    if (obj['_' + foreignKeyPropertyName]) {\n      result = obj['_' + foreignKeyPropertyName];\n    }\n    if (obj['_' + associationName] && obj['_' + associationName].getId) {\n      result = obj['_' + associationName].getId();\n    }\n    return result;\n  });\n  obj.__defineSetter__(foreignKeyPropertyName, function (val) {\n    obj['_' + foreignKeyPropertyName] = val;\n    obj['_' + associationName] = null;\n  });\n\n  obj.__defineGetter__(associationName, function () {\n    // value was set on the object so treat it as a normal property\n    if (obj['_' + associationName]) {\n      return obj['_' + associationName];\n    }\n\n    // object didn't come from the database so we can't fetch the query.\n    if (!doesObjectHaveAConnection(obj)) {\n      return null;\n    }\n\n    // value was not set on the object so we need to query for it.\n    var query = new Query(obj._getConnection(), association.model);\n    var foreignKey = obj['_' + foreignKeyPropertyName];\n    var idColumn = association.model.getIdColumn().dbColumnName;\n    var result = query.where(idColumn + \" = ?\", foreignKey);\n    return result;\n  });\n  obj.__defineSetter__(associationName, function (val) {\n    obj['_' + foreignKeyPropertyName] = null;\n    obj['_' + associationName] = val;\n  });\n}\n\nfunction addAssociationMethod (obj, associationName, association) {\n  switch (association.type) {\n    case \"hasMany\":\n      addHasManyAssociationMethod(obj, associationName, association);\n      break;\n    case \"hasOne\":\n      addHasOneAssociationMethod(obj, associationName, association);\n      break;\n    default:\n      throw new Error(\"Invalid association type '\" + association.type + \"'\");\n  }\n}\n\nfunction addAssociationMethods (obj) {\n  var associationName;\n  for (associationName in obj._getModel().associations) {\n    var association = obj._getModel().associations[associationName];\n    addAssociationMethod(obj, associationName, association);\n  }\n}\n\nfunction createColumnPropertiesOnObject (obj) {\n  var columnName;\n  for (columnName in obj._getModel().columns) {\n    var column = obj._getModel().columns[columnName];\n    if (!obj.hasOwnProperty(columnName)) {\n      if (!column.foreignKey) {\n        obj[columnName] = column.defaultValue();\n      }\n    }\n  }\n}\n\nfunction ensurePrimaryKeyColumn (model) {\n  if (model.getIdColumn()) {\n    return;\n  }\n  var coldef = model.columns['id'] || {};\n  coldef.type = coldef.type || \"integer\";\n  coldef.primaryKey = coldef.primaryKey || true;\n  coldef.autoIncrement = coldef.autoIncrement || true;\n  model.addColumn(\"id\", coldef);\n}\n\nfunction addColumns (model, columnDefs) {\n  var propertyName;\n  for (propertyName in columnDefs) {\n    model.addColumn(propertyName, columnDefs[propertyName]);\n  }\n  ensurePrimaryKeyColumn(model);\n}\n\nexports.define = function (name, columnDefs, opts) {\n  opts = opts || {};\n\n  var Model = function (values) {\n    this._getModel = function () { return Model; }; // hide from JSON.stringify\n\n    this.save = function (connection, callback) {\n      if (!connection) {\n        throw new Error(\"connection is null or undefined\");\n      }\n      if (!connection.update) {\n        throw new Error(\"argument 1 to save does not appear to be a connection\");\n      }\n\n      if (this._isPersisted()) {\n        connection.update(this, callback);\n      } else {\n        connection.save(this, callback);\n      }\n    };\n    this.save = persistUtil.bind('save', this.save, this);\n\n    this.update = function (connection, props, callback) {\n      copyValuesIntoObject(props, this);\n      this.save(connection, callback);\n    };\n    this.update = persistUtil.bind('update', this.update, this);\n\n    this.delete = function (connection, callback) {\n      var self = this;\n      this._getModel().emit(\"beforeDelete\", this);\n      var query = new Query(connection, this._getModel());\n      query.where(this._getModel().getIdColumn().dbColumnName + \" = ?\", this[this._getModel().getIdPropertyName()]);\n      query.deleteAll(function () {\n        self._getModel().emit(\"afterDelete\", self);\n        callback.apply(self, arguments);\n      });\n    };\n    this.delete = persistUtil.bind('delete', this.delete, this);\n\n    this.getId = function () {\n      return this[this._getModel().getIdPropertyName()];\n    };\n    this.getId = persistUtil.bind('getId', this.getId, this);\n\n    this._isPersisted = function () { return false; };\n\n    addAssociationMethods(this);\n    if (values) {\n      copyValuesIntoObject(values, this);\n    }\n    createColumnPropertiesOnObject(this);\n\n    return this;\n  };\n\n  Model.modelName = name;\n  Model.tableName = opts.tableName || inflection.pluralize(name);\n  Model.associations = {};\n  Model.columns = {};\n\n  Model.eventEmmiter = new events.EventEmitter();\n  var n;\n  for (n in events.EventEmitter.prototype) {\n    Model[n] = events.EventEmitter.prototype[n];\n    /*\n     Model[n] = function() {\n     Model.eventEmmiter.apply(Model.eventEmmiter, arguments);\n     }*/\n  }\n\n  Model.normalizeColumnDef = function (propertyName, columnDef) {\n    if (!columnDef) {\n      throw new Error(util.format('Invalid column definition for property \"%s\" of model \"%s\"', propertyName, this.modelName));\n    }\n    if (typeof (columnDef) === \"string\") {\n      columnDef = {\n        type: normalizeType(columnDef)\n      };\n    }\n\n    if (!columnDef.hasOwnProperty('defaultValue')) {\n      columnDef.defaultValue = function () { return null; };\n    } else {\n      if (typeof (columnDef.defaultValue) !== \"function\") {\n        var val = columnDef.defaultValue;\n        columnDef.defaultValue = function () { return val; };\n      }\n    }\n\n    if (!columnDef.dbColumnName) {\n      columnDef.dbColumnName = inflection.underscore(propertyName);\n    }\n\n    return columnDef;\n  };\n\n  Model.addColumn = function (propertyName, columnDef) {\n    var col = this.normalizeColumnDef(propertyName, columnDef);\n    this.columns[propertyName] = col;\n  };\n\n  Model.getIdColumn = function () {\n    var name;\n    for (name in this.columns) {\n      if (this.columns[name].primaryKey) {\n        return this.columns[name];\n      }\n    }\n    return null;\n  };\n\n  Model.getIdPropertyName = function () {\n    var name;\n    for (name in this.columns) {\n      if (this.columns[name].primaryKey) {\n        return name;\n      }\n    }\n    return null;\n  };\n\n  Model.normalizeHasManyOptions = function (associatedModel, opts) {\n    var foreignKey = inflection.foreignKey(this.modelName);\n    opts = opts || {};\n    opts.type = \"hasMany\";\n    opts.model = associatedModel;\n    opts.foreignKey = opts.foreignKey || foreignKey;\n    return opts;\n  };\n\n  Model.hasMany = function (associatedModel, opts) {\n    opts = this.normalizeHasManyOptions(associatedModel, opts);\n    if(!associatedModel || !associatedModel.modelName) {\n      throw new Error(\"Could not find associated model\");\n    }\n    var name = opts.name || inflection.camelize(inflection.pluralize(associatedModel.modelName), true);\n    if (this.associations[name]) {\n      return this;\n    }\n    this.associations[name] = opts;\n\n    if (opts.through) {\n      opts.manyToManyForeignKey = opts.manyToManyForeignKey || inflection.foreignKey(associatedModel.modelName);\n      var associatedOpts = persistUtil.shallowCopy(opts);\n      delete associatedOpts.manyToManyForeignKey;\n      delete associatedOpts.foreignKey;\n      associatedModel.hasMany(this, associatedOpts);\n    } else {\n      associatedModel.hasOne(this);\n    }\n\n    return this;\n  };\n\n  Model.normalizeHasOneOptions = function (associatedModel, opts) {\n    var foreignKey = inflection.foreignKey(inflection.singularize(associatedModel.modelName));\n    opts = opts || {};\n    opts.type = \"hasOne\";\n    opts.model = associatedModel;\n    opts.foreignKey = opts.foreignKey || foreignKey;\n    return opts;\n  };\n\n  Model.hasOne = function (associatedModel, opts) {\n    opts = this.normalizeHasOneOptions(associatedModel, opts);\n    var name = opts.name || inflection.camelize(inflection.singularize(associatedModel.modelName), true);\n    if (this.associations[name]) {\n      return this;\n    }\n    this.associations[name] = opts;\n\n    var foreignKeyPropertyName = inflection.camelize(opts.foreignKey, true);\n    this.addColumn(foreignKeyPropertyName, { type: \"int\", foreignKey: true });\n\n    if(!opts.hasOwnProperty('createHasMany') || opts.createHasMany) {\n      var associatedOpts = persistUtil.shallowCopy(opts);\n      delete associatedOpts.foreignKey;\n      associatedModel.hasMany(this, associatedOpts);\n    }\n\n    return this;\n  };\n\n  Model.using = function (connection) {\n    return new Query(connection, this);\n  };\n\n  // connection, id, data, callback\n  // id, data (chaining)\n  Model.update = function () {\n    var id;\n    var data;\n\n    // id, data (chaining)\n    if (arguments.length === 2) {\n      id = arguments[0];\n      data = arguments[1];\n      var self = this;\n      return persistUtil.bind('update', function (conn, callback) {\n        self.update(conn, id, data, callback);\n      }, this);\n    }\n\n    // non-chaining\n    if (!(arguments[0] instanceof Connection)) {\n      throw new Error(\"argument 1 to update does not appear to be a connection\");\n    }\n    var connection = arguments[0];\n    if (!connection) { throw new Error(\"connection is null or undefined\"); }\n    id = arguments[1];\n    data = arguments[2];\n    var callback = arguments[3];\n\n    connection.updatePartial(this, id, data, callback);\n    return null;\n  };\n\n  // connection, data, callback\n  // data, callback (chaining)\n  Model.updateAll = function () {\n    var id;\n    var data;\n\n    // data, callback (chaining)\n    if (arguments.length === 2) {\n      data = arguments[0];\n      var self = this;\n      return persistUtil.bind('update', function (conn, callback) {\n        self.update(conn, data, callback);\n      }, this);\n    }\n\n    // non-chaining\n    if (!(arguments[0] instanceof Connection)) {\n      throw new Error(\"argument 1 to update does not appear to be a connection\");\n    }\n    var connection = arguments[0];\n    if (!connection) { throw new Error(\"connection is null or undefined\"); }\n    data = arguments[1];\n    var callback = arguments[2];\n\n    this.using(connection).updateAll(data, callback);\n    return null;\n  };\n\n  // connection, id, callback\n  // id (chaining)\n  Model.getById = function () {\n    var self = this;\n    var id;\n    if (arguments.length === 1) {\n      id = arguments[0];\n      return function (connection, callback) {\n        var query = self.using(connection);\n        return query.getById(id, callback);\n      };\n    } else {\n      var connection = arguments[0];\n      id = arguments[1];\n      var callback = arguments[2];\n      var query = self.using(connection);\n      return query.getById(id, callback);\n    }\n  };\n\n  Model.count = function (connection, callback) {\n    return this.using(connection).count(callback);\n  };\n  Model.count = persistUtil.bind('count', Model.count, Model);\n\n  Model.orderBy = function () {\n    var query = this.using(null);\n    return query.orderBy.apply(query, arguments);\n  };\n  Model.orderBy = persistUtil.bind('orderBy', Model.orderBy, Model);\n\n  Model.limit = function () {\n    var query = this.using(null);\n    return query.limit.apply(query, arguments);\n  };\n  Model.limit = persistUtil.bind('limit', Model.limit, Model);\n\n  Model.where = function () {\n    var query = this.using(null);\n    return query.where.apply(query, arguments);\n  };\n  Model.where = persistUtil.bind('where', Model.where, Model);\n\n  Model.whereIn = function () {\n    var query = this.using(null);\n    return query.whereIn.apply(query, arguments);\n  };\n  Model.whereIn = persistUtil.bind('whereIn', Model.whereIn, Model);\n\n  Model.include = function () {\n    var query = this.using(null);\n    return query.include.apply(query, arguments);\n  };\n  Model.include = persistUtil.bind('include', Model.include, Model);\n\n  Model.all = function (connection, callback) {\n    var query = this.using(connection);\n    return query.all.apply(query, arguments);\n  };\n  Model.all = persistUtil.bind('all', Model.all, Model);\n\n  Model.each = function (connection, callback) {\n    var query = this.using(connection);\n    return query.each.apply(query, arguments);\n  };\n  Model.each = persistUtil.bind('each', Model.each, Model);\n\n  Model.first = function (connection, callback) {\n    var query = this.using(connection);\n    return query.first.apply(query, arguments);\n  };\n  Model.first = persistUtil.bind('first', Model.first, Model);\n\n  Model.last = function (connection, callback) {\n    var query = this.using(connection);\n    return query.last.apply(query, arguments);\n  };\n  Model.last = persistUtil.bind('last', Model.last, Model);\n\n  Model.deleteAll = function (connection, callback) {\n    var query = this.using(connection);\n    return query.deleteAll.apply(query, arguments);\n  };\n  Model.deleteAll = persistUtil.bind('deleteAll', Model.deleteAll, Model);\n\n  Model.min = function (fieldName) {\n    var query = this.using(null);\n    return query.min.apply(query, arguments);\n  };\n  Model.min = persistUtil.bind('min', Model.min, Model);\n\n  Model.max = function (fieldName) {\n    var query = this.using(null);\n    return query.max.apply(query, arguments);\n  };\n  Model.max = persistUtil.bind('max', Model.max, Model);\n\n  Model.sum = function (fieldName) {\n    var query = this.using(null);\n    return query.sum.apply(query, arguments);\n  };\n  Model.sum = persistUtil.bind('sum', Model.sum, Model);\n\n  addColumns(Model, columnDefs);\n\n  return Model;\n};\n"]},"metadata":{},"sourceType":"script"}