{"ast":null,"code":"var Driver = require('../driver');\n\nvar dbInfo = require('../db_info');\n\nvar pg = require('pg');\n\nvar async = require('async');\n\nvar util = require('util');\n\nvar PostgreSqlDriver = Driver.extend({\n  init: function () {\n    this._super();\n  },\n  typeToDbInfo: function (typeStr) {\n    switch (typeStr.toLowerCase()) {\n      case 'text':\n        return dbInfo.TEXT;\n\n      case 'integer':\n        return dbInfo.INTEGER;\n\n      default:\n        return dbInfo.UNKNOWN;\n    }\n  },\n  columnToDbInfo: function (db, columnRow, callback) {\n    var columnInfo = {\n      name: columnRow['column_name'],\n      type: this.typeToDbInfo(columnRow.data_type)\n    };\n\n    if (columnRow['character_maximum_length']) {\n      columnInfo.length = columnRow['character_maximum_length'];\n    }\n\n    callback(null, columnInfo);\n  },\n  tableToDbInfo: function (db, tableRow, callback) {\n    var self = this;\n    var tableInfo = {\n      name: tableRow['table_name'],\n      columns: {},\n      indexes: {}\n    };\n    var sql = util.format(\"SELECT * FROM information_schema.columns WHERE table_name = '%s'\", tableRow['table_name']);\n    db.query(sql, function (err, results) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      async.mapSeries(results.rows, self.columnToDbInfo.bind(self, db), function (err, columnResults) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        for (var i = 0; i < columnResults.length; i++) {\n          tableInfo.columns[columnResults[i].name] = columnResults[i];\n        }\n\n        callback(null, tableInfo);\n      });\n    });\n  },\n  getInfoFromDb: function (db, callback) {\n    var self = this;\n    var sql = \"SELECT * FROM information_schema.tables WHERE table_type = 'BASE TABLE' AND table_schema NOT IN ('pg_catalog', 'information_schema');\";\n    db.query(sql, function (err, results) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      async.mapSeries(results.rows, self.tableToDbInfo.bind(self, db), function (err, results) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        var info = {\n          tables: {}\n        };\n\n        for (var i = 0; i < results.length; i++) {\n          info.tables[results[i].name] = results[i];\n        }\n\n        callback(null, info);\n      });\n    });\n  },\n  getInfo: function (opts, callback) {\n    var self = this;\n    var db = opts.db;\n\n    if (!db) {\n      db = new pg.Client(opts.connectionString || opts);\n      db.connect(function (err) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        self.getInfoFromDb(db, function (err, dbInfo) {\n          db.end();\n          callback(err, dbInfo);\n        });\n      });\n    } else {\n      self.getInfoFromDb(db, callback);\n    }\n  }\n});\nmodule.exports = PostgreSqlDriver;","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/node_modules/db-info/lib/drivers/pg.js"],"names":["Driver","require","dbInfo","pg","async","util","PostgreSqlDriver","extend","init","_super","typeToDbInfo","typeStr","toLowerCase","TEXT","INTEGER","UNKNOWN","columnToDbInfo","db","columnRow","callback","columnInfo","name","type","data_type","length","tableToDbInfo","tableRow","self","tableInfo","columns","indexes","sql","format","query","err","results","mapSeries","rows","bind","columnResults","i","getInfoFromDb","info","tables","getInfo","opts","Client","connectionString","connect","end","module","exports"],"mappings":"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","sourcesContent":["\nvar Driver = require('../driver');\nvar dbInfo = require('../db_info');\nvar pg = require('pg');\nvar async = require('async');\nvar util = require('util');\n\nvar PostgreSqlDriver = Driver.extend({\n\tinit: function() {\n\t\tthis._super();\n\t},\n\n  typeToDbInfo: function(typeStr) {\n    switch(typeStr.toLowerCase()) {\n      case 'text': return dbInfo.TEXT;\n      case 'integer': return dbInfo.INTEGER;\n      default: return dbInfo.UNKNOWN;\n    }\n  },\n\n  columnToDbInfo: function(db, columnRow, callback) {\n    var columnInfo = {\n      name: columnRow['column_name'],\n      type: this.typeToDbInfo(columnRow.data_type)\n    };\n\n    if(columnRow['character_maximum_length']) {\n      columnInfo.length = columnRow['character_maximum_length'];\n    }\n\n    callback(null, columnInfo);\n  },\n\n  tableToDbInfo: function(db, tableRow, callback) {\n    var self = this;\n    var tableInfo = {\n      name: tableRow['table_name'],\n      columns: {},\n\t\t\tindexes: {}\n    };\n    var sql = util.format(\"SELECT * FROM information_schema.columns WHERE table_name = '%s'\", tableRow['table_name']);\n    db.query(sql, function(err, results) {\n      if(err) { callback(err); return; }\n      async.mapSeries(results.rows, self.columnToDbInfo.bind(self, db), function(err, columnResults) {\n        if(err) { callback(err); return; }\n        for(var i=0; i<columnResults.length; i++) {\n\t\t\t\t\ttableInfo.columns[columnResults[i].name] = columnResults[i];\n\t\t\t\t}\n        callback(null, tableInfo);\n      });\n    });\n  },\n\n  getInfoFromDb: function(db, callback) {\n    var self = this;\n    var sql = \"SELECT * FROM information_schema.tables WHERE table_type = 'BASE TABLE' AND table_schema NOT IN ('pg_catalog', 'information_schema');\";\n    db.query(sql, function(err, results) {\n      if(err) { callback(err); return; }\n      async.mapSeries(results.rows, self.tableToDbInfo.bind(self, db), function(err, results) {\n        if(err) { callback(err); return; }\n        var info = {\n\t\t\t\t\ttables: {}\n\t\t\t\t};\n\t\t\t\tfor(var i=0; i<results.length; i++) {\n\t\t\t\t\tinfo.tables[results[i].name] = results[i];\n\t\t\t\t}\n\t\t\t\tcallback(null, info);\n      });\n    });\n  },\n\n\tgetInfo: function(opts, callback) {\n\t\tvar self = this;\n\t\tvar db = opts.db;\n\t\tif(!db) {\n      db = new pg.Client(opts.connectionString || opts);\n      db.connect(function(err) {\n        if(err) { callback(err); return; }\n        self.getInfoFromDb(db, function(err, dbInfo) {\n          db.end();\n          callback(err, dbInfo);\n        });\n      });\n\t\t} else {\n      self.getInfoFromDb(db, callback);\n    }\n\t}\n});\n\nmodule.exports = PostgreSqlDriver;\n"]},"metadata":{},"sourceType":"script"}