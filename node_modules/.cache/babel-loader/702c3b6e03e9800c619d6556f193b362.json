{"ast":null,"code":"'use strict';\n\nvar Driver = require('../driver');\n\nvar Connection = require('../connection');\n\nvar pg = require('pg');\n\nvar util = require('util');\n\nvar PostgreSqlConnection = Connection.extend({\n  init: function (driver, client, createdConnection, opts) {\n    this._super(driver, opts);\n\n    this.client = client;\n    this.createdConnection = createdConnection;\n  },\n  close: function () {\n    if (this.createdConnection) {\n      this.client.end();\n    }\n  },\n  beginTransaction: function (callback) {\n    this._runSql(\"BEGIN\", callback);\n  },\n  commitTransaction: function (callback) {\n    this._runSql(\"COMMIT\", callback);\n  },\n  rollbackTransaction: function (callback) {\n    this._runSql(\"ROLLBACK\", callback);\n  },\n  updateLastId: function (results) {\n    //console.log(results);\n    if (results && results.command === 'INSERT' && results.rows && results.rows.length === 1) {\n      var key;\n\n      for (key in results.rows[0]) {\n        results.lastId = results.rows[0][key];\n\n        if (results.lastId) {\n          break;\n        }\n      }\n    }\n  },\n  _runSql2: function (sql, callback) {\n    //console.log(sql);\n    var self = this;\n    this.client.query(sql, function (err, results) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      self.updateLastId(results);\n\n      if (results.command === 'SELECT') {\n        results = results.rows;\n      }\n\n      callback(null, results);\n    });\n  },\n  _runSql3: function (sql, values, callback) {\n    //console.log(sql);\n    var self = this;\n    this.client.query(sql, values, function (err, results) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      self.updateLastId(results);\n\n      if (results.command === 'SELECT') {\n        results = results.rows;\n      }\n\n      callback(null, results);\n    });\n  },\n  _runSqlAll: function (sql, params, callback) {\n    this._runSql(sql, params, callback);\n  },\n  _runSqlEach: function (sql, params, callback, doneCallback) {\n    // todo: check with the pg project to see if there is a way to do \"each\" as opposed to getting all the results back\n    this._runSql(sql, params, function (err, rows) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      var i;\n\n      for (i = 0; i < rows.length; i++) {\n        callback(null, rows[i]);\n      }\n\n      doneCallback();\n    });\n  }\n});\nvar PostgreSqlDriver = Driver.extend({\n  init: function () {\n    this._super();\n  },\n  connect: function (opts, callback) {\n    var self = this;\n    var conn;\n\n    if (opts.db) {\n      conn = new PostgreSqlConnection(self, opts.db, false);\n      callback(null, conn);\n    } else {\n      var client = new pg.Client(opts.connectionString || opts);\n      client.connect(function (err) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        conn = new PostgreSqlConnection(self, client, true, opts);\n        callback(null, conn);\n      });\n    }\n  },\n  getValuesSubstitutionString: function (index) {\n    return '$' + index;\n  },\n  getInsertSql: function (obj) {\n    var columnNamesSql = [];\n    var valuesSql = [];\n    var values = [];\n    var valueSubstitutionIndex = 1;\n    var autoIncrementColumnName;\n    var columnKey;\n\n    for (columnKey in obj._getModel().columns) {\n      var column = obj._getModel().columns[columnKey];\n\n      columnNamesSql.push(column.dbColumnName);\n\n      if (column.primaryKey && column.autoIncrement) {\n        autoIncrementColumnName = column.dbColumnName;\n        valuesSql.push('DEFAULT');\n      } else {\n        valuesSql.push(this.getValuesSubstitutionString(valueSubstitutionIndex++));\n        values.push(obj[columnKey]);\n      }\n    }\n\n    var returningSql = '';\n\n    if (autoIncrementColumnName) {\n      returningSql = 'RETURNING ' + autoIncrementColumnName;\n    }\n\n    var sql = util.format('INSERT INTO %s (%s) VALUES (%s) %s;', obj._getModel().tableName, columnNamesSql.join(','), valuesSql.join(','), returningSql);\n    var result = {\n      sql: sql,\n      values: values\n    }; //console.log(result);\n\n    return result;\n  },\n  escapeColumnName: function (columnName) {\n    return '\"' + columnName + '\"';\n  }\n});\nmodule.exports = PostgreSqlDriver;","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/node_modules/persist/lib/drivers/pg.js"],"names":["Driver","require","Connection","pg","util","PostgreSqlConnection","extend","init","driver","client","createdConnection","opts","_super","close","end","beginTransaction","callback","_runSql","commitTransaction","rollbackTransaction","updateLastId","results","command","rows","length","key","lastId","_runSql2","sql","self","query","err","_runSql3","values","_runSqlAll","params","_runSqlEach","doneCallback","i","PostgreSqlDriver","connect","conn","db","Client","connectionString","getValuesSubstitutionString","index","getInsertSql","obj","columnNamesSql","valuesSql","valueSubstitutionIndex","autoIncrementColumnName","columnKey","_getModel","columns","column","push","dbColumnName","primaryKey","autoIncrement","returningSql","format","tableName","join","result","escapeColumnName","columnName","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAApB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAAxB;;AACA,IAAIE,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAII,oBAAoB,GAAGH,UAAU,CAACI,MAAX,CAAkB;AAC3CC,EAAAA,IAAI,EAAE,UAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,iBAA1B,EAA6CC,IAA7C,EAAmD;AACvD,SAAKC,MAAL,CAAYJ,MAAZ,EAAoBG,IAApB;;AACA,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACD,GAL0C;AAO3CG,EAAAA,KAAK,EAAE,YAAY;AACjB,QAAI,KAAKH,iBAAT,EAA4B;AAC1B,WAAKD,MAAL,CAAYK,GAAZ;AACD;AACF,GAX0C;AAa3CC,EAAAA,gBAAgB,EAAE,UAAUC,QAAV,EAAoB;AACpC,SAAKC,OAAL,CAAa,OAAb,EAAsBD,QAAtB;AACD,GAf0C;AAiB3CE,EAAAA,iBAAiB,EAAE,UAAUF,QAAV,EAAoB;AACrC,SAAKC,OAAL,CAAa,QAAb,EAAuBD,QAAvB;AACD,GAnB0C;AAqB3CG,EAAAA,mBAAmB,EAAE,UAAUH,QAAV,EAAoB;AACvC,SAAKC,OAAL,CAAa,UAAb,EAAyBD,QAAzB;AACD,GAvB0C;AAyB3CI,EAAAA,YAAY,EAAE,UAAUC,OAAV,EAAmB;AAC/B;AACA,QAAIA,OAAO,IAAIA,OAAO,CAACC,OAAR,KAAoB,QAA/B,IAA2CD,OAAO,CAACE,IAAnD,IAA2DF,OAAO,CAACE,IAAR,CAAaC,MAAb,KAAwB,CAAvF,EAA0F;AACxF,UAAIC,GAAJ;;AACA,WAAKA,GAAL,IAAYJ,OAAO,CAACE,IAAR,CAAa,CAAb,CAAZ,EAA6B;AAC3BF,QAAAA,OAAO,CAACK,MAAR,GAAiBL,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBE,GAAhB,CAAjB;;AACA,YAAIJ,OAAO,CAACK,MAAZ,EAAoB;AAClB;AACD;AACF;AACF;AACF,GApC0C;AAsC3CC,EAAAA,QAAQ,EAAE,UAAUC,GAAV,EAAeZ,QAAf,EAAyB;AACjC;AACA,QAAIa,IAAI,GAAG,IAAX;AACA,SAAKpB,MAAL,CAAYqB,KAAZ,CAAkBF,GAAlB,EAAuB,UAAUG,GAAV,EAAeV,OAAf,EAAwB;AAC7C,UAAIU,GAAJ,EAAS;AACPf,QAAAA,QAAQ,CAACe,GAAD,CAAR;AACA;AACD;;AACDF,MAAAA,IAAI,CAACT,YAAL,CAAkBC,OAAlB;;AACA,UAAIA,OAAO,CAACC,OAAR,KAAoB,QAAxB,EAAkC;AAChCD,QAAAA,OAAO,GAAGA,OAAO,CAACE,IAAlB;AACD;;AACDP,MAAAA,QAAQ,CAAC,IAAD,EAAOK,OAAP,CAAR;AACD,KAVD;AAWD,GApD0C;AAsD3CW,EAAAA,QAAQ,EAAE,UAAUJ,GAAV,EAAeK,MAAf,EAAuBjB,QAAvB,EAAiC;AACzC;AACA,QAAIa,IAAI,GAAG,IAAX;AACA,SAAKpB,MAAL,CAAYqB,KAAZ,CAAkBF,GAAlB,EAAuBK,MAAvB,EAA+B,UAAUF,GAAV,EAAeV,OAAf,EAAwB;AACrD,UAAIU,GAAJ,EAAS;AACPf,QAAAA,QAAQ,CAACe,GAAD,CAAR;AACA;AACD;;AACDF,MAAAA,IAAI,CAACT,YAAL,CAAkBC,OAAlB;;AACA,UAAIA,OAAO,CAACC,OAAR,KAAoB,QAAxB,EAAkC;AAChCD,QAAAA,OAAO,GAAGA,OAAO,CAACE,IAAlB;AACD;;AACDP,MAAAA,QAAQ,CAAC,IAAD,EAAOK,OAAP,CAAR;AACD,KAVD;AAWD,GApE0C;AAsE3Ca,EAAAA,UAAU,EAAE,UAAUN,GAAV,EAAeO,MAAf,EAAuBnB,QAAvB,EAAiC;AAC3C,SAAKC,OAAL,CAAaW,GAAb,EAAkBO,MAAlB,EAA0BnB,QAA1B;AACD,GAxE0C;AA0E3CoB,EAAAA,WAAW,EAAE,UAAUR,GAAV,EAAeO,MAAf,EAAuBnB,QAAvB,EAAiCqB,YAAjC,EAA+C;AAC1D;AACA,SAAKpB,OAAL,CAAaW,GAAb,EAAkBO,MAAlB,EAA0B,UAAUJ,GAAV,EAAeR,IAAf,EAAqB;AAC7C,UAAIQ,GAAJ,EAAS;AACPf,QAAAA,QAAQ,CAACe,GAAD,CAAR;AACA;AACD;;AACD,UAAIO,CAAJ;;AACA,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGf,IAAI,CAACC,MAArB,EAA6Bc,CAAC,EAA9B,EAAkC;AAChCtB,QAAAA,QAAQ,CAAC,IAAD,EAAOO,IAAI,CAACe,CAAD,CAAX,CAAR;AACD;;AACDD,MAAAA,YAAY;AACb,KAVD;AAWD;AAvF0C,CAAlB,CAA3B;AA0FA,IAAIE,gBAAgB,GAAGvC,MAAM,CAACM,MAAP,CAAc;AACnCC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKK,MAAL;AACD,GAHkC;AAKnC4B,EAAAA,OAAO,EAAE,UAAU7B,IAAV,EAAgBK,QAAhB,EAA0B;AACjC,QAAIa,IAAI,GAAG,IAAX;AACA,QAAIY,IAAJ;;AACA,QAAI9B,IAAI,CAAC+B,EAAT,EAAa;AACXD,MAAAA,IAAI,GAAG,IAAIpC,oBAAJ,CAAyBwB,IAAzB,EAA+BlB,IAAI,CAAC+B,EAApC,EAAwC,KAAxC,CAAP;AACA1B,MAAAA,QAAQ,CAAC,IAAD,EAAOyB,IAAP,CAAR;AACD,KAHD,MAGO;AACL,UAAIhC,MAAM,GAAG,IAAIN,EAAE,CAACwC,MAAP,CAAchC,IAAI,CAACiC,gBAAL,IAAyBjC,IAAvC,CAAb;AACAF,MAAAA,MAAM,CAAC+B,OAAP,CAAe,UAAUT,GAAV,EAAe;AAC5B,YAAIA,GAAJ,EAAS;AACPf,UAAAA,QAAQ,CAACe,GAAD,CAAR;AACA;AACD;;AACDU,QAAAA,IAAI,GAAG,IAAIpC,oBAAJ,CAAyBwB,IAAzB,EAA+BpB,MAA/B,EAAuC,IAAvC,EAA6CE,IAA7C,CAAP;AACAK,QAAAA,QAAQ,CAAC,IAAD,EAAOyB,IAAP,CAAR;AACD,OAPD;AAQD;AACF,GAtBkC;AAwBnCI,EAAAA,2BAA2B,EAAE,UAAUC,KAAV,EAAiB;AAC5C,WAAO,MAAMA,KAAb;AACD,GA1BkC;AA4BnCC,EAAAA,YAAY,EAAE,UAAUC,GAAV,EAAe;AAC3B,QAAIC,cAAc,GAAG,EAArB;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIjB,MAAM,GAAG,EAAb;AACA,QAAIkB,sBAAsB,GAAG,CAA7B;AACA,QAAIC,uBAAJ;AAEA,QAAIC,SAAJ;;AACA,SAAKA,SAAL,IAAkBL,GAAG,CAACM,SAAJ,GAAgBC,OAAlC,EAA2C;AACzC,UAAIC,MAAM,GAAGR,GAAG,CAACM,SAAJ,GAAgBC,OAAhB,CAAwBF,SAAxB,CAAb;;AACAJ,MAAAA,cAAc,CAACQ,IAAf,CAAoBD,MAAM,CAACE,YAA3B;;AACA,UAAIF,MAAM,CAACG,UAAP,IAAqBH,MAAM,CAACI,aAAhC,EAA+C;AAC7CR,QAAAA,uBAAuB,GAAGI,MAAM,CAACE,YAAjC;AACAR,QAAAA,SAAS,CAACO,IAAV,CAAe,SAAf;AACD,OAHD,MAGO;AACLP,QAAAA,SAAS,CAACO,IAAV,CAAe,KAAKZ,2BAAL,CAAiCM,sBAAsB,EAAvD,CAAf;AACAlB,QAAAA,MAAM,CAACwB,IAAP,CAAYT,GAAG,CAACK,SAAD,CAAf;AACD;AACF;;AAED,QAAIQ,YAAY,GAAG,EAAnB;;AACA,QAAIT,uBAAJ,EAA6B;AAC3BS,MAAAA,YAAY,GAAG,eAAeT,uBAA9B;AACD;;AAED,QAAIxB,GAAG,GAAGxB,IAAI,CAAC0D,MAAL,CAAY,qCAAZ,EAAmDd,GAAG,CAACM,SAAJ,GAAgBS,SAAnE,EAA8Ed,cAAc,CAACe,IAAf,CAAoB,GAApB,CAA9E,EAAwGd,SAAS,CAACc,IAAV,CAAe,GAAf,CAAxG,EAA6HH,YAA7H,CAAV;AACA,QAAII,MAAM,GAAG;AAAErC,MAAAA,GAAG,EAAEA,GAAP;AAAYK,MAAAA,MAAM,EAAEA;AAApB,KAAb,CA1B2B,CA2B3B;;AACA,WAAOgC,MAAP;AACD,GAzDkC;AA2DnCC,EAAAA,gBAAgB,EAAE,UAAUC,UAAV,EAAsB;AACtC,WAAO,MAAMA,UAAN,GAAmB,GAA1B;AACD;AA7DkC,CAAd,CAAvB;AAgEAC,MAAM,CAACC,OAAP,GAAiB9B,gBAAjB","sourcesContent":["'use strict';\n\nvar Driver = require('../driver');\nvar Connection = require('../connection');\nvar pg = require('pg');\nvar util = require('util');\n\nvar PostgreSqlConnection = Connection.extend({\n  init: function (driver, client, createdConnection, opts) {\n    this._super(driver, opts);\n    this.client = client;\n    this.createdConnection = createdConnection;\n  },\n\n  close: function () {\n    if (this.createdConnection) {\n      this.client.end();\n    }\n  },\n\n  beginTransaction: function (callback) {\n    this._runSql(\"BEGIN\", callback);\n  },\n\n  commitTransaction: function (callback) {\n    this._runSql(\"COMMIT\", callback);\n  },\n\n  rollbackTransaction: function (callback) {\n    this._runSql(\"ROLLBACK\", callback);\n  },\n\n  updateLastId: function (results) {\n    //console.log(results);\n    if (results && results.command === 'INSERT' && results.rows && results.rows.length === 1) {\n      var key;\n      for (key in results.rows[0]) {\n        results.lastId = results.rows[0][key];\n        if (results.lastId) {\n          break;\n        }\n      }\n    }\n  },\n\n  _runSql2: function (sql, callback) {\n    //console.log(sql);\n    var self = this;\n    this.client.query(sql, function (err, results) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      self.updateLastId(results);\n      if (results.command === 'SELECT') {\n        results = results.rows;\n      }\n      callback(null, results);\n    });\n  },\n\n  _runSql3: function (sql, values, callback) {\n    //console.log(sql);\n    var self = this;\n    this.client.query(sql, values, function (err, results) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      self.updateLastId(results);\n      if (results.command === 'SELECT') {\n        results = results.rows;\n      }\n      callback(null, results);\n    });\n  },\n\n  _runSqlAll: function (sql, params, callback) {\n    this._runSql(sql, params, callback);\n  },\n\n  _runSqlEach: function (sql, params, callback, doneCallback) {\n    // todo: check with the pg project to see if there is a way to do \"each\" as opposed to getting all the results back\n    this._runSql(sql, params, function (err, rows) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      var i;\n      for (i = 0; i < rows.length; i++) {\n        callback(null, rows[i]);\n      }\n      doneCallback();\n    });\n  }\n});\n\nvar PostgreSqlDriver = Driver.extend({\n  init: function () {\n    this._super();\n  },\n\n  connect: function (opts, callback) {\n    var self = this;\n    var conn;\n    if (opts.db) {\n      conn = new PostgreSqlConnection(self, opts.db, false);\n      callback(null, conn);\n    } else {\n      var client = new pg.Client(opts.connectionString || opts);\n      client.connect(function (err) {\n        if (err) {\n          callback(err);\n          return;\n        }\n        conn = new PostgreSqlConnection(self, client, true, opts);\n        callback(null, conn);\n      });\n    }\n  },\n\n  getValuesSubstitutionString: function (index) {\n    return '$' + index;\n  },\n\n  getInsertSql: function (obj) {\n    var columnNamesSql = [];\n    var valuesSql = [];\n    var values = [];\n    var valueSubstitutionIndex = 1;\n    var autoIncrementColumnName;\n\n    var columnKey;\n    for (columnKey in obj._getModel().columns) {\n      var column = obj._getModel().columns[columnKey];\n      columnNamesSql.push(column.dbColumnName);\n      if (column.primaryKey && column.autoIncrement) {\n        autoIncrementColumnName = column.dbColumnName;\n        valuesSql.push('DEFAULT');\n      } else {\n        valuesSql.push(this.getValuesSubstitutionString(valueSubstitutionIndex++));\n        values.push(obj[columnKey]);\n      }\n    }\n\n    var returningSql = '';\n    if (autoIncrementColumnName) {\n      returningSql = 'RETURNING ' + autoIncrementColumnName;\n    }\n\n    var sql = util.format('INSERT INTO %s (%s) VALUES (%s) %s;', obj._getModel().tableName, columnNamesSql.join(','), valuesSql.join(','), returningSql);\n    var result = { sql: sql, values: values };\n    //console.log(result);\n    return result;\n  },\n\n  escapeColumnName: function (columnName) {\n    return '\"' + columnName + '\"';\n  }\n});\n\nmodule.exports = PostgreSqlDriver;\n"]},"metadata":{},"sourceType":"script"}