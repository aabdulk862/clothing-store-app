{"ast":null,"code":"var Driver = require('../driver');\n\nvar dbInfo = require('../db_info');\n\nvar oracle = require('db-oracle');\n\nvar async = require('async');\n\nvar util = require('util');\n\nvar OracleDriver = Driver.extend({\n  init: function () {\n    this._super();\n  },\n  typeToDbInfo: function (typeStr) {\n    switch (typeStr.toLowerCase()) {\n      case 'text':\n        return dbInfo.TEXT;\n\n      case 'integer':\n        return dbInfo.INTEGER;\n\n      case 'number':\n        return dbInfo.INTEGER;\n\n      default:\n        return dbInfo.UNKNOWN;\n    }\n  },\n  columnToDbInfo: function (db, columnRow, callback) {\n    var columnInfo = {\n      name: columnRow['COLUMN_NAME'],\n      type: this.typeToDbInfo(columnRow['DATA_TYPE'])\n    };\n\n    if (columnRow['character_maximum_length']) {\n      columnInfo.length = columnRow['character_maximum_length'];\n    }\n\n    callback(null, columnInfo);\n  },\n  tableToDbInfo: function (db, tableRow, callback) {\n    var self = this;\n    var tableInfo = {\n      name: tableRow['TNAME'],\n      columns: {},\n      indexes: {}\n    };\n    var sql = util.format(\"SELECT column_name, data_type, data_length FROM all_tab_columns WHERE table_name = '%s'\", tableInfo.name);\n    db.query(sql).execute(function (err, results) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      async.mapSeries(results, self.columnToDbInfo.bind(self, db), function (err, columnResults) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        for (var i = 0; i < columnResults.length; i++) {\n          tableInfo.columns[columnResults[i].name] = columnResults[i];\n        }\n\n        callback(null, tableInfo);\n      });\n    });\n  },\n  getInfoFromDb: function (db, callback) {\n    var self = this;\n    var sql = \"SELECT * FROM tab\";\n    db.query(sql).execute(function (err, results) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      async.mapSeries(results, self.tableToDbInfo.bind(self, db), function (err, results) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        var info = {\n          tables: {}\n        };\n\n        for (var i = 0; i < results.length; i++) {\n          info.tables[results[i].name] = results[i];\n        }\n\n        callback(null, info);\n      });\n    });\n  },\n  getInfo: function (opts, callback) {\n    var self = this;\n    var db = opts.db;\n\n    if (!db) {\n      db = new oracle.Database(opts);\n      db.connect(function (err) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        self.getInfoFromDb(db, function (err, dbInfo) {\n          db.disconnect();\n          callback(err, dbInfo);\n        });\n      });\n    } else {\n      self.getInfoFromDb(db, callback);\n    }\n  }\n});\nmodule.exports = OracleDriver;","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/node_modules/db-info/lib/drivers/db-oracle.js"],"names":["Driver","require","dbInfo","oracle","async","util","OracleDriver","extend","init","_super","typeToDbInfo","typeStr","toLowerCase","TEXT","INTEGER","UNKNOWN","columnToDbInfo","db","columnRow","callback","columnInfo","name","type","length","tableToDbInfo","tableRow","self","tableInfo","columns","indexes","sql","format","query","execute","err","results","mapSeries","bind","columnResults","i","getInfoFromDb","info","tables","getInfo","opts","Database","connect","disconnect","module","exports"],"mappings":"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","sourcesContent":["\nvar Driver = require('../driver');\nvar dbInfo = require('../db_info');\nvar oracle = require('db-oracle');\nvar async = require('async');\nvar util = require('util');\n\nvar OracleDriver = Driver.extend({\n\tinit: function() {\n\t\tthis._super();\n\t},\n\n  typeToDbInfo: function(typeStr) {\n    switch(typeStr.toLowerCase()) {\n      case 'text': return dbInfo.TEXT;\n      case 'integer': return dbInfo.INTEGER;\n      case 'number': return dbInfo.INTEGER;\n      default: return dbInfo.UNKNOWN;\n    }\n  },\n\n  columnToDbInfo: function(db, columnRow, callback) {\n    var columnInfo = {\n      name: columnRow['COLUMN_NAME'],\n      type: this.typeToDbInfo(columnRow['DATA_TYPE'])\n    };\n\n    if(columnRow['character_maximum_length']) {\n      columnInfo.length = columnRow['character_maximum_length'];\n    }\n\n    callback(null, columnInfo);\n  },\n\n  tableToDbInfo: function(db, tableRow, callback) {\n    var self = this;\n    var tableInfo = {\n      name: tableRow['TNAME'],\n      columns: {},\n\t\t\tindexes: {}\n    };\n    var sql = util.format(\"SELECT column_name, data_type, data_length FROM all_tab_columns WHERE table_name = '%s'\", tableInfo.name);\n    db.query(sql).execute(function(err, results) {\n      if(err) { callback(err); return; }\n      async.mapSeries(results, self.columnToDbInfo.bind(self, db), function(err, columnResults) {\n        if(err) { callback(err); return; }\n        for(var i=0; i<columnResults.length; i++) {\n\t\t\t\t\ttableInfo.columns[columnResults[i].name] = columnResults[i];\n\t\t\t\t}\n        callback(null, tableInfo);\n      });\n    });\n  },\n\n  getInfoFromDb: function(db, callback) {\n    var self = this;\n    var sql = \"SELECT * FROM tab\";\n    db.query(sql).execute(function(err, results) {\n      if(err) { callback(err); return; }\n      async.mapSeries(results, self.tableToDbInfo.bind(self, db), function(err, results) {\n        if(err) { callback(err); return; }\n        var info = {\n\t\t\t\t\ttables: {}\n\t\t\t\t};\n\t\t\t\tfor(var i=0; i<results.length; i++) {\n\t\t\t\t\tinfo.tables[results[i].name] = results[i];\n\t\t\t\t}\n\t\t\t\tcallback(null, info);\n      });\n    });\n  },\n\n\tgetInfo: function(opts, callback) {\n\t\tvar self = this;\n\t\tvar db = opts.db;\n\t\tif(!db) {\n      db = new oracle.Database(opts);\n      db.connect(function(err) {\n        if(err) { callback(err); return; }\n        self.getInfoFromDb(db, function(err, dbInfo) {\n          db.disconnect();\n          callback(err, dbInfo);\n        });\n      });\n\t\t} else {\n      self.getInfoFromDb(db, callback);\n    }\n\t}\n});\n\nmodule.exports = OracleDriver;\n"]},"metadata":{},"sourceType":"script"}