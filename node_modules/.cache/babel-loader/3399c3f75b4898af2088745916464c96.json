{"ast":null,"code":"'use strict';\n\nvar persistUtil = require('./persist_utils');\n\nvar type = require('./type');\n\nvar Class = require('./class');\n\nvar SqlTree = Class.extend({\n  init: function (model) {\n    this.action = \"select\";\n    this.model = model;\n    this.tableName = model.tableName || model;\n    this.tableAlias = null;\n    this.columns = [];\n    this.primaryKeyColumn = null;\n    this.orderBy = [];\n    this.where = [];\n    this.joins = [];\n    this.includes = [];\n    this.columnIndex = 0;\n  },\n  _getNextColumnAlias: function () {\n    return 'c' + this.columnIndex++;\n  },\n  findColumnByModelNameAndColumnName: function (modelName, columnName) {\n    var i;\n\n    for (i = 0; i < this.columns.length; i++) {\n      var column = this.columns[i];\n\n      if ((column.model.modelName === modelName || column.model.tableName === modelName) && (column.propertyName === columnName || column.dbColumnName === columnName)) {\n        return column;\n      }\n    }\n\n    return null;\n  },\n  addColumn: function (model, propertyName, tableAlias) {\n    var colDef = {\n      model: model,\n      propertyName: propertyName,\n      tableAlias: tableAlias,\n      dbColumnName: model.columns[propertyName].dbColumnName,\n      modelColumn: model.columns[propertyName],\n      alias: this._getNextColumnAlias()\n    };\n    this.columns.push(colDef);\n    return colDef;\n  },\n  getColumnByPropertyName: function (propertyName) {\n    var i;\n\n    for (i = 0; i < this.columns.length; i++) {\n      if (this.columns[i].propertyName === propertyName) {\n        return this.columns[i];\n      }\n    }\n\n    return null;\n  },\n  getColumnByAlias: function (alias) {\n    var i;\n\n    for (i = 0; i < this.columns.length; i++) {\n      if (this.columns[i].alias.toLowerCase() === alias.toLowerCase()) {\n        return this.columns[i];\n      }\n    }\n\n    return null;\n  },\n  populateInclude: function (result, item, include) {\n    var i;\n    var includeItems = [];\n\n    if (!include.primaryKeyColumn) {\n      throw new Error('Include \"' + include.propertyName + '\" does not have a single primary key defined.');\n    }\n\n    var groups = persistUtil.groupBy(item, include.primaryKeyColumn.alias);\n\n    for (i = 0; i < groups.length; i++) {\n      var includeItem = groups[i][0];\n      var includeItemInstance = new include.association.model();\n      includeItemInstance = this.toObject(includeItem, includeItemInstance); // there could be no children, in this case the child columns will all be null\n\n      if (includeItemInstance.getId() !== null) {\n        includeItems.push(includeItemInstance);\n      }\n    }\n\n    delete result[include.propertyName];\n\n    if (include.association.type === 'hasOne') {\n      result[include.propertyName] = includeItems[0];\n    } else {\n      result[include.propertyName] = includeItems;\n    }\n  },\n  populateIncludes: function (result, item) {\n    var i;\n\n    for (i = 0; i < this.includes.length; i++) {\n      var include = this.includes[i];\n      this.populateInclude(result, item, include);\n    }\n  },\n  toObjects: function (rows) {\n    var i;\n    var results = [];\n\n    if (this.primaryKeyColumn) {\n      // group the results by the primary key. this handles the case where we might have done a left join and\n      // we need to only return one record per grouping\n      var items = persistUtil.groupBy(rows, this.primaryKeyColumn.alias);\n\n      var trueFunc = function () {\n        return true;\n      };\n\n      for (i = 0; i < items.length; i++) {\n        var item = items[i];\n        var result = new this.primaryKeyColumn.model();\n        result._isPersisted = trueFunc;\n        result = this.toObject(item[0], result);\n        results.push(result);\n        this.populateIncludes(result, item);\n      }\n\n      return results;\n    }\n\n    for (i = 0; i < rows.length; i++) {\n      results.push(this.toObject(rows[i]));\n    }\n\n    return results;\n  },\n  toObject: function (row, result) {\n    var key;\n\n    var trueFunc = function () {\n      return true;\n    };\n\n    for (key in row) {\n      if (key == 'parse' || key == '_typeCast') {\n        continue;\n      }\n\n      var column = this.getColumnByAlias(key);\n\n      if (!column) {\n        throw new Error('Could not find column from alias \"' + key + '\"');\n      }\n\n      if (!result) {\n        result = new column.model();\n        result._isPersisted = trueFunc;\n      }\n\n      if (column.model !== result._getModel()) {\n        continue;\n      }\n\n      var val = row[key];\n\n      if (column.modelColumn.type === type.DATETIME && val && typeof val === 'number') {\n        val = new Date(val);\n      }\n\n      if (column.modelColumn.type === type.JSON && val) {\n        try {\n          val = JSON.parse(val);\n        } catch (e) {// could not parse json so we will leave it as a string\n        }\n      }\n\n      if (column.modelColumn.type === type.BOOLEAN && val !== null) {\n        val = !!val;\n      }\n\n      result[column.propertyName] = val;\n    }\n\n    if (result._getModel().onLoad) {\n      result._getModel().onLoad(result);\n    }\n\n    return result;\n  }\n});\nmodule.exports = SqlTree;","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/node_modules/persist/lib/sqltree.js"],"names":["persistUtil","require","type","Class","SqlTree","extend","init","model","action","tableName","tableAlias","columns","primaryKeyColumn","orderBy","where","joins","includes","columnIndex","_getNextColumnAlias","findColumnByModelNameAndColumnName","modelName","columnName","i","length","column","propertyName","dbColumnName","addColumn","colDef","modelColumn","alias","push","getColumnByPropertyName","getColumnByAlias","toLowerCase","populateInclude","result","item","include","includeItems","Error","groups","groupBy","includeItem","includeItemInstance","association","toObject","getId","populateIncludes","toObjects","rows","results","items","trueFunc","_isPersisted","row","key","_getModel","val","DATETIME","Date","JSON","parse","e","BOOLEAN","onLoad","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar persistUtil = require('./persist_utils');\nvar type = require('./type');\nvar Class = require('./class');\n\nvar SqlTree = Class.extend({\n  init: function (model) {\n    this.action = \"select\";\n    this.model = model;\n    this.tableName = model.tableName || model;\n    this.tableAlias = null;\n    this.columns = [];\n    this.primaryKeyColumn = null;\n    this.orderBy = [];\n    this.where = [];\n    this.joins = [];\n    this.includes = [];\n    this.columnIndex = 0;\n  },\n\n  _getNextColumnAlias: function () {\n    return 'c' + (this.columnIndex++);\n  },\n\n  findColumnByModelNameAndColumnName: function (modelName, columnName) {\n    var i;\n    for (i = 0; i < this.columns.length; i++) {\n      var column = this.columns[i];\n      if ((column.model.modelName === modelName || column.model.tableName === modelName)\n        && (column.propertyName === columnName || column.dbColumnName === columnName)) {\n        return column;\n      }\n    }\n    return null;\n  },\n\n  addColumn: function (model, propertyName, tableAlias) {\n    var colDef = {\n      model: model,\n      propertyName: propertyName,\n      tableAlias: tableAlias,\n      dbColumnName: model.columns[propertyName].dbColumnName,\n      modelColumn: model.columns[propertyName],\n      alias: this._getNextColumnAlias()\n    };\n    this.columns.push(colDef);\n    return colDef;\n  },\n\n  getColumnByPropertyName: function (propertyName) {\n    var i;\n    for (i = 0; i < this.columns.length; i++) {\n      if (this.columns[i].propertyName === propertyName) {\n        return this.columns[i];\n      }\n    }\n    return null;\n  },\n\n  getColumnByAlias: function (alias) {\n    var i;\n    for (i = 0; i < this.columns.length; i++) {\n      if (this.columns[i].alias.toLowerCase() === alias.toLowerCase()) {\n        return this.columns[i];\n      }\n    }\n    return null;\n  },\n\n  populateInclude: function (result, item, include) {\n    var i;\n    var includeItems = [];\n    if (!include.primaryKeyColumn) {\n      throw new Error('Include \"' + include.propertyName + '\" does not have a single primary key defined.');\n    }\n    var groups = persistUtil.groupBy(item, include.primaryKeyColumn.alias);\n    for (i = 0; i < groups.length; i++) {\n      var includeItem = groups[i][0];\n      var includeItemInstance = new include.association.model();\n      includeItemInstance = this.toObject(includeItem, includeItemInstance);\n\n      // there could be no children, in this case the child columns will all be null\n      if (includeItemInstance.getId() !== null) {\n        includeItems.push(includeItemInstance);\n      }\n    }\n    delete result[include.propertyName];\n    if (include.association.type === 'hasOne') {\n      result[include.propertyName] = includeItems[0];\n    } else {\n      result[include.propertyName] = includeItems;\n    }\n  },\n\n  populateIncludes: function (result, item) {\n    var i;\n    for (i = 0; i < this.includes.length; i++) {\n      var include = this.includes[i];\n      this.populateInclude(result, item, include);\n    }\n  },\n\n  toObjects: function (rows) {\n    var i;\n    var results = [];\n\n    if (this.primaryKeyColumn) {\n      // group the results by the primary key. this handles the case where we might have done a left join and\n      // we need to only return one record per grouping\n      var items = persistUtil.groupBy(rows, this.primaryKeyColumn.alias);\n      var trueFunc = function () { return true; };\n      for (i = 0; i < items.length; i++) {\n        var item = items[i];\n        var result = new this.primaryKeyColumn.model();\n        result._isPersisted = trueFunc;\n        result = this.toObject(item[0], result);\n        results.push(result);\n\n        this.populateIncludes(result, item);\n      }\n      return results;\n    }\n\n    for (i = 0; i < rows.length; i++) {\n      results.push(this.toObject(rows[i]));\n    }\n    return results;\n  },\n\n  toObject: function (row, result) {\n    var key;\n    var trueFunc = function () { return true; };\n    for (key in row) {\n      if (key == 'parse' || key == '_typeCast') {\n        continue;\n      }\n      var column = this.getColumnByAlias(key);\n      if (!column) {\n        throw new Error('Could not find column from alias \"' + key + '\"');\n      }\n      if (!result) {\n        result = new column.model();\n        result._isPersisted = trueFunc;\n      }\n      if (column.model !== result._getModel()) {\n        continue;\n      }\n      var val = row[key];\n      if (column.modelColumn.type === type.DATETIME && val && typeof (val) === 'number') {\n        val = new Date(val);\n      }\n      if (column.modelColumn.type === type.JSON && val) {\n        try {\n          val = JSON.parse(val);\n        } catch (e) {\n          // could not parse json so we will leave it as a string\n        }\n      }\n      if (column.modelColumn.type === type.BOOLEAN && (val !== null)) {\n        val = !!val;\n      }\n      result[column.propertyName] = val;\n    }\n    if (result._getModel().onLoad) {\n      result._getModel().onLoad(result);\n    }\n    return result;\n  }\n});\n\nmodule.exports = SqlTree;\n"]},"metadata":{},"sourceType":"script"}