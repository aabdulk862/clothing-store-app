{"ast":null,"code":"export function withMatcher(actionCreator) {\n  const type = actionCreator().type;\n}\nexport function createAction(type, payload) {\n  return {\n    type,\n    payload\n  };\n}","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/src/utils/reducer/reducer.utils.ts"],"names":["withMatcher","actionCreator","type","createAction","payload"],"mappings":"AAWA,OAAO,SAASA,WAAT,CAAqBC,aAArB,EAA6C;AAChD,QAAMC,IAAI,GAAGD,aAAa,GAAGC,IAA7B;AACH;AAeD,OAAO,SAASC,YAAT,CAA2CD,IAA3C,EAAoDE,OAApD,EAA+D;AAClE,SAAO;AAAEF,IAAAA,IAAF;AAAQE,IAAAA;AAAR,GAAP;AACH","sourcesContent":["import { AnyAction } from \"redux\";\n\ntype Matchable<AC extends ()=> AnyAction> = AC & {\n    type: ReturnType<AC>['type'];\n    match(action: AnyAction): action is ReturnType<AC>;\n}\n\nexport function withMatcher<AC extends ()=> AnyAction & {type: string}>(actionCreator: AC ): Matchable<AC>;\n\nexport function withMatcher<AC extends (...args: any[])=> AnyAction & {type: string}>(actionCreator: AC): Matchable<AC>;\n\nexport function withMatcher(actionCreator: Function){\n    const type = actionCreator().type;\n}\n\nexport type ActionWithPayload<T,P> ={\n    type: T;\n    payload: P;\n}\n\nexport type Action<T> = {\n    type: T;\n};\n\nexport function createAction< T extends string, P>(type: T, payload: P): ActionWithPayload<T,P>;\n\nexport function createAction< T extends string >(type: T, payload: void): Action<T>;\n\nexport function createAction<T extends string, P>(type: T, payload: P){\n    return { type, payload};\n}\n\n\n"]},"metadata":{},"sourceType":"module"}