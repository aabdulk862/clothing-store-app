{"ast":null,"code":"/* Simple JavaScript Inheritance\n * By John Resig http://ejohn.org/\n * MIT Licensed.\n */\n// Inspired by base2 and Prototype\nvar initializing = false,\n    fnTest = /xyz/.test(function () {\n  xyz;\n}) ? /\\b_super\\b/ : /.*/; // The base Class implementation (does nothing)\n\nvar Class = function () {}; // Create a new Class that inherits from this class\n\n\nClass.extend = function (prop) {\n  var _super = this.prototype; // Instantiate a base class (but only create the instance,\n  // don't run the init constructor)\n\n  initializing = true;\n  var prototype = new this();\n  initializing = false; // Copy the properties over onto the new prototype\n\n  for (var name in prop) {\n    // Check if we're overwriting an existing function\n    prototype[name] = typeof prop[name] == \"function\" && typeof _super[name] == \"function\" && fnTest.test(prop[name]) ? function (name, fn) {\n      return function () {\n        var tmp = this._super; // Add a new ._super() method that is the same method\n        // but on the super-class\n\n        this._super = _super[name]; // The method only need to be bound temporarily, so we\n        // remove it when we're done executing\n\n        var ret = fn.apply(this, arguments);\n        this._super = tmp;\n        return ret;\n      };\n    }(name, prop[name]) : prop[name];\n  } // The dummy class constructor\n\n\n  function Class() {\n    // All construction is actually done in the init method\n    if (!initializing && this.init) this.init.apply(this, arguments);\n  } // Populate our constructed prototype object\n\n\n  Class.prototype = prototype; // Enforce the constructor to be what we expect\n\n  Class.prototype.constructor = Class; // And make this class extendable\n\n  Class.extend = arguments.callee;\n  return Class;\n};\n\nmodule.exports = Class;","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/node_modules/persist/lib/class.js"],"names":["initializing","fnTest","test","xyz","Class","extend","prop","_super","prototype","name","fn","tmp","ret","apply","arguments","init","constructor","callee","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,IAAIA,YAAY,GAAG,KAAnB;AAAA,IAA0BC,MAAM,GAAG,MAAMC,IAAN,CAAW,YAAU;AAACC,EAAAA,GAAG;AAAE,CAA3B,IAA+B,YAA/B,GAA8C,IAAjF,C,CAEA;;AACA,IAAIC,KAAK,GAAG,YAAU,CAAE,CAAxB,C,CAEA;;;AACAA,KAAK,CAACC,MAAN,GAAe,UAASC,IAAT,EAAe;AAC5B,MAAIC,MAAM,GAAG,KAAKC,SAAlB,CAD4B,CAG5B;AACA;;AACAR,EAAAA,YAAY,GAAG,IAAf;AACA,MAAIQ,SAAS,GAAG,IAAI,IAAJ,EAAhB;AACAR,EAAAA,YAAY,GAAG,KAAf,CAP4B,CAS5B;;AACA,OAAK,IAAIS,IAAT,IAAiBH,IAAjB,EAAuB;AACrB;AACAE,IAAAA,SAAS,CAACC,IAAD,CAAT,GAAkB,OAAOH,IAAI,CAACG,IAAD,CAAX,IAAqB,UAArB,IAChB,OAAOF,MAAM,CAACE,IAAD,CAAb,IAAuB,UADP,IACqBR,MAAM,CAACC,IAAP,CAAYI,IAAI,CAACG,IAAD,CAAhB,CADrB,GAEf,UAASA,IAAT,EAAeC,EAAf,EAAkB;AACjB,aAAO,YAAW;AAChB,YAAIC,GAAG,GAAG,KAAKJ,MAAf,CADgB,CAGhB;AACA;;AACA,aAAKA,MAAL,GAAcA,MAAM,CAACE,IAAD,CAApB,CALgB,CAOhB;AACA;;AACA,YAAIG,GAAG,GAAGF,EAAE,CAACG,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAV;AACA,aAAKP,MAAL,GAAcI,GAAd;AAEA,eAAOC,GAAP;AACD,OAbD;AAcD,KAfD,CAeGH,IAfH,EAeSH,IAAI,CAACG,IAAD,CAfb,CAFgB,GAkBhBH,IAAI,CAACG,IAAD,CAlBN;AAmBD,GA/B2B,CAiC5B;;;AACA,WAASL,KAAT,GAAiB;AACf;AACA,QAAK,CAACJ,YAAD,IAAiB,KAAKe,IAA3B,EACE,KAAKA,IAAL,CAAUF,KAAV,CAAgB,IAAhB,EAAsBC,SAAtB;AACH,GAtC2B,CAwC5B;;;AACAV,EAAAA,KAAK,CAACI,SAAN,GAAkBA,SAAlB,CAzC4B,CA2C5B;;AACAJ,EAAAA,KAAK,CAACI,SAAN,CAAgBQ,WAAhB,GAA8BZ,KAA9B,CA5C4B,CA8C5B;;AACAA,EAAAA,KAAK,CAACC,MAAN,GAAeS,SAAS,CAACG,MAAzB;AAEA,SAAOb,KAAP;AACD,CAlDD;;AAoDAc,MAAM,CAACC,OAAP,GAAiBf,KAAjB","sourcesContent":["/* Simple JavaScript Inheritance\n * By John Resig http://ejohn.org/\n * MIT Licensed.\n */\n// Inspired by base2 and Prototype\nvar initializing = false, fnTest = /xyz/.test(function(){xyz;}) ? /\\b_super\\b/ : /.*/;\n\n// The base Class implementation (does nothing)\nvar Class = function(){};\n\n// Create a new Class that inherits from this class\nClass.extend = function(prop) {\n  var _super = this.prototype;\n\n  // Instantiate a base class (but only create the instance,\n  // don't run the init constructor)\n  initializing = true;\n  var prototype = new this();\n  initializing = false;\n\n  // Copy the properties over onto the new prototype\n  for (var name in prop) {\n    // Check if we're overwriting an existing function\n    prototype[name] = typeof prop[name] == \"function\" &&\n      typeof _super[name] == \"function\" && fnTest.test(prop[name]) ?\n      (function(name, fn){\n        return function() {\n          var tmp = this._super;\n\n          // Add a new ._super() method that is the same method\n          // but on the super-class\n          this._super = _super[name];\n\n          // The method only need to be bound temporarily, so we\n          // remove it when we're done executing\n          var ret = fn.apply(this, arguments);\n          this._super = tmp;\n\n          return ret;\n        };\n      })(name, prop[name]) :\n      prop[name];\n  }\n\n  // The dummy class constructor\n  function Class() {\n    // All construction is actually done in the init method\n    if ( !initializing && this.init )\n      this.init.apply(this, arguments);\n  }\n\n  // Populate our constructed prototype object\n  Class.prototype = prototype;\n\n  // Enforce the constructor to be what we expect\n  Class.prototype.constructor = Class;\n\n  // And make this class extendable\n  Class.extend = arguments.callee;\n\n  return Class;\n};\n\nmodule.exports = Class;\n"]},"metadata":{},"sourceType":"script"}