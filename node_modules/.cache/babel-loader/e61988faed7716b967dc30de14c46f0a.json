{"ast":null,"code":"'use strict';\n\nvar persistUtils = require('./persist_utils');\n\nvar persist = require('./persist');\n\nvar util = require('util');\n\nvar Class = require('./class');\n\nvar Driver = Class.extend({\n  init: function () {},\n  connect: function (opts, callback) {\n    throw new Error(\"Not Implemented\");\n  },\n  getValuesSubstitutionString: function (index) {\n    return '?';\n  },\n  getInsertSql: function (obj) {\n    var columnNamesSql = [];\n    var valuesSql = [];\n    var values = [];\n    var valueSubstitutionIndex = 1;\n    var columnKey;\n\n    for (columnKey in obj._getModel().columns) {\n      var column = obj._getModel().columns[columnKey];\n\n      if (column.primaryKey && column.autoIncrement) {\n        continue;\n      }\n\n      columnNamesSql.push(this.escapeColumnName(column.dbColumnName));\n      valuesSql.push(this.getValuesSubstitutionString(valueSubstitutionIndex++));\n      values.push(obj[columnKey]);\n    }\n\n    var sql = util.format('INSERT INTO %s (%s) VALUES (%s)', obj._getModel().tableName, columnNamesSql.join(','), valuesSql.join(','));\n    var result = {\n      sql: sql,\n      values: values\n    }; //console.log(result);\n\n    return result;\n  },\n  getManyToManyInsertSql: function (association, obj, relatedObj) {\n    var valueSubstitutionIndex = 1;\n    var columnNamesSql = [this.escapeColumnName(association.foreignKey), this.escapeColumnName(association.manyToManyForeignKey)];\n    var valuesSql = [this.getValuesSubstitutionString(valueSubstitutionIndex++), this.getValuesSubstitutionString(valueSubstitutionIndex++)];\n\n    if (!relatedObj.getId) {\n      throw new Error('a related object \"' + util.inspect(relatedObj, false, 1) + '\" from a many-to-many appears to not have come from the database. You must save related objects first before calling save on the parent object.');\n    }\n\n    var values = [obj.getId(), relatedObj.getId()];\n    var sql = util.format('INSERT INTO %s (%s) VALUES (%s)', association.through, columnNamesSql.join(','), valuesSql.join(','));\n    var result = {\n      sql: sql,\n      values: values\n    }; //console.log(result);\n\n    return result;\n  },\n  getUpdateSql: function (obj) {\n    var valueSubstitutionIndex = 1;\n    var columnNamesSql = [];\n    var values = [];\n    var columnKey;\n\n    for (columnKey in obj._getModel().columns) {\n      var column = obj._getModel().columns[columnKey];\n\n      if (column.primaryKey && column.autoIncrement) {\n        continue;\n      }\n\n      columnNamesSql.push(this.escapeColumnName(column.dbColumnName) + ' = ' + this.getValuesSubstitutionString(valueSubstitutionIndex++));\n      values.push(obj[columnKey]);\n    }\n\n    var idColumnName = obj._getModel().getIdColumn().dbColumnName;\n\n    values.push(obj.getId());\n    var sql = util.format('UPDATE %s SET %s WHERE %s = %s', obj._getModel().tableName, columnNamesSql.join(','), idColumnName, this.getValuesSubstitutionString(valueSubstitutionIndex++)); //console.log(sql);\n\n    return {\n      sql: sql,\n      values: values\n    };\n  },\n  getUpdatePartialSql: function (model, id, data) {\n    var valueSubstitutionIndex = 1;\n    var columnNamesSql = [];\n    var values = [];\n    var prop;\n\n    for (prop in data) {\n      var column = model.columns[prop];\n\n      if (column) {\n        if (column.primaryKey && column.autoIncrement) {\n          throw new Error(\"Invalid column to update '\" + prop + \"', cannot be a primary or autoincrementing column.\");\n        }\n\n        columnNamesSql.push(this.escapeColumnName(column.dbColumnName) + ' = ' + this.getValuesSubstitutionString(valueSubstitutionIndex++));\n        values.push(data[prop]);\n      } else {\n        var association = model.associations[prop];\n\n        if (association) {\n          if (association.type === 'hasOne') {\n            columnNamesSql.push(this.escapeColumnName(association.foreignKey) + ' = ' + this.getValuesSubstitutionString(valueSubstitutionIndex++));\n            values.push(data[prop].getId());\n          } else {\n            throw new Error(\"Invalid association '\" + prop + \"' for update, must be a hasOne.\");\n          }\n        } else {\n          throw new Error(\"Could not find column or association to update '\" + prop + \"'.\");\n        }\n      }\n    }\n\n    if (columnNamesSql.length === 0) {\n      throw new Error(\"No columns to update.\");\n    }\n\n    var idColumndName = model.getIdPropertyName();\n    values.push(id);\n    var sql = util.format('UPDATE %s SET %s WHERE %s = %s', model.tableName, columnNamesSql.join(','), idColumndName, this.getValuesSubstitutionString(valueSubstitutionIndex++));\n    var results = {\n      sql: sql,\n      values: values\n    }; //console.log(results);\n\n    return results;\n  },\n  escapeColumnName: function (columnName) {\n    throw new Error(\"Not Implemented\");\n  },\n  getColumnName: function (column, aliasTables) {\n    var name = this.escapeColumnName(column.dbColumnName);\n\n    if (aliasTables) {\n      name = column.tableAlias + '.' + name;\n    }\n\n    return name;\n  },\n  propertyNamesToColumnNames: function (sqlTree, expr, aliasTables) {\n    return expr.replace(/([a-zA-Z_\\.]+)/g, function (m) {\n      var parts = m.split('.');\n      var partIndex = 0;\n\n      if (sqlTree.model && sqlTree.model.columns) {\n        var model = sqlTree.model;\n\n        for (partIndex; partIndex < parts.length - 1; partIndex++) {\n          var association = model.associations[parts[partIndex]];\n          model = association.model;\n        }\n\n        var column = sqlTree.findColumnByModelNameAndColumnName(model.modelName, parts[partIndex]);\n\n        if (column) {\n          if (aliasTables) {\n            return column.tableAlias + '.' + column.dbColumnName;\n          } else {\n            return column.dbColumnName;\n          }\n        } // fall back and try to lookup by name\n\n\n        column = sqlTree.model.columns[m];\n\n        if (column) {\n          if (aliasTables) {\n            return sqlTree.tableAlias + '.' + column.dbColumnName;\n          } else {\n            return column.dbColumnName;\n          }\n        }\n      } // give up and just return the input\n\n\n      return m;\n    });\n  },\n  getTableAliasSql: function (tableName, alias) {\n    return tableName + \" AS \" + alias;\n  },\n  _updateSubstitutes: function (sql, params) {\n    var self = this;\n    var index = 1;\n    sql = sql.replace(/\\?/g, function () {\n      return self.getValuesSubstitutionString(index++);\n    });\n    return sql;\n  },\n  getSqlFromSqlTree: function (sqlTree) {\n    var self = this;\n    var sql = '';\n    var values = [];\n    var aliasTables = true;\n    var valueSubstitutionIndex = 1;\n    var i;\n\n    if (sqlTree.action === 'delete' || sqlTree.action === 'update') {\n      aliasTables = false;\n    }\n\n    if (sqlTree.action === 'update') {\n      sql += 'UPDATE ' + sqlTree.tableName + ' SET ';\n      var sets = [];\n\n      for (var k in sqlTree.updateHash) {\n        var column = sqlTree.getColumnByPropertyName(k);\n        sets.push(this.getColumnName(column, aliasTables) + ' = ' + self.getValuesSubstitutionString(valueSubstitutionIndex++));\n        values.push(sqlTree.updateHash[k]);\n      }\n\n      sql += sets.join(', ') + ' ';\n    } else {\n      if (sqlTree.action === 'min') {\n        sql += 'SELECT min(' + this.getColumnName(sqlTree.columns[0], aliasTables) + ') as min ';\n      } else if (sqlTree.action === 'max') {\n        sql += 'SELECT max(' + this.getColumnName(sqlTree.columns[0], aliasTables) + ') as max ';\n      } else if (sqlTree.action === 'count') {\n        sql += 'SELECT count(*) as count ';\n      } else if (sqlTree.action === 'sum') {\n        sql += 'SELECT sum(' + this.getColumnName(sqlTree.columns[0], aliasTables) + ') as sum ';\n      } else {\n        sql += sqlTree.action + ' ';\n        sql = this.addColumnsSql(sql, sqlTree, aliasTables);\n      }\n\n      if (aliasTables) {\n        sql += util.format('FROM %s ', this.getTableAliasSql(sqlTree.tableName, sqlTree.tableAlias));\n      } else {\n        sql += util.format('FROM %s ', sqlTree.tableName);\n      }\n    }\n\n    if (sqlTree.joins) {\n      for (i = 0; i < sqlTree.joins.length; i++) {\n        var join = sqlTree.joins[i];\n        var joinSql;\n\n        switch (join.type) {\n          case 'join':\n            joinSql = \"INNER JOIN\";\n            break;\n\n          case 'left join':\n            joinSql = \"LEFT JOIN\";\n            break;\n\n          default:\n            throw new Error(\"unhandled join type '\" + join.type + \"'\");\n        }\n\n        sql += util.format(\"%s %s ON %s.%s=%s \", joinSql, this.getTableAliasSql(join.otherTable, join.tableAlias), join.tableAlias, join.otherTableId, join.thisTableId);\n      }\n    } // process where\n\n\n    var expressions = [];\n\n    var getValuesSubstitutionStringFunc = function (match) {\n      return self.getValuesSubstitutionString(valueSubstitutionIndex++);\n    };\n\n    for (i = 0; i < sqlTree.where.length; i++) {\n      var item = sqlTree.where[i];\n      var expr = item.expr;\n      expr = this.propertyNamesToColumnNames(sqlTree, item.expr, aliasTables);\n      expr = expr.replace(/\\?/, getValuesSubstitutionStringFunc);\n      expressions.push(expr);\n      values = values.concat(item.params);\n    }\n\n    if (expressions.length > 0) {\n      sql += 'WHERE ' + expressions.join(' AND ') + ' ';\n    }\n\n    if (sqlTree.orderBy && sqlTree.orderBy.length > 0) {\n      sql += 'ORDER BY ';\n      var orderBys = [];\n\n      for (i = 0; i < sqlTree.orderBy.length; i++) {\n        var orderBy = sqlTree.orderBy[i];\n        var orderByClause = this.escapeColumnName(orderBy.column.alias) + ' ';\n\n        if (orderBy.direction) {\n          switch (orderBy.direction) {\n            case persist.Ascending:\n              orderByClause += 'ASC';\n              break;\n\n            case persist.Descending:\n              orderByClause += 'DESC';\n              break;\n\n            default:\n              throw new Error(\"Invalid order by direction \" + orderBy.direction);\n          }\n        }\n\n        orderBys.push(orderByClause);\n      }\n\n      sql += orderBys.join(',') + ' ';\n    }\n\n    sql = this.addLimitClause(sql, sqlTree);\n    var result = {\n      sql: sql,\n      values: values\n    }; //console.log(result);\n\n    return result;\n  },\n  addColumnsSql: function (sql, sqlTree, aliasTables) {\n    var columns = [];\n    var i;\n\n    for (i = 0; i < sqlTree.columns.length; i++) {\n      var column = sqlTree.columns[i];\n      columns.push(this.getColumnName(column, aliasTables) + ' AS ' + column.alias);\n    }\n\n    sql += columns.join(', ') + ' ';\n    return sql;\n  },\n  addLimitClause: function (sql, sqlTree) {\n    if (sqlTree.limitCount) {\n      sql += 'LIMIT ' + sqlTree.limitCount;\n\n      if (sqlTree.limitOffset) {\n        sql += ' OFFSET ' + sqlTree.limitOffset;\n      }\n\n      sql += ' ';\n    }\n\n    return sql;\n  }\n});\nmodule.exports = Driver;","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/node_modules/persist/lib/driver.js"],"names":["persistUtils","require","persist","util","Class","Driver","extend","init","connect","opts","callback","Error","getValuesSubstitutionString","index","getInsertSql","obj","columnNamesSql","valuesSql","values","valueSubstitutionIndex","columnKey","_getModel","columns","column","primaryKey","autoIncrement","push","escapeColumnName","dbColumnName","sql","format","tableName","join","result","getManyToManyInsertSql","association","relatedObj","foreignKey","manyToManyForeignKey","getId","inspect","through","getUpdateSql","idColumnName","getIdColumn","getUpdatePartialSql","model","id","data","prop","associations","type","length","idColumndName","getIdPropertyName","results","columnName","getColumnName","aliasTables","name","tableAlias","propertyNamesToColumnNames","sqlTree","expr","replace","m","parts","split","partIndex","findColumnByModelNameAndColumnName","modelName","getTableAliasSql","alias","_updateSubstitutes","params","self","getSqlFromSqlTree","i","action","sets","k","updateHash","getColumnByPropertyName","addColumnsSql","joins","joinSql","otherTable","otherTableId","thisTableId","expressions","getValuesSubstitutionStringFunc","match","where","item","concat","orderBy","orderBys","orderByClause","direction","Ascending","Descending","addLimitClause","limitCount","limitOffset","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar persistUtils = require('./persist_utils');\nvar persist = require('./persist');\nvar util = require('util');\nvar Class = require('./class');\n\nvar Driver = Class.extend({\n  init: function() {\n  },\n\n  connect: function(opts, callback) {\n    throw new Error(\"Not Implemented\");\n  },\n\n  getValuesSubstitutionString: function(index) {\n    return '?';\n  },\n\n  getInsertSql: function(obj) {\n    var columnNamesSql = [];\n    var valuesSql = [];\n    var values = [];\n    var valueSubstitutionIndex = 1;\n\n    var columnKey;\n    for (columnKey in obj._getModel().columns) {\n      var column = obj._getModel().columns[columnKey];\n      if (column.primaryKey && column.autoIncrement) {\n        continue;\n      }\n      columnNamesSql.push(this.escapeColumnName(column.dbColumnName));\n      valuesSql.push(this.getValuesSubstitutionString(valueSubstitutionIndex++));\n      values.push(obj[columnKey]);\n    }\n\n    var sql = util.format('INSERT INTO %s (%s) VALUES (%s)', obj._getModel().tableName, columnNamesSql.join(','), valuesSql.join(','));\n    var result = { sql: sql, values: values };\n    //console.log(result);\n    return result;\n  },\n\n  getManyToManyInsertSql: function(association, obj, relatedObj) {\n    var valueSubstitutionIndex = 1;\n    var columnNamesSql = [ this.escapeColumnName(association.foreignKey), this.escapeColumnName(association.manyToManyForeignKey) ];\n    var valuesSql = [\n      this.getValuesSubstitutionString(valueSubstitutionIndex++),\n      this.getValuesSubstitutionString(valueSubstitutionIndex++)];\n    if (!relatedObj.getId) {\n      throw new Error('a related object \"' + util.inspect(relatedObj, false, 1) + '\" from a many-to-many appears to not have come from the database. You must save related objects first before calling save on the parent object.');\n    }\n    var values = [ obj.getId(), relatedObj.getId() ];\n\n    var sql = util.format('INSERT INTO %s (%s) VALUES (%s)', association.through, columnNamesSql.join(','), valuesSql.join(','));\n    var result = { sql: sql, values: values };\n    //console.log(result);\n    return result;\n  },\n\n  getUpdateSql: function(obj) {\n    var valueSubstitutionIndex = 1;\n    var columnNamesSql = [];\n    var values = [];\n\n    var columnKey;\n    for (columnKey in obj._getModel().columns) {\n      var column = obj._getModel().columns[columnKey];\n      if (column.primaryKey && column.autoIncrement) {\n        continue;\n      }\n      columnNamesSql.push(this.escapeColumnName(column.dbColumnName) + ' = ' + this.getValuesSubstitutionString(valueSubstitutionIndex++));\n      values.push(obj[columnKey]);\n    }\n\n    var idColumnName = obj._getModel().getIdColumn().dbColumnName;\n    values.push(obj.getId());\n\n    var sql = util.format('UPDATE %s SET %s WHERE %s = %s', obj._getModel().tableName, columnNamesSql.join(','), idColumnName, this.getValuesSubstitutionString(valueSubstitutionIndex++));\n    //console.log(sql);\n    return { sql: sql, values: values };\n  },\n\n  getUpdatePartialSql: function(model, id, data) {\n    var valueSubstitutionIndex = 1;\n    var columnNamesSql = [];\n    var values = [];\n\n    var prop;\n    for (prop in data) {\n      var column = model.columns[prop];\n      if (column) {\n        if (column.primaryKey && column.autoIncrement) {\n          throw new Error(\"Invalid column to update '\" + prop + \"', cannot be a primary or autoincrementing column.\");\n        }\n        columnNamesSql.push(this.escapeColumnName(column.dbColumnName) + ' = ' + this.getValuesSubstitutionString(valueSubstitutionIndex++));\n        values.push(data[prop]);\n      } else {\n        var association = model.associations[prop];\n        if (association) {\n          if (association.type === 'hasOne') {\n            columnNamesSql.push(this.escapeColumnName(association.foreignKey) + ' = ' + this.getValuesSubstitutionString(valueSubstitutionIndex++));\n            values.push(data[prop].getId());\n          } else {\n            throw new Error(\"Invalid association '\" + prop + \"' for update, must be a hasOne.\");\n          }\n        } else {\n          throw new Error(\"Could not find column or association to update '\" + prop + \"'.\");\n        }\n      }\n    }\n\n    if (columnNamesSql.length === 0) {\n      throw new Error(\"No columns to update.\");\n    }\n\n    var idColumndName = model.getIdPropertyName();\n    values.push(id);\n\n    var sql = util.format('UPDATE %s SET %s WHERE %s = %s', model.tableName, columnNamesSql.join(','), idColumndName, this.getValuesSubstitutionString(valueSubstitutionIndex++));\n    var results = { sql: sql, values: values };\n    //console.log(results);\n    return results;\n  },\n\n  escapeColumnName: function(columnName) {\n    throw new Error(\"Not Implemented\");\n  },\n\n  getColumnName: function(column, aliasTables) {\n    var name = this.escapeColumnName(column.dbColumnName);\n    if (aliasTables) {\n      name = column.tableAlias + '.' + name;\n    }\n    return name;\n  },\n\n  propertyNamesToColumnNames: function(sqlTree, expr, aliasTables) {\n    return expr.replace(/([a-zA-Z_\\.]+)/g, function(m) {\n      var parts = m.split('.');\n      var partIndex = 0;\n      if (sqlTree.model && sqlTree.model.columns) {\n        var model = sqlTree.model;\n\n        for (partIndex; partIndex < parts.length - 1; partIndex++) {\n          var association = model.associations[parts[partIndex]];\n          model = association.model;\n        }\n\n        var column = sqlTree.findColumnByModelNameAndColumnName(model.modelName, parts[partIndex]);\n        if (column) {\n          if (aliasTables) {\n            return column.tableAlias + '.' + column.dbColumnName;\n          } else {\n            return column.dbColumnName;\n          }\n        }\n\n        // fall back and try to lookup by name\n        column = sqlTree.model.columns[m];\n        if (column) {\n          if (aliasTables) {\n            return sqlTree.tableAlias + '.' + column.dbColumnName;\n          } else {\n            return column.dbColumnName;\n          }\n        }\n      }\n\n      // give up and just return the input\n      return m;\n    });\n  },\n\n  getTableAliasSql: function(tableName, alias) {\n    return tableName + \" AS \" + alias;\n  },\n\n  _updateSubstitutes: function(sql, params) {\n    var self = this;\n    var index = 1;\n    sql = sql.replace(/\\?/g, function() {\n      return self.getValuesSubstitutionString(index++);\n    });\n    return sql;\n  },\n\n  getSqlFromSqlTree: function(sqlTree) {\n    var self = this;\n    var sql = '';\n    var values = [];\n    var aliasTables = true;\n    var valueSubstitutionIndex = 1;\n    var i;\n\n    if ((sqlTree.action === 'delete') || (sqlTree.action === 'update')) {\n      aliasTables = false;\n    }\n\n    if (sqlTree.action === 'update') {\n      sql += 'UPDATE ' + sqlTree.tableName + ' SET ';\n      var sets = [];\n      for (var k in sqlTree.updateHash) {\n        var column = sqlTree.getColumnByPropertyName(k);\n        sets.push(this.getColumnName(column, aliasTables) + ' = ' + self.getValuesSubstitutionString(valueSubstitutionIndex++));\n        values.push(sqlTree.updateHash[k]);\n      }\n      sql += sets.join(', ') + ' ';\n    } else {\n      if (sqlTree.action === 'min') {\n        sql += 'SELECT min(' + this.getColumnName(sqlTree.columns[0], aliasTables) + ') as min ';\n      } else if (sqlTree.action === 'max') {\n        sql += 'SELECT max(' + this.getColumnName(sqlTree.columns[0], aliasTables) + ') as max ';\n      } else if (sqlTree.action === 'count') {\n        sql += 'SELECT count(*) as count ';\n      } else if (sqlTree.action === 'sum') {\n        sql += 'SELECT sum(' + this.getColumnName(sqlTree.columns[0], aliasTables) + ') as sum ';\n      } else {\n        sql += sqlTree.action + ' ';\n\n        sql = this.addColumnsSql(sql, sqlTree, aliasTables);\n      }\n\n      if (aliasTables) {\n        sql += util.format('FROM %s ', this.getTableAliasSql(sqlTree.tableName, sqlTree.tableAlias));\n      } else {\n        sql += util.format('FROM %s ', sqlTree.tableName);\n      }\n    }\n\n    if (sqlTree.joins) {\n      for (i = 0; i < sqlTree.joins.length; i++) {\n        var join = sqlTree.joins[i];\n        var joinSql;\n        switch (join.type) {\n        case 'join':\n          joinSql = \"INNER JOIN\";\n          break;\n        case 'left join':\n          joinSql = \"LEFT JOIN\";\n          break;\n        default:\n          throw new Error(\"unhandled join type '\" + join.type + \"'\");\n        }\n        sql += util.format(\"%s %s ON %s.%s=%s \", joinSql, this.getTableAliasSql(join.otherTable, join.tableAlias), join.tableAlias, join.otherTableId, join.thisTableId);\n      }\n    }\n\n    // process where\n    var expressions = [];\n    var getValuesSubstitutionStringFunc = function(match) {\n      return self.getValuesSubstitutionString(valueSubstitutionIndex++);\n    };\n    for (i = 0; i < sqlTree.where.length; i++) {\n      var item = sqlTree.where[i];\n      var expr = item.expr;\n      expr = this.propertyNamesToColumnNames(sqlTree, item.expr, aliasTables);\n      expr = expr.replace(/\\?/, getValuesSubstitutionStringFunc);\n      expressions.push(expr);\n      values = values.concat(item.params);\n    }\n    if (expressions.length > 0) {\n      sql += 'WHERE ' + expressions.join(' AND ') + ' ';\n    }\n\n    if (sqlTree.orderBy && sqlTree.orderBy.length > 0) {\n      sql += 'ORDER BY ';\n      var orderBys = [];\n\n      for (i = 0; i < sqlTree.orderBy.length; i++) {\n        var orderBy = sqlTree.orderBy[i];\n        var orderByClause = this.escapeColumnName(orderBy.column.alias) + ' ';\n        if (orderBy.direction) {\n          switch (orderBy.direction) {\n          case persist.Ascending:\n            orderByClause += 'ASC';\n            break;\n          case persist.Descending:\n            orderByClause += 'DESC';\n            break;\n          default:\n            throw new Error(\"Invalid order by direction \" + orderBy.direction);\n          }\n        }\n        orderBys.push(orderByClause);\n      }\n\n      sql += orderBys.join(',') + ' ';\n    }\n\n    sql = this.addLimitClause(sql, sqlTree);\n\n    var result = { sql: sql, values: values };\n    //console.log(result);\n    return result;\n  },\n\n  addColumnsSql: function(sql, sqlTree, aliasTables) {\n    var columns = [];\n    var i;\n    for (i = 0; i < sqlTree.columns.length; i++) {\n      var column = sqlTree.columns[i];\n      columns.push(this.getColumnName(column, aliasTables) + ' AS ' + column.alias);\n    }\n    sql += columns.join(', ') + ' ';\n    return sql;\n  },\n\n  addLimitClause: function(sql, sqlTree) {\n    if (sqlTree.limitCount) {\n      sql += 'LIMIT ' + sqlTree.limitCount;\n      if (sqlTree.limitOffset) {\n        sql += ' OFFSET ' + sqlTree.limitOffset;\n      }\n      sql += ' ';\n    }\n    return sql;\n  }\n});\n\nmodule.exports = Driver;\n"]},"metadata":{},"sourceType":"script"}