{"ast":null,"code":"'use strict';\n\nvar Driver = require('../driver');\n\nvar Connection = require('../connection');\n\nvar sqlite3 = require('sqlite3').verbose();\n\nvar Sqlite3Connection = Connection.extend({\n  init: function (driver, db, createdConnection, opts) {\n    this._super(driver, opts);\n\n    this.db = db;\n    this.createdConnection = createdConnection;\n  },\n  close: function () {\n    if (this.createdConnection) {\n      this.db.close();\n    }\n  },\n  beginTransaction: function (callback) {\n    this._runSql(\"BEGIN TRANSACTION\", callback);\n  },\n  commitTransaction: function (callback) {\n    this._runSql(\"COMMIT TRANSACTION\", callback);\n  },\n  rollbackTransaction: function (callback) {\n    this._runSql(\"ROLLBACK TRANSACTION\", callback);\n  },\n  _runSql2: function (sql, callback) {\n    this.db.run(sql, function (err) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(null, {});\n    });\n  },\n  _runSql3: function (sql, values, callback) {\n    var stmt = this.db.prepare(sql, function (err) {\n      if (err) {\n        callback(err);\n        return;\n      }\n    });\n    stmt.run(values, function (err) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(null, {\n        lastId: stmt.lastID,\n        changes: stmt.changes\n      });\n    });\n    stmt.finalize();\n  },\n  _runSqlAll: function (sql, params, callback) {\n    this.db.all(sql, params, callback);\n  },\n  _runSqlEach: function (sql, params, callback, doneCallback) {\n    this.db.each(sql, params, callback, doneCallback);\n  }\n});\nvar Sqlite3Driver = Driver.extend({\n  init: function () {\n    this._super();\n  },\n  connect: function (opts, callback) {\n    var conn;\n\n    if (opts.db) {\n      conn = new Sqlite3Connection(this, opts.db, false);\n      callback(null, conn);\n    } else {\n      var filename = opts.filename;\n\n      if (!filename) {\n        throw new Error(\"Sqlite3 driver requires 'filename'\");\n      }\n\n      var trace = opts.trace;\n      var db = new sqlite3.Database(filename);\n\n      if (trace) {\n        db.on('trace', function (sql) {\n          console.log(sql);\n        });\n      }\n\n      conn = new Sqlite3Connection(this, db, true, opts);\n      callback(null, conn);\n    }\n  },\n  escapeColumnName: function (columnName) {\n    return '\"' + columnName + '\"';\n  }\n});\nmodule.exports = Sqlite3Driver;","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/node_modules/persist/lib/drivers/sqlite3.js"],"names":["Driver","require","Connection","sqlite3","verbose","Sqlite3Connection","extend","init","driver","db","createdConnection","opts","_super","close","beginTransaction","callback","_runSql","commitTransaction","rollbackTransaction","_runSql2","sql","run","err","_runSql3","values","stmt","prepare","lastId","lastID","changes","finalize","_runSqlAll","params","all","_runSqlEach","doneCallback","each","Sqlite3Driver","connect","conn","filename","Error","trace","Database","on","console","log","escapeColumnName","columnName","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Driver = require('../driver');\nvar Connection = require('../connection');\nvar sqlite3 = require('sqlite3').verbose();\n\nvar Sqlite3Connection = Connection.extend({\n  init: function (driver, db, createdConnection, opts) {\n    this._super(driver, opts);\n    this.db = db;\n    this.createdConnection = createdConnection;\n  },\n\n  close: function () {\n    if (this.createdConnection) {\n      this.db.close();\n    }\n  },\n\n  beginTransaction: function (callback) {\n    this._runSql(\"BEGIN TRANSACTION\", callback);\n  },\n\n  commitTransaction: function (callback) {\n    this._runSql(\"COMMIT TRANSACTION\", callback);\n  },\n\n  rollbackTransaction: function (callback) {\n    this._runSql(\"ROLLBACK TRANSACTION\", callback);\n  },\n\n  _runSql2: function (sql, callback) {\n    this.db.run(sql, function (err) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      callback(null, {});\n    });\n  },\n\n  _runSql3: function (sql, values, callback) {\n    var stmt = this.db.prepare(sql, function (err) {\n      if (err) {\n        callback(err);\n        return;\n      }\n    });\n    stmt.run(values, function (err) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      callback(null, {\n        lastId: stmt.lastID,\n        changes: stmt.changes\n      });\n    });\n    stmt.finalize();\n  },\n\n  _runSqlAll: function (sql, params, callback) {\n    this.db.all(sql, params, callback);\n  },\n\n  _runSqlEach: function (sql, params, callback, doneCallback) {\n    this.db.each(sql, params, callback, doneCallback);\n  }\n});\n\nvar Sqlite3Driver = Driver.extend({\n  init: function () {\n    this._super();\n  },\n\n  connect: function (opts, callback) {\n    var conn;\n    if (opts.db) {\n      conn = new Sqlite3Connection(this, opts.db, false);\n      callback(null, conn);\n    } else {\n      var filename = opts.filename;\n      if (!filename) { throw new Error(\"Sqlite3 driver requires 'filename'\"); }\n      var trace = opts.trace;\n\n      var db = new sqlite3.Database(filename);\n      if (trace) {\n        db.on('trace', function (sql) {\n          console.log(sql);\n        });\n      }\n      conn = new Sqlite3Connection(this, db, true, opts);\n      callback(null, conn);\n    }\n  },\n\n  escapeColumnName: function (columnName) {\n    return '\"' + columnName + '\"';\n  }\n});\n\nmodule.exports = Sqlite3Driver;\n"]},"metadata":{},"sourceType":"script"}