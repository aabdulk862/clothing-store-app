{"ast":null,"code":"/*\nCopyright (c) 2010 Ryan Schuft (ryan.schuft@gmail.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n/*\n  This code is based in part on the work done in Ruby to support\n  infection as part of Ruby on Rails in the ActiveSupport's Inflector\n  and Inflections classes.  It was initally ported to Javascript by\n  Ryan Schuft (ryan.schuft@gmail.com) in 2007. It has since been modified\n  to not alter the String prototype.\n\n  Currently implemented functions:\n\n    pluralize(str, plural) == String\n      renders a singular English language noun into its plural form\n      normal results can be overridden by passing in an alternative\n\n    singularize(str, singular) == String\n      renders a plural English language noun into its singular form\n      normal results can be overridden by passing in an alterative\n\n    camelize(str, lowFirstLetter) == String\n      renders a lower case underscored word into camel case\n      the first letter of the result will be upper case unless you pass true\n      also translates \"/\" into \"::\" (underscore does the opposite)\n\n    underscore(str) == String\n      renders a camel cased word into words seperated by underscores\n      also translates \"::\" back into \"/\" (camelize does the opposite)\n\n    humanize(str, lowFirstLetter) == String\n      renders a lower case and underscored word into human readable form\n      defaults to making the first letter capitalized unless you pass true\n\n    capitalize(str) == String\n      renders all characters to lower case and then makes the first upper\n\n    dasherize(str) == String\n      renders all underbars and spaces as dashes\n\n    titleize(str) == String\n      renders words into title casing (as for book titles)\n\n    demodulize(str) == String\n      renders class names that are prepended by modules into just the class\n\n    tableize(str) == String\n      renders camel cased singular words into their underscored plural form\n\n    classify(str) == String\n      renders an underscored plural word into its camel cased singular form\n\n    foreignKey(str, dropIdUbar) == String\n      renders a class name (camel cased singular noun) into a foreign key\n      defaults to seperating the class from the id with an underbar unless\n      you pass true\n\n    ordinalize(str) == String\n      renders all numbers found in the string into their sequence like \"22nd\"\n*/\n\n/*\n  This is a list of nouns that use the same form for both singular and plural.\n  This list should remain entirely in lower case to correctly match Strings.\n*/\nvar uncountableWords = ['equipment', 'information', 'rice', 'money', 'species', 'series', 'fish', 'sheep', 'moose', 'deer', 'news'];\n/*\n  These rules translate from the singular form of a noun to its plural form.\n*/\n\nvar pluralRules = [[new RegExp('(m)an$', 'gi'), '$1en'], [new RegExp('(pe)rson$', 'gi'), '$1ople'], [new RegExp('(child)$', 'gi'), '$1ren'], [new RegExp('^(ox)$', 'gi'), '$1en'], [new RegExp('(ax|test)is$', 'gi'), '$1es'], [new RegExp('(octop|vir)us$', 'gi'), '$1i'], [new RegExp('(alias|status)$', 'gi'), '$1es'], [new RegExp('(bu)s$', 'gi'), '$1ses'], [new RegExp('(buffal|tomat|potat)o$', 'gi'), '$1oes'], [new RegExp('([ti])um$', 'gi'), '$1a'], [new RegExp('sis$', 'gi'), 'ses'], [new RegExp('(?:([^f])fe|([lr])f)$', 'gi'), '$1$2ves'], [new RegExp('(hive)$', 'gi'), '$1s'], [new RegExp('([^aeiouy]|qu)y$', 'gi'), '$1ies'], [new RegExp('(x|ch|ss|sh)$', 'gi'), '$1es'], [new RegExp('(matr|vert|ind)ix|ex$', 'gi'), '$1ices'], [new RegExp('([m|l])ouse$', 'gi'), '$1ice'], [new RegExp('(quiz)$', 'gi'), '$1zes'], [new RegExp('s$', 'gi'), 's'], [new RegExp('$', 'gi'), 's']];\n/*\n  These rules translate from the plural form of a noun to its singular form.\n*/\n\nvar singularRules = [[new RegExp('(m)en$', 'gi'), '$1an'], [new RegExp('(pe)ople$', 'gi'), '$1rson'], [new RegExp('(child)ren$', 'gi'), '$1'], [new RegExp('([ti])a$', 'gi'), '$1um'], [new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$', 'gi'), '$1$2sis'], [new RegExp('(hive)s$', 'gi'), '$1'], [new RegExp('(tive)s$', 'gi'), '$1'], [new RegExp('(curve)s$', 'gi'), '$1'], [new RegExp('([lr])ves$', 'gi'), '$1f'], [new RegExp('([^fo])ves$', 'gi'), '$1fe'], [new RegExp('([^aeiouy]|qu)ies$', 'gi'), '$1y'], [new RegExp('(s)eries$', 'gi'), '$1eries'], [new RegExp('(m)ovies$', 'gi'), '$1ovie'], [new RegExp('(x|ch|ss|sh)es$', 'gi'), '$1'], [new RegExp('([m|l])ice$', 'gi'), '$1ouse'], [new RegExp('(bus)es$', 'gi'), '$1'], [new RegExp('(o)es$', 'gi'), '$1'], [new RegExp('(shoe)s$', 'gi'), '$1'], [new RegExp('(cris|ax|test)es$', 'gi'), '$1is'], [new RegExp('(octop|vir)i$', 'gi'), '$1us'], [new RegExp('(alias|status)es$', 'gi'), '$1'], [new RegExp('^(ox)en', 'gi'), '$1'], [new RegExp('(vert|ind)ices$', 'gi'), '$1ex'], [new RegExp('(matr)ices$', 'gi'), '$1ix'], [new RegExp('(quiz)zes$', 'gi'), '$1'], [new RegExp('s$', 'gi'), '']];\n/*\n  This is a list of words that should not be capitalized for title case\n*/\n\nvar nonTitlecasedWords = ['and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at', 'by', 'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'];\n/*\n  These are regular expressions used for converting between String formats\n*/\n\nvar idSuffix = new RegExp('(_ids|_id)$', 'g');\nvar underbar = new RegExp('_', 'g');\nvar spaceOrUnderbar = new RegExp('[\\ _]', 'g');\nvar uppercase = new RegExp('([A-Z])', 'g');\nvar underbarPrefix = new RegExp('^_');\n/*\n  This is a helper method that applies rules based replacement to a String\n  Signature:\n    applyRules(str, rules, skip, override) == String\n  Arguments:\n    str - String - String to modify and return based on the passed rules\n    rules - Array: [RegExp, String] - Regexp to match paired with String to use for replacement\n    skip - Array: [String] - Strings to skip if they match\n    override - String (optional) - String to return as though this method succeeded (used to conform to APIs)\n  Returns:\n    String - passed String modified by passed rules\n  Examples:\n    applyRules(\"cows\", InflectionJs.singularRules) === 'cow'\n*/\n\nvar applyRules = function (str, rules, skip, override) {\n  if (override) {\n    str = override;\n  } else {\n    var ignore = skip.indexOf(str.toLowerCase()) > -1;\n\n    if (!ignore) {\n      for (var x = 0; x < rules.length; x++) {\n        if (str.match(rules[x][0])) {\n          str = str.replace(rules[x][0], rules[x][1]);\n          break;\n        }\n      }\n    }\n  }\n\n  return str;\n};\n/*\n  This lets us detect if an Array contains a given element\n  Signature:\n    indexOf(array, item, fromIndex, compareFunc) == Integer\n  Arguments:\n    array - Array - array to find object in\n    item - Object - object to locate in the Array\n    fromIndex - Integer (optional) - starts checking from this position in the Array\n    compareFunc - Function (optional) - function used to compare Array item vs passed item\n  Returns:\n    Integer - index position in the Array of the passed item\n  Examples:\n    ['hi','there'].indexOf(\"guys\") === -1\n    ['hi','there'].indexOf(\"hi\") === 0\n*/\n\n\nexports.indexOf = function (array, item, fromIndex, compareFunc) {\n  if (!fromIndex) {\n    fromIndex = -1;\n  }\n\n  var index = -1;\n\n  for (var i = fromIndex; i < array.length; i++) {\n    if (array[i] === item || compareFunc && compareFunc(array[i], item)) {\n      index = i;\n      break;\n    }\n  }\n\n  return index;\n};\n/*\n  This function adds plurilization support to every String object\n    Signature:\n      pluralize(str, plural) == String\n    Arguments:\n      str - String - string to apply inflection on\n      plural - String (optional) - overrides normal output with said String\n    Returns:\n      String - singular English language nouns are returned in plural form\n    Examples:\n      \"person\".pluralize() == \"people\"\n      \"octopus\".pluralize() == \"octopi\"\n      \"Hat\".pluralize() == \"Hats\"\n      \"person\".pluralize(\"guys\") == \"guys\"\n*/\n\n\nexports.pluralize = function (str, plural) {\n  return applyRules(str, pluralRules, uncountableWords, plural);\n};\n/*\n  This function adds singularization support to every String object\n    Signature:\n      singularize(str, singular) == String\n    Arguments:\n      str - String - string to apply inflection on\n      singular - String (optional) - overrides normal output with said String\n    Returns:\n      String - plural English language nouns are returned in singular form\n    Examples:\n      \"people\".singularize() == \"person\"\n      \"octopi\".singularize() == \"octopus\"\n      \"Hats\".singularize() == \"Hat\"\n      \"guys\".singularize(\"person\") == \"person\"\n*/\n\n\nexports.singularize = function (str, singular) {\n  return applyRules(str, singularRules, uncountableWords, singular);\n};\n/*\n  This function adds camelization support to every String object\n    Signature:\n      camelize(str, lowFirstLetter) == String\n    Arguments:\n      str - String - string to apply inflection on\n      lowFirstLetter - boolean (optional) - default is to capitalize the first\n        letter of the results... passing true will lowercase it\n    Returns:\n      String - lower case underscored words will be returned in camel case\n        additionally '/' is translated to '::'\n    Examples:\n      \"message_properties\".camelize() == \"MessageProperties\"\n      \"message_properties\".camelize(true) == \"messageProperties\"\n*/\n\n\nexports.camelize = function (str, lowFirstLetter) {\n  var str = str.toLowerCase();\n  var str_path = str.split('/');\n\n  for (var i = 0; i < str_path.length; i++) {\n    var str_arr = str_path[i].split('_');\n    var initX = lowFirstLetter && i + 1 === str_path.length ? 1 : 0;\n\n    for (var x = initX; x < str_arr.length; x++) {\n      str_arr[x] = str_arr[x].charAt(0).toUpperCase() + str_arr[x].substring(1);\n    }\n\n    str_path[i] = str_arr.join('');\n  }\n\n  str = str_path.join('::');\n  return str;\n};\n/*\n  This function adds underscore support to every String object\n    Signature:\n      underscore(str) == String\n    Arguments:\n      str - String - string to apply inflection on\n    Returns:\n      String - camel cased words are returned as lower cased and underscored\n        additionally '::' is translated to '/'\n    Examples:\n      \"MessageProperties\".camelize() == \"message_properties\"\n      \"messageProperties\".underscore() == \"message_properties\"\n*/\n\n\nexports.underscore = function (str) {\n  var str_path = str.split('::');\n\n  for (var i = 0; i < str_path.length; i++) {\n    str_path[i] = str_path[i].replace(uppercase, '_$1');\n    str_path[i] = str_path[i].replace(underbarPrefix, '');\n  }\n\n  str = str_path.join('/').toLowerCase();\n  return str;\n};\n/*\n  This function adds humanize support to every String object\n    Signature:\n      humanize(str, lowFirstLetter) == String\n    Arguments:\n      str - String - string to apply inflection on\n      lowFirstLetter - boolean (optional) - default is to capitalize the first\n        letter of the results... passing true will lowercase it\n    Returns:\n      String - lower case underscored words will be returned in humanized form\n    Examples:\n      \"message_properties\".humanize() == \"Message properties\"\n      \"message_properties\".humanize(true) == \"message properties\"\n*/\n\n\nexports.humanize = function (str, lowFirstLetter) {\n  var str = str.toLowerCase();\n  str = str.replace(idSuffix, '');\n  str = str.replace(underbar, ' ');\n\n  if (!lowFirstLetter) {\n    str = exports.capitalize(str);\n  }\n\n  return str;\n};\n/*\n  This function adds capitalization support to every String object\n    Signature:\n      capitalize(str) == String\n    Arguments:\n      str - String - string to apply inflection on\n    Returns:\n      String - all characters will be lower case and the first will be upper\n    Examples:\n      \"message_properties\".capitalize() == \"Message_properties\"\n      \"message properties\".capitalize() == \"Message properties\"\n*/\n\n\nexports.capitalize = function (str) {\n  var str = str.toLowerCase();\n  str = str.substring(0, 1).toUpperCase() + str.substring(1);\n  return str;\n};\n/*\n  This function adds dasherization support to every String object\n    Signature:\n      dasherize(str) == String\n    Arguments:\n      str - String - string to apply inflection on\n    Returns:\n      String - replaces all spaces or underbars with dashes\n    Examples:\n      \"message_properties\".capitalize() == \"message-properties\"\n      \"Message Properties\".capitalize() == \"Message-Properties\"\n*/\n\n\nexports.dasherize = function (str) {\n  str = str.replace(spaceOrUnderbar, '-');\n  return str;\n};\n/*\n  This function adds titleize support to every String object\n    Signature:\n      titleize(str) == String\n    Arguments:\n      str - String - string to apply inflection on\n    Returns:\n      String - capitalizes words as you would for a book title\n    Examples:\n      \"message_properties\".titleize() == \"Message Properties\"\n      \"message properties to keep\".titleize() == \"Message Properties to Keep\"\n*/\n\n\nexports.titleize = function (str) {\n  var str = str.toLowerCase();\n  str = str.replace(underbar, ' ');\n  var str_arr = str.split(' ');\n\n  for (var x = 0; x < str_arr.length; x++) {\n    var d = str_arr[x].split('-');\n\n    for (var i = 0; i < d.length; i++) {\n      if (nonTitlecasedWords.indexOf(d[i].toLowerCase()) < 0) {\n        d[i] = exports.capitalize(d[i]);\n      }\n    }\n\n    str_arr[x] = d.join('-');\n  }\n\n  str = str_arr.join(' ');\n  str = str.substring(0, 1).toUpperCase() + str.substring(1);\n  return str;\n};\n/*\n  This function adds demodulize support to every String object\n    Signature:\n      demodulize(str) == String\n    Arguments:\n      str - String - string to apply inflection on\n    Returns:\n      String - removes module names leaving only class names (Ruby style)\n    Examples:\n      \"Message::Bus::Properties\".demodulize() == \"Properties\"\n*/\n\n\nexports.demodulize = function (str) {\n  var str_arr = str.split('::');\n  str = str_arr[str_arr.length - 1];\n  return str;\n};\n/*\n  This function adds tableize support to every String object\n    Signature:\n      tableize(str) == String\n    Arguments:\n      str - String - string to apply inflection on\n    Returns:\n      String - renders camel cased words into their underscored plural form\n    Examples:\n      \"MessageBusProperty\".tableize() == \"message_bus_properties\"\n*/\n\n\nexports.tableize = function (str) {\n  str = exports.underscore(str);\n  str = exports.pluralize(str);\n  return str;\n};\n/*\n  This function adds classification support to every String object\n    Signature:\n      classify(str) == String\n    Arguments:\n      str - String - string to apply inflection on\n    Returns:\n      String - underscored plural nouns become the camel cased singular form\n    Examples:\n      \"message_bus_properties\".classify() == \"MessageBusProperty\"\n*/\n\n\nexports.classify = function (str) {\n  str = exports.camelize(str);\n  str = exports.singularize(str);\n  return str;\n};\n/*\n  This function adds foreign key support to every String object\n    Signature:\n      foreignKey(str, dropIdUbar) == String\n    Arguments:\n      str - String - string to apply inflection on\n      dropIdUbar - boolean (optional) - default is to seperate id with an\n        underbar at the end of the class name, you can pass true to skip it\n    Returns:\n      String - camel cased singular class names become underscored with id\n    Examples:\n      \"MessageBusProperty\".foreign_key() == \"message_bus_property_id\"\n      \"MessageBusProperty\".foreign_key(true) == \"message_bus_propertyid\"\n*/\n\n\nexports.foreignKey = function (str, dropIdUbar) {\n  str = exports.demodulize(str);\n  str = exports.underscore(str);\n  str = str + (dropIdUbar ? '' : '_') + 'id';\n  return str;\n};\n/*\n  This function adds ordinalize support to every String object\n    Signature:\n      ordinalize(str) == String\n    Arguments:\n      str - String - string to apply inflection on\n    Returns:\n      String - renders all found numbers their sequence like \"22nd\"\n    Examples:\n      \"the 1 pitch\".ordinalize() == \"the 1st pitch\"\n*/\n\n\nexports.ordinalize = function (str) {\n  var str_arr = str.split(' ');\n\n  for (var x = 0; x < str_arr.length; x++) {\n    var i = parseInt(str_arr[x]);\n\n    if (i === NaN) {\n      var ltd = str_arr[x].substring(str_arr[x].length - 2);\n      var ld = str_arr[x].substring(str_arr[x].length - 1);\n      var suf = \"th\";\n\n      if (ltd != \"11\" && ltd != \"12\" && ltd != \"13\") {\n        if (ld === \"1\") {\n          suf = \"st\";\n        } else if (ld === \"2\") {\n          suf = \"nd\";\n        } else if (ld === \"3\") {\n          suf = \"rd\";\n        }\n      }\n\n      str_arr[x] += suf;\n    }\n  }\n\n  str = str_arr.join(' ');\n  return str;\n};","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/node_modules/persist/lib/inflection.js"],"names":["uncountableWords","pluralRules","RegExp","singularRules","nonTitlecasedWords","idSuffix","underbar","spaceOrUnderbar","uppercase","underbarPrefix","applyRules","str","rules","skip","override","ignore","indexOf","toLowerCase","x","length","match","replace","exports","array","item","fromIndex","compareFunc","index","i","pluralize","plural","singularize","singular","camelize","lowFirstLetter","str_path","split","str_arr","initX","charAt","toUpperCase","substring","join","underscore","humanize","capitalize","dasherize","titleize","d","demodulize","tableize","classify","foreignKey","dropIdUbar","ordinalize","parseInt","NaN","ltd","ld","suf"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2010 Ryan Schuft (ryan.schuft@gmail.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n/*\n  This code is based in part on the work done in Ruby to support\n  infection as part of Ruby on Rails in the ActiveSupport's Inflector\n  and Inflections classes.  It was initally ported to Javascript by\n  Ryan Schuft (ryan.schuft@gmail.com) in 2007. It has since been modified\n  to not alter the String prototype.\n\n  Currently implemented functions:\n\n    pluralize(str, plural) == String\n      renders a singular English language noun into its plural form\n      normal results can be overridden by passing in an alternative\n\n    singularize(str, singular) == String\n      renders a plural English language noun into its singular form\n      normal results can be overridden by passing in an alterative\n\n    camelize(str, lowFirstLetter) == String\n      renders a lower case underscored word into camel case\n      the first letter of the result will be upper case unless you pass true\n      also translates \"/\" into \"::\" (underscore does the opposite)\n\n    underscore(str) == String\n      renders a camel cased word into words seperated by underscores\n      also translates \"::\" back into \"/\" (camelize does the opposite)\n\n    humanize(str, lowFirstLetter) == String\n      renders a lower case and underscored word into human readable form\n      defaults to making the first letter capitalized unless you pass true\n\n    capitalize(str) == String\n      renders all characters to lower case and then makes the first upper\n\n    dasherize(str) == String\n      renders all underbars and spaces as dashes\n\n    titleize(str) == String\n      renders words into title casing (as for book titles)\n\n    demodulize(str) == String\n      renders class names that are prepended by modules into just the class\n\n    tableize(str) == String\n      renders camel cased singular words into their underscored plural form\n\n    classify(str) == String\n      renders an underscored plural word into its camel cased singular form\n\n    foreignKey(str, dropIdUbar) == String\n      renders a class name (camel cased singular noun) into a foreign key\n      defaults to seperating the class from the id with an underbar unless\n      you pass true\n\n    ordinalize(str) == String\n      renders all numbers found in the string into their sequence like \"22nd\"\n*/\n\n/*\n  This is a list of nouns that use the same form for both singular and plural.\n  This list should remain entirely in lower case to correctly match Strings.\n*/\nvar uncountableWords = [\n  'equipment', 'information', 'rice', 'money', 'species', 'series',\n  'fish', 'sheep', 'moose', 'deer', 'news'\n];\n\n/*\n  These rules translate from the singular form of a noun to its plural form.\n*/\nvar pluralRules = [\n  [new RegExp('(m)an$', 'gi'),                 '$1en'],\n  [new RegExp('(pe)rson$', 'gi'),              '$1ople'],\n  [new RegExp('(child)$', 'gi'),               '$1ren'],\n  [new RegExp('^(ox)$', 'gi'),                 '$1en'],\n  [new RegExp('(ax|test)is$', 'gi'),           '$1es'],\n  [new RegExp('(octop|vir)us$', 'gi'),         '$1i'],\n  [new RegExp('(alias|status)$', 'gi'),        '$1es'],\n  [new RegExp('(bu)s$', 'gi'),                 '$1ses'],\n  [new RegExp('(buffal|tomat|potat)o$', 'gi'), '$1oes'],\n  [new RegExp('([ti])um$', 'gi'),              '$1a'],\n  [new RegExp('sis$', 'gi'),                   'ses'],\n  [new RegExp('(?:([^f])fe|([lr])f)$', 'gi'),  '$1$2ves'],\n  [new RegExp('(hive)$', 'gi'),                '$1s'],\n  [new RegExp('([^aeiouy]|qu)y$', 'gi'),       '$1ies'],\n  [new RegExp('(x|ch|ss|sh)$', 'gi'),          '$1es'],\n  [new RegExp('(matr|vert|ind)ix|ex$', 'gi'),  '$1ices'],\n  [new RegExp('([m|l])ouse$', 'gi'),           '$1ice'],\n  [new RegExp('(quiz)$', 'gi'),                '$1zes'],\n  [new RegExp('s$', 'gi'),                     's'],\n  [new RegExp('$', 'gi'),                      's']\n];\n\n/*\n  These rules translate from the plural form of a noun to its singular form.\n*/\nvar singularRules = [\n  [new RegExp('(m)en$', 'gi'),                                                       '$1an'],\n  [new RegExp('(pe)ople$', 'gi'),                                                    '$1rson'],\n  [new RegExp('(child)ren$', 'gi'),                                                  '$1'],\n  [new RegExp('([ti])a$', 'gi'),                                                     '$1um'],\n  [new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi'), '$1$2sis'],\n  [new RegExp('(hive)s$', 'gi'),                                                     '$1'],\n  [new RegExp('(tive)s$', 'gi'),                                                     '$1'],\n  [new RegExp('(curve)s$', 'gi'),                                                    '$1'],\n  [new RegExp('([lr])ves$', 'gi'),                                                   '$1f'],\n  [new RegExp('([^fo])ves$', 'gi'),                                                  '$1fe'],\n  [new RegExp('([^aeiouy]|qu)ies$', 'gi'),                                           '$1y'],\n  [new RegExp('(s)eries$', 'gi'),                                                    '$1eries'],\n  [new RegExp('(m)ovies$', 'gi'),                                                    '$1ovie'],\n  [new RegExp('(x|ch|ss|sh)es$', 'gi'),                                              '$1'],\n  [new RegExp('([m|l])ice$', 'gi'),                                                  '$1ouse'],\n  [new RegExp('(bus)es$', 'gi'),                                                     '$1'],\n  [new RegExp('(o)es$', 'gi'),                                                       '$1'],\n  [new RegExp('(shoe)s$', 'gi'),                                                     '$1'],\n  [new RegExp('(cris|ax|test)es$', 'gi'),                                            '$1is'],\n  [new RegExp('(octop|vir)i$', 'gi'),                                                '$1us'],\n  [new RegExp('(alias|status)es$', 'gi'),                                            '$1'],\n  [new RegExp('^(ox)en', 'gi'),                                                      '$1'],\n  [new RegExp('(vert|ind)ices$', 'gi'),                                              '$1ex'],\n  [new RegExp('(matr)ices$', 'gi'),                                                  '$1ix'],\n  [new RegExp('(quiz)zes$', 'gi'),                                                   '$1'],\n  [new RegExp('s$', 'gi'),                                                           '']\n];\n\n/*\n  This is a list of words that should not be capitalized for title case\n*/\nvar nonTitlecasedWords = [\n  'and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at',\n  'by', 'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over',\n  'with', 'for'\n];\n\n/*\n  These are regular expressions used for converting between String formats\n*/\nvar idSuffix = new RegExp('(_ids|_id)$', 'g');\nvar underbar = new RegExp('_', 'g');\nvar spaceOrUnderbar = new RegExp('[\\ _]', 'g');\nvar uppercase = new RegExp('([A-Z])', 'g');\nvar underbarPrefix = new RegExp('^_');\n\n/*\n  This is a helper method that applies rules based replacement to a String\n  Signature:\n    applyRules(str, rules, skip, override) == String\n  Arguments:\n    str - String - String to modify and return based on the passed rules\n    rules - Array: [RegExp, String] - Regexp to match paired with String to use for replacement\n    skip - Array: [String] - Strings to skip if they match\n    override - String (optional) - String to return as though this method succeeded (used to conform to APIs)\n  Returns:\n    String - passed String modified by passed rules\n  Examples:\n    applyRules(\"cows\", InflectionJs.singularRules) === 'cow'\n*/\nvar applyRules = function(str, rules, skip, override) {\n  if (override) {\n    str = override;\n  } else {\n    var ignore = (skip.indexOf(str.toLowerCase()) > -1);\n    if (!ignore) {\n      for (var x = 0; x < rules.length; x++) {\n        if (str.match(rules[x][0])) {\n          str = str.replace(rules[x][0], rules[x][1]);\n          break;\n        }\n      }\n    }\n  }\n  return str;\n}\n\n/*\n  This lets us detect if an Array contains a given element\n  Signature:\n    indexOf(array, item, fromIndex, compareFunc) == Integer\n  Arguments:\n    array - Array - array to find object in\n    item - Object - object to locate in the Array\n    fromIndex - Integer (optional) - starts checking from this position in the Array\n    compareFunc - Function (optional) - function used to compare Array item vs passed item\n  Returns:\n    Integer - index position in the Array of the passed item\n  Examples:\n    ['hi','there'].indexOf(\"guys\") === -1\n    ['hi','there'].indexOf(\"hi\") === 0\n*/\nexports.indexOf = function(array, item, fromIndex, compareFunc) {\n  if (!fromIndex) {\n    fromIndex = -1;\n  }\n  var index = -1;\n  for (var i = fromIndex; i < array.length; i++) {\n    if (array[i] === item || compareFunc && compareFunc(array[i], item)) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*\n  This function adds plurilization support to every String object\n    Signature:\n      pluralize(str, plural) == String\n    Arguments:\n      str - String - string to apply inflection on\n      plural - String (optional) - overrides normal output with said String\n    Returns:\n      String - singular English language nouns are returned in plural form\n    Examples:\n      \"person\".pluralize() == \"people\"\n      \"octopus\".pluralize() == \"octopi\"\n      \"Hat\".pluralize() == \"Hats\"\n      \"person\".pluralize(\"guys\") == \"guys\"\n*/\nexports.pluralize = function(str, plural) {\n  return applyRules(str, pluralRules, uncountableWords, plural);\n};\n\n/*\n  This function adds singularization support to every String object\n    Signature:\n      singularize(str, singular) == String\n    Arguments:\n      str - String - string to apply inflection on\n      singular - String (optional) - overrides normal output with said String\n    Returns:\n      String - plural English language nouns are returned in singular form\n    Examples:\n      \"people\".singularize() == \"person\"\n      \"octopi\".singularize() == \"octopus\"\n      \"Hats\".singularize() == \"Hat\"\n      \"guys\".singularize(\"person\") == \"person\"\n*/\nexports.singularize = function(str, singular) {\n  return applyRules(str, singularRules, uncountableWords, singular);\n};\n\n/*\n  This function adds camelization support to every String object\n    Signature:\n      camelize(str, lowFirstLetter) == String\n    Arguments:\n      str - String - string to apply inflection on\n      lowFirstLetter - boolean (optional) - default is to capitalize the first\n        letter of the results... passing true will lowercase it\n    Returns:\n      String - lower case underscored words will be returned in camel case\n        additionally '/' is translated to '::'\n    Examples:\n      \"message_properties\".camelize() == \"MessageProperties\"\n      \"message_properties\".camelize(true) == \"messageProperties\"\n*/\nexports.camelize = function(str, lowFirstLetter) {\n  var str = str.toLowerCase();\n  var str_path = str.split('/');\n  for (var i = 0; i < str_path.length; i++) {\n    var str_arr = str_path[i].split('_');\n    var initX = ((lowFirstLetter && i + 1 === str_path.length) ? (1) : (0));\n    for (var x = initX; x < str_arr.length; x++) {\n      str_arr[x] = str_arr[x].charAt(0).toUpperCase() + str_arr[x].substring(1);\n    }\n    str_path[i] = str_arr.join('');\n  }\n  str = str_path.join('::');\n  return str;\n};\n\n/*\n  This function adds underscore support to every String object\n    Signature:\n      underscore(str) == String\n    Arguments:\n      str - String - string to apply inflection on\n    Returns:\n      String - camel cased words are returned as lower cased and underscored\n        additionally '::' is translated to '/'\n    Examples:\n      \"MessageProperties\".camelize() == \"message_properties\"\n      \"messageProperties\".underscore() == \"message_properties\"\n*/\nexports.underscore = function(str) {\n  var str_path = str.split('::');\n  for (var i = 0; i < str_path.length; i++) {\n    str_path[i] = str_path[i].replace(uppercase, '_$1');\n    str_path[i] = str_path[i].replace(underbarPrefix, '');\n  }\n  str = str_path.join('/').toLowerCase();\n  return str;\n};\n\n/*\n  This function adds humanize support to every String object\n    Signature:\n      humanize(str, lowFirstLetter) == String\n    Arguments:\n      str - String - string to apply inflection on\n      lowFirstLetter - boolean (optional) - default is to capitalize the first\n        letter of the results... passing true will lowercase it\n    Returns:\n      String - lower case underscored words will be returned in humanized form\n    Examples:\n      \"message_properties\".humanize() == \"Message properties\"\n      \"message_properties\".humanize(true) == \"message properties\"\n*/\nexports.humanize = function(str, lowFirstLetter) {\n  var str = str.toLowerCase();\n  str = str.replace(idSuffix, '');\n  str = str.replace(underbar, ' ');\n  if (!lowFirstLetter) {\n    str = exports.capitalize(str);\n  }\n  return str;\n};\n\n/*\n  This function adds capitalization support to every String object\n    Signature:\n      capitalize(str) == String\n    Arguments:\n      str - String - string to apply inflection on\n    Returns:\n      String - all characters will be lower case and the first will be upper\n    Examples:\n      \"message_properties\".capitalize() == \"Message_properties\"\n      \"message properties\".capitalize() == \"Message properties\"\n*/\nexports.capitalize = function(str) {\n  var str = str.toLowerCase();\n  str = str.substring(0, 1).toUpperCase() + str.substring(1);\n  return str;\n};\n\n/*\n  This function adds dasherization support to every String object\n    Signature:\n      dasherize(str) == String\n    Arguments:\n      str - String - string to apply inflection on\n    Returns:\n      String - replaces all spaces or underbars with dashes\n    Examples:\n      \"message_properties\".capitalize() == \"message-properties\"\n      \"Message Properties\".capitalize() == \"Message-Properties\"\n*/\nexports.dasherize = function(str) {\n  str = str.replace(spaceOrUnderbar, '-');\n  return str;\n};\n\n/*\n  This function adds titleize support to every String object\n    Signature:\n      titleize(str) == String\n    Arguments:\n      str - String - string to apply inflection on\n    Returns:\n      String - capitalizes words as you would for a book title\n    Examples:\n      \"message_properties\".titleize() == \"Message Properties\"\n      \"message properties to keep\".titleize() == \"Message Properties to Keep\"\n*/\nexports.titleize = function(str) {\n  var str = str.toLowerCase();\n  str = str.replace(underbar, ' ');\n  var str_arr = str.split(' ');\n  for (var x = 0; x < str_arr.length; x++) {\n    var d = str_arr[x].split('-');\n    for (var i = 0; i < d.length; i++) {\n      if (nonTitlecasedWords.indexOf(d[i].toLowerCase()) < 0) {\n        d[i] = exports.capitalize(d[i]);\n      }\n    }\n    str_arr[x] = d.join('-');\n  }\n  str = str_arr.join(' ');\n  str = str.substring(0, 1).toUpperCase() + str.substring(1);\n  return str;\n};\n\n/*\n  This function adds demodulize support to every String object\n    Signature:\n      demodulize(str) == String\n    Arguments:\n      str - String - string to apply inflection on\n    Returns:\n      String - removes module names leaving only class names (Ruby style)\n    Examples:\n      \"Message::Bus::Properties\".demodulize() == \"Properties\"\n*/\nexports.demodulize = function(str) {\n  var str_arr = str.split('::');\n  str = str_arr[str_arr.length - 1];\n  return str;\n};\n\n/*\n  This function adds tableize support to every String object\n    Signature:\n      tableize(str) == String\n    Arguments:\n      str - String - string to apply inflection on\n    Returns:\n      String - renders camel cased words into their underscored plural form\n    Examples:\n      \"MessageBusProperty\".tableize() == \"message_bus_properties\"\n*/\nexports.tableize = function(str) {\n  str = exports.underscore(str);\n  str = exports.pluralize(str);\n  return str;\n};\n\n/*\n  This function adds classification support to every String object\n    Signature:\n      classify(str) == String\n    Arguments:\n      str - String - string to apply inflection on\n    Returns:\n      String - underscored plural nouns become the camel cased singular form\n    Examples:\n      \"message_bus_properties\".classify() == \"MessageBusProperty\"\n*/\nexports.classify = function(str) {\n  str = exports.camelize(str);\n  str = exports.singularize(str);\n  return str;\n};\n\n/*\n  This function adds foreign key support to every String object\n    Signature:\n      foreignKey(str, dropIdUbar) == String\n    Arguments:\n      str - String - string to apply inflection on\n      dropIdUbar - boolean (optional) - default is to seperate id with an\n        underbar at the end of the class name, you can pass true to skip it\n    Returns:\n      String - camel cased singular class names become underscored with id\n    Examples:\n      \"MessageBusProperty\".foreign_key() == \"message_bus_property_id\"\n      \"MessageBusProperty\".foreign_key(true) == \"message_bus_propertyid\"\n*/\nexports.foreignKey = function(str, dropIdUbar) {\n  str = exports.demodulize(str);\n  str = exports.underscore(str);\n  str = str + ((dropIdUbar) ? ('') : ('_')) + 'id';\n  return str;\n};\n\n/*\n  This function adds ordinalize support to every String object\n    Signature:\n      ordinalize(str) == String\n    Arguments:\n      str - String - string to apply inflection on\n    Returns:\n      String - renders all found numbers their sequence like \"22nd\"\n    Examples:\n      \"the 1 pitch\".ordinalize() == \"the 1st pitch\"\n*/\nexports.ordinalize = function(str) {\n  var str_arr = str.split(' ');\n  for (var x = 0; x < str_arr.length; x++) {\n    var i = parseInt(str_arr[x]);\n    if (i === NaN) {\n      var ltd = str_arr[x].substring(str_arr[x].length - 2);\n      var ld = str_arr[x].substring(str_arr[x].length - 1);\n      var suf = \"th\";\n      if (ltd != \"11\" && ltd != \"12\" && ltd != \"13\") {\n        if (ld === \"1\") {\n          suf = \"st\";\n        } else if (ld === \"2\") {\n          suf = \"nd\";\n        } else if (ld === \"3\") {\n          suf = \"rd\";\n        }\n      }\n      str_arr[x] += suf;\n    }\n  }\n  str = str_arr.join(' ');\n  return str;\n};\n\n"]},"metadata":{},"sourceType":"script"}