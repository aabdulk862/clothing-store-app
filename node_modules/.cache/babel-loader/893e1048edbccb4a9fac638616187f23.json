{"ast":null,"code":"'use strict';\n\nexports.bind = function (name, func, scope) {\n  var _function = func;\n\n  var results = function () {\n    return _function.apply(scope, arguments);\n  };\n\n  results._name = name;\n  return results;\n};\n\nexports.shallowCopy = function (obj) {\n  var result = {};\n  var i;\n\n  for (i in obj) {\n    result[i] = obj[i];\n  }\n\n  return result;\n};\n\nexports.toArray = function (hash) {\n  var results = [];\n  var key;\n\n  for (key in hash) {\n    results.push(hash[key]);\n  }\n\n  return results;\n}; // this group by preserves the order in which the items are found.\n// it will return an array of arrays containing the items\n\n\nexports.groupBy = function (items, key) {\n  var results = [];\n  var hash = {};\n  var i;\n\n  for (i = 0; i < items.length; i++) {\n    var item = items[i];\n    var val = item[key];\n\n    if (hash[val]) {\n      hash[val].push(item);\n    } else {\n      results.push(hash[val] = [item]);\n    }\n  }\n\n  return results;\n};\n\nexports.alterHashKeys = function (hash, transformFn) {\n  var key;\n\n  for (key in hash) {\n    var newKey = transformFn(key, hash[key]);\n\n    if (newKey !== key) {\n      if (newKey) {\n        hash[newKey] = hash[key];\n      }\n\n      delete hash[key];\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/node_modules/persist/lib/persist_utils.js"],"names":["exports","bind","name","func","scope","_function","results","apply","arguments","_name","shallowCopy","obj","result","i","toArray","hash","key","push","groupBy","items","length","item","val","alterHashKeys","transformFn","newKey"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,IAAR,GAAe,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,KAAtB,EAA6B;AAC1C,MAAIC,SAAS,GAAGF,IAAhB;;AAEA,MAAIG,OAAO,GAAG,YAAY;AACxB,WAAOD,SAAS,CAACE,KAAV,CAAgBH,KAAhB,EAAuBI,SAAvB,CAAP;AACD,GAFD;;AAGAF,EAAAA,OAAO,CAACG,KAAR,GAAgBP,IAAhB;AACA,SAAOI,OAAP;AACD,CARD;;AAUAN,OAAO,CAACU,WAAR,GAAsB,UAAUC,GAAV,EAAe;AACnC,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,CAAJ;;AACA,OAAKA,CAAL,IAAUF,GAAV,EAAe;AACbC,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,GAAG,CAACE,CAAD,CAAf;AACD;;AACD,SAAOD,MAAP;AACD,CAPD;;AASAZ,OAAO,CAACc,OAAR,GAAkB,UAAUC,IAAV,EAAgB;AAChC,MAAIT,OAAO,GAAG,EAAd;AACA,MAAIU,GAAJ;;AACA,OAAKA,GAAL,IAAYD,IAAZ,EAAkB;AAChBT,IAAAA,OAAO,CAACW,IAAR,CAAaF,IAAI,CAACC,GAAD,CAAjB;AACD;;AACD,SAAOV,OAAP;AACD,CAPD,C,CASA;AACA;;;AACAN,OAAO,CAACkB,OAAR,GAAkB,UAAUC,KAAV,EAAiBH,GAAjB,EAAsB;AACtC,MAAIV,OAAO,GAAG,EAAd;AACA,MAAIS,IAAI,GAAG,EAAX;AACA,MAAIF,CAAJ;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGM,KAAK,CAACC,MAAtB,EAA8BP,CAAC,EAA/B,EAAmC;AACjC,QAAIQ,IAAI,GAAGF,KAAK,CAACN,CAAD,CAAhB;AACA,QAAIS,GAAG,GAAGD,IAAI,CAACL,GAAD,CAAd;;AACA,QAAID,IAAI,CAACO,GAAD,CAAR,EAAe;AACbP,MAAAA,IAAI,CAACO,GAAD,CAAJ,CAAUL,IAAV,CAAeI,IAAf;AACD,KAFD,MAEO;AACLf,MAAAA,OAAO,CAACW,IAAR,CAAaF,IAAI,CAACO,GAAD,CAAJ,GAAY,CAAED,IAAF,CAAzB;AACD;AACF;;AACD,SAAOf,OAAP;AACD,CAdD;;AAgBAN,OAAO,CAACuB,aAAR,GAAwB,UAAUR,IAAV,EAAgBS,WAAhB,EAA6B;AACnD,MAAIR,GAAJ;;AACA,OAAKA,GAAL,IAAYD,IAAZ,EAAkB;AAChB,QAAIU,MAAM,GAAGD,WAAW,CAACR,GAAD,EAAMD,IAAI,CAACC,GAAD,CAAV,CAAxB;;AACA,QAAIS,MAAM,KAAKT,GAAf,EAAoB;AAClB,UAAIS,MAAJ,EAAY;AACVV,QAAAA,IAAI,CAACU,MAAD,CAAJ,GAAeV,IAAI,CAACC,GAAD,CAAnB;AACD;;AACD,aAAOD,IAAI,CAACC,GAAD,CAAX;AACD;AACF;AACF,CAXD","sourcesContent":["'use strict';\n\nexports.bind = function (name, func, scope) {\n  var _function = func;\n\n  var results = function () {\n    return _function.apply(scope, arguments);\n  };\n  results._name = name;\n  return results;\n};\n\nexports.shallowCopy = function (obj) {\n  var result = {};\n  var i;\n  for (i in obj) {\n    result[i] = obj[i];\n  }\n  return result;\n};\n\nexports.toArray = function (hash) {\n  var results = [];\n  var key;\n  for (key in hash) {\n    results.push(hash[key]);\n  }\n  return results;\n};\n\n// this group by preserves the order in which the items are found.\n// it will return an array of arrays containing the items\nexports.groupBy = function (items, key) {\n  var results = [];\n  var hash = {};\n  var i;\n  for (i = 0; i < items.length; i++) {\n    var item = items[i];\n    var val = item[key];\n    if (hash[val]) {\n      hash[val].push(item);\n    } else {\n      results.push(hash[val] = [ item ]);\n    }\n  }\n  return results;\n};\n\nexports.alterHashKeys = function (hash, transformFn) {\n  var key;\n  for (key in hash) {\n    var newKey = transformFn(key, hash[key]);\n    if (newKey !== key) {\n      if (newKey) {\n        hash[newKey] = hash[key];\n      }\n      delete hash[key];\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}