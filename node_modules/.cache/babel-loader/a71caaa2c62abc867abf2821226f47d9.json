{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar Model = require('./model');\n\nvar dbInfo = require('db-info');\n\nvar async = require('async');\n\nvar genericPool = require('generic-pool');\n\nvar inflection = require('./inflection');\n\nexports.type = require('./type');\nexports.Query = require('./query');\nexports.Ascending = \"asc\";\nexports.Descending = \"desc\";\nexports.env = null;\nvar databaseJsonLoaded = false;\nvar defaultConnectOptions = null;\n\nexports.define = function (name, columnDefs, opts) {\n  return Model.define(name, columnDefs, opts);\n};\n\nexports.asyncQueue = function () {\n  return q;\n};\n\nexports.defineAuto = function (name, options, callback) {\n  var pluralName = inflection.pluralize(name);\n  this.asyncQueue().push(options, function (err, result) {\n    if (result.tables.hasOwnProperty(pluralName)) {\n      var columnDefs = result.tables[pluralName].columns;\n      var model = Model.define(name, columnDefs);\n      callback(null, model);\n    }\n  });\n};\n\nexports.waitForDefinitionsToFinish = function (callback) {\n  if (this.asyncQueue().length() > 0) {\n    this.asyncQueue().drain = callback;\n  } else {\n    callback();\n  }\n};\n\nvar q = async.queue(function (task, callback) {\n  dbInfo.getInfo(task, function (err, result) {\n    if (err) {\n      console.log(err);\n    }\n\n    callback(err, result);\n  });\n}, 2);\n\nvar setDefaultConnectOptions = exports.setDefaultConnectOptions = function (options) {\n  defaultConnectOptions = options;\n};\n\nvar getDefaultConnectOptions = exports.getDefaultConnectOptions = function () {\n  return defaultConnectOptions;\n};\n\nvar pools = {}; // opts, callback\n// callback        - use database.json for connection information\n\nexports.connect = function () {\n  if (!databaseJsonLoaded) {\n    tryLoadDatabaseJson(path.join(process.cwd(), \"database.json\"));\n  }\n\n  var callback = arguments[arguments.length - 1];\n  var opts;\n\n  if (arguments.length === 1) {\n    opts = getDefaultConnectOptions();\n  } else {\n    opts = arguments[0];\n  }\n\n  if (!opts || !opts.driver) {\n    throw new Error(\"Invalid options. Have you configured your database.json file?\");\n  }\n\n  var driverName = opts.driver;\n\n  var Driver = require('./drivers/' + driverName + '.js');\n\n  var driver = new Driver();\n\n  if (opts.pooling && opts.pooling.name) {\n    var pool;\n\n    opts.pooling.create = function (callback) {\n      if (opts.trace) {\n        console.log('pooling create');\n      }\n\n      return driver.connect(opts, function (err, conn) {\n        if (err) {\n          return callback(err);\n        }\n\n        conn.getPool = function () {\n          return pools[opts.pooling.name];\n        };\n\n        conn.oldClose = conn.close;\n\n        conn.close = function () {\n          if (opts.trace) {\n            console.log('pooling release');\n          }\n\n          return pool.release(conn);\n        };\n\n        return callback(null, conn);\n      });\n    };\n\n    opts.pooling.destroy = function (conn) {\n      if (opts.trace) {\n        console.log('pooling destroy');\n      }\n\n      conn.oldClose();\n    };\n\n    if (pools[opts.pooling.name]) {\n      pool = pools[opts.pooling.name];\n    } else {\n      pool = pools[opts.pooling.name] = genericPool.Pool(opts.pooling);\n    }\n\n    return pool.acquire(connectAfterAutoDefinesComplete.bind(this, callback));\n  } else {\n    return driver.connect(opts, connectAfterAutoDefinesComplete.bind(this, callback));\n  }\n};\n\nexports.shutdown = function (callback) {\n  callback = callback || function () {};\n\n  async.forEach(Object.keys(pools), function (poolName, callback) {\n    var pool = pools[poolName];\n    pool.drain(function () {\n      pool.destroyAllNow(callback);\n    });\n  }, callback);\n};\n\nfunction connectAfterAutoDefinesComplete(callback, err, connection) {\n  this.waitForDefinitionsToFinish(callback.bind(this, err, connection));\n}\n\nfunction createConnectionDelegate(fnName) {\n  return function () {\n    var conn = arguments[0];\n\n    if (conn && conn.driver && conn.db) {\n      return conn[fnName].apply(conn, Array.prototype.slice.call(arguments, 1));\n    } else {\n      var args = Array.prototype.slice.call(arguments);\n\n      var fn = function (connection, callback) {\n        var newArgs = args.concat(callback);\n        return connection[fnName].apply(connection, newArgs);\n      };\n\n      fn._name = fnName;\n      return fn;\n    }\n  };\n}\n\nexports.runSql = createConnectionDelegate('runSql');\nexports.runSqlAll = createConnectionDelegate('runSqlAll');\nexports.runSqlEach = createConnectionDelegate('runSqlEach');\nexports.runSqlFromFile = createConnectionDelegate('runSqlFromFile');\nexports.runSqlAllFromFile = createConnectionDelegate('runSqlAllFromFile');\nexports.runSqlEachFromFile = createConnectionDelegate('runSqlEachFromFile');\n\nvar loadDatabaseJson = exports.loadDatabaseJson = function (pathStr) {\n  var databaseJson = JSON.parse(fs.readFileSync(pathStr).toString());\n  var env = exports.env || databaseJson['default'];\n  var opts = databaseJson[env];\n  opts.sqlDir = path.join(path.dirname(pathStr), opts.sqlDir || 'sql');\n  setDefaultConnectOptions(opts);\n  databaseJsonLoaded = true;\n};\n\nvar tryLoadDatabaseJson = exports.tryLoadDatabaseJson = function (path) {\n  try {\n    var stats = fs.statSync(path);\n\n    if (stats) {\n      loadDatabaseJson(path);\n    }\n  } catch (e) {// fail silently this is only a tryLoad.\n  }\n};","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/node_modules/persist/lib/persist.js"],"names":["util","require","fs","path","Model","dbInfo","async","genericPool","inflection","exports","type","Query","Ascending","Descending","env","databaseJsonLoaded","defaultConnectOptions","define","name","columnDefs","opts","asyncQueue","q","defineAuto","options","callback","pluralName","pluralize","push","err","result","tables","hasOwnProperty","columns","model","waitForDefinitionsToFinish","length","drain","queue","task","getInfo","console","log","setDefaultConnectOptions","getDefaultConnectOptions","pools","connect","tryLoadDatabaseJson","join","process","cwd","arguments","driver","Error","driverName","Driver","pooling","pool","create","trace","conn","getPool","oldClose","close","release","destroy","Pool","acquire","connectAfterAutoDefinesComplete","bind","shutdown","forEach","Object","keys","poolName","destroyAllNow","connection","createConnectionDelegate","fnName","db","apply","Array","prototype","slice","call","args","fn","newArgs","concat","_name","runSql","runSqlAll","runSqlEach","runSqlFromFile","runSqlAllFromFile","runSqlEachFromFile","loadDatabaseJson","pathStr","databaseJson","JSON","parse","readFileSync","toString","sqlDir","dirname","stats","statSync","e"],"mappings":"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","sourcesContent":["'use strict';\n\nvar util = require('util');\nvar fs = require('fs');\nvar path = require('path');\nvar Model = require('./model');\nvar dbInfo = require('db-info');\nvar async = require('async');\nvar genericPool = require('generic-pool');\nvar inflection = require('./inflection');\n\nexports.type = require('./type');\nexports.Query = require('./query');\n\nexports.Ascending = \"asc\";\nexports.Descending = \"desc\";\nexports.env = null;\n\nvar databaseJsonLoaded = false;\nvar defaultConnectOptions = null;\n\nexports.define = function(name, columnDefs, opts) {\n  return Model.define(name, columnDefs, opts);\n};\n\nexports.asyncQueue = function() {\n  return q;\n};\n\nexports.defineAuto = function(name, options, callback) {\n  var pluralName = inflection.pluralize(name);\n  this.asyncQueue().push(options, function(err, result) {\n    if (result.tables.hasOwnProperty(pluralName)) {\n      var columnDefs = result.tables[pluralName].columns;\n      var model = Model.define(name, columnDefs);\n      callback(null, model);\n    }\n  });\n};\n\nexports.waitForDefinitionsToFinish = function(callback) {\n  if (this.asyncQueue().length() > 0) {\n    this.asyncQueue().drain = callback;\n  } else {\n    callback();\n  }\n};\n\nvar q = async.queue(function(task, callback) {\n  dbInfo.getInfo(task, function(err, result) {\n    if (err) {\n      console.log(err);\n    }\n    callback(err, result);\n  });\n}, 2);\n\nvar setDefaultConnectOptions = exports.setDefaultConnectOptions = function(options) {\n  defaultConnectOptions = options;\n};\n\nvar getDefaultConnectOptions = exports.getDefaultConnectOptions = function() {\n  return defaultConnectOptions;\n};\n\nvar pools = {};\n\n// opts, callback\n// callback        - use database.json for connection information\nexports.connect = function() {\n  if (!databaseJsonLoaded) {\n    tryLoadDatabaseJson(path.join(process.cwd(), \"database.json\"));\n  }\n\n  var callback = arguments[arguments.length - 1];\n  var opts;\n  if (arguments.length === 1) {\n    opts = getDefaultConnectOptions();\n  } else {\n    opts = arguments[0];\n  }\n\n  if (!opts || !opts.driver) {\n    throw new Error(\"Invalid options. Have you configured your database.json file?\");\n  }\n  var driverName = opts.driver;\n  var Driver = require('./drivers/' + driverName + '.js');\n  var driver = new Driver();\n\n  if (opts.pooling && opts.pooling.name) {\n    var pool;\n    opts.pooling.create = function(callback) {\n      if (opts.trace) {\n        console.log('pooling create');\n      }\n      return driver.connect(opts, function(err, conn) {\n        if (err) {\n          return callback(err);\n        }\n        conn.getPool = function() {\n          return pools[opts.pooling.name];\n        };\n        conn.oldClose = conn.close;\n        conn.close = function() {\n          if (opts.trace) {\n            console.log('pooling release');\n          }\n          return pool.release(conn);\n        };\n        return callback(null, conn);\n      });\n    };\n    opts.pooling.destroy = function(conn) {\n      if (opts.trace) {\n        console.log('pooling destroy');\n      }\n      conn.oldClose();\n    };\n    if (pools[opts.pooling.name]) {\n      pool = pools[opts.pooling.name];\n    } else {\n      pool = pools[opts.pooling.name] = genericPool.Pool(opts.pooling);\n    }\n    return pool.acquire(connectAfterAutoDefinesComplete.bind(this, callback));\n  } else {\n    return driver.connect(opts, connectAfterAutoDefinesComplete.bind(this, callback));\n  }\n};\n\nexports.shutdown = function(callback) {\n  callback = callback || function() {};\n  async.forEach(Object.keys(pools), function(poolName, callback) {\n    var pool = pools[poolName];\n    pool.drain(function() {\n      pool.destroyAllNow(callback);\n    });\n  }, callback);\n};\n\nfunction connectAfterAutoDefinesComplete(callback, err, connection) {\n  this.waitForDefinitionsToFinish(callback.bind(this, err, connection));\n}\n\nfunction createConnectionDelegate(fnName) {\n  return function() {\n    var conn = arguments[0];\n    if (conn && conn.driver && conn.db) {\n      return conn[fnName].apply(conn, Array.prototype.slice.call(arguments, 1));\n    } else {\n      var args = Array.prototype.slice.call(arguments);\n      var fn = function(connection, callback) {\n        var newArgs = args.concat(callback);\n        return connection[fnName].apply(connection, newArgs);\n      };\n      fn._name = fnName;\n      return fn;\n    }\n  }\n}\n\nexports.runSql = createConnectionDelegate('runSql');\nexports.runSqlAll = createConnectionDelegate('runSqlAll');\nexports.runSqlEach = createConnectionDelegate('runSqlEach');\nexports.runSqlFromFile = createConnectionDelegate('runSqlFromFile');\nexports.runSqlAllFromFile = createConnectionDelegate('runSqlAllFromFile');\nexports.runSqlEachFromFile = createConnectionDelegate('runSqlEachFromFile');\n\nvar loadDatabaseJson = exports.loadDatabaseJson = function(pathStr) {\n  var databaseJson = JSON.parse(fs.readFileSync(pathStr).toString());\n  var env = exports.env || databaseJson['default'];\n  var opts = databaseJson[env];\n  opts.sqlDir = path.join(path.dirname(pathStr), opts.sqlDir || 'sql');\n  setDefaultConnectOptions(opts);\n  databaseJsonLoaded = true;\n};\n\nvar tryLoadDatabaseJson = exports.tryLoadDatabaseJson = function(path) {\n  try {\n    var stats = fs.statSync(path);\n    if (stats) {\n      loadDatabaseJson(path);\n    }\n  } catch (e) {\n    // fail silently this is only a tryLoad.\n  }\n};\n"]},"metadata":{},"sourceType":"script"}