{"ast":null,"code":"'use strict';\n\nvar Driver = require('../driver');\n\nvar Connection = require('../connection');\n\nvar oracle = require('oracle');\n\nvar util = require('util');\n\nvar persistUtil = require('../persist_utils');\n\nvar OracleConnection = Connection.extend({\n  init: function (driver, client, opts) {\n    this._super(driver, opts);\n\n    this.client = client;\n    this.client.setAutoCommit(true);\n  },\n  close: function () {\n    this.client.close();\n  },\n  beginTransaction: function (callback) {\n    this.client.setAutoCommit(false);\n    callback();\n  },\n  commitTransaction: function (callback) {\n    var self = this;\n    this.client.commit(function (err) {\n      self.client.setAutoCommit(true);\n      callback(err);\n    });\n  },\n  rollbackTransaction: function (callback) {\n    var self = this;\n    this.client.rollback(function (err) {\n      self.client.setAutoCommit(true);\n      callback(err);\n    });\n  },\n  updateLastId: function (results) {\n    //console.log(results);\n    if (results.returnParam) {\n      results.lastId = results.returnParam;\n    }\n  },\n  postProcessResults: function (results) {\n    if (results instanceof Array) {\n      var fixKeyFunc = function (key, val) {\n        if (key.toLowerCase() === 'persist_rnum') {\n          return null;\n        }\n\n        if (key && typeof key === \"string\") {\n          return key.toLowerCase();\n        }\n\n        return key;\n      };\n\n      var i;\n\n      for (i = 0; i < results.length; i++) {\n        var result = results[i];\n        persistUtil.alterHashKeys(result, fixKeyFunc);\n      }\n    }\n  },\n  _runSql2: function (sql, callback) {\n    var self = this;\n    this.client.execute(sql, [], function (err, results) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      self.updateLastId(results);\n\n      if (results.command === 'SELECT') {\n        results = results.rows;\n      }\n\n      self.postProcessResults(results);\n      callback(null, results);\n    });\n  },\n  _runSql3: function (sql, values, callback) {\n    var self = this;\n    this.client.execute(sql, values, function (err, results) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      self.updateLastId(results);\n      self.postProcessResults(results);\n      callback(null, results);\n    });\n  },\n  _runSqlAll: function (sql, params, callback) {\n    this._runSql(sql, params, callback);\n  },\n  _runSqlEach: function (sql, params, callback, doneCallback) {\n    // todo: check with the db-oracle project to see if there is a way to do \"each\" as opposed to getting all the results back\n    this._runSql(sql, params, function (err, rows) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      var i;\n\n      for (i = 0; i < rows.length; i++) {\n        callback(null, rows[i]);\n      }\n\n      doneCallback();\n    });\n  }\n});\nvar OracleDriver = Driver.extend({\n  init: function () {\n    this._super();\n  },\n  connect: function (opts, callback) {\n    var self = this;\n    oracle.connect(opts, function (err, conn) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      var connection = new OracleConnection(self, conn, opts);\n      callback(null, connection);\n    });\n  },\n  getValuesSubstitutionString: function (index) {\n    return ':' + index;\n  },\n  getTableAliasSql: function (tableName, alias) {\n    return tableName + \" \" + alias;\n  },\n  getInsertSql: function (obj) {\n    var columnNamesSql = [];\n    var valuesSql = [];\n    var values = [];\n    var valueSubstitutionIndex = 1;\n    var autoIncrementColumnName;\n    var columnKey;\n\n    for (columnKey in obj._getModel().columns) {\n      var column = obj._getModel().columns[columnKey];\n\n      if (column.primaryKey && column.autoIncrement) {\n        autoIncrementColumnName = column.dbColumnName;\n      } else {\n        columnNamesSql.push(column.dbColumnName);\n        valuesSql.push(this.getValuesSubstitutionString(valueSubstitutionIndex++));\n        values.push(obj[columnKey]);\n      }\n    }\n\n    var returningSql = '';\n\n    if (autoIncrementColumnName) {\n      returningSql = 'RETURNING ' + autoIncrementColumnName + ' INTO ' + this.getValuesSubstitutionString(valueSubstitutionIndex++);\n      values.push(new oracle.OutParam());\n    }\n\n    var sql = util.format('INSERT INTO %s (%s) VALUES (%s) %s', obj._getModel().tableName, columnNamesSql.join(','), valuesSql.join(','), returningSql);\n    var result = {\n      sql: sql,\n      values: values\n    }; //console.log(result);\n\n    return result;\n  },\n  addLimitClause: function (sql, sqlTree) {\n    if (sqlTree.limitCount || sqlTree.limitOffset) {\n      if (!sqlTree.limitCount) {\n        sqlTree.limitCount = 99999999;\n      }\n\n      if (!sqlTree.limitOffset) {\n        sqlTree.limitOffset = 0;\n      }\n\n      sql = util.format(\"SELECT * FROM (SELECT rnumalias.*, ROWNUM persist_rnum FROM (%s) rnumalias WHERE ROWNUM <= %s) WHERE persist_rnum > %s\", sql, sqlTree.limitOffset + sqlTree.limitCount, sqlTree.limitOffset);\n    }\n\n    return sql;\n  },\n  escapeColumnName: function (columnName) {\n    return '\"' + columnName + '\"';\n  }\n});\nmodule.exports = OracleDriver;","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/node_modules/persist/lib/drivers/oracle.js"],"names":["Driver","require","Connection","oracle","util","persistUtil","OracleConnection","extend","init","driver","client","opts","_super","setAutoCommit","close","beginTransaction","callback","commitTransaction","self","commit","err","rollbackTransaction","rollback","updateLastId","results","returnParam","lastId","postProcessResults","Array","fixKeyFunc","key","val","toLowerCase","i","length","result","alterHashKeys","_runSql2","sql","execute","command","rows","_runSql3","values","_runSqlAll","params","_runSql","_runSqlEach","doneCallback","OracleDriver","connect","conn","connection","getValuesSubstitutionString","index","getTableAliasSql","tableName","alias","getInsertSql","obj","columnNamesSql","valuesSql","valueSubstitutionIndex","autoIncrementColumnName","columnKey","_getModel","columns","column","primaryKey","autoIncrement","dbColumnName","push","returningSql","OutParam","format","join","addLimitClause","sqlTree","limitCount","limitOffset","escapeColumnName","columnName","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Driver = require('../driver');\nvar Connection = require('../connection');\nvar oracle = require('oracle');\nvar util = require('util');\nvar persistUtil = require('../persist_utils');\n\nvar OracleConnection = Connection.extend({\n  init: function (driver, client, opts) {\n    this._super(driver, opts);\n    this.client = client;\n    this.client.setAutoCommit(true);\n  },\n\n  close: function () {\n    this.client.close();\n  },\n\n  beginTransaction: function (callback) {\n    this.client.setAutoCommit(false);\n    callback();\n  },\n\n  commitTransaction: function (callback) {\n    var self = this;\n    this.client.commit(function (err) {\n      self.client.setAutoCommit(true);\n      callback(err);\n    });\n  },\n\n  rollbackTransaction: function (callback) {\n    var self = this;\n    this.client.rollback(function (err) {\n      self.client.setAutoCommit(true);\n      callback(err);\n    });\n  },\n\n  updateLastId: function (results) {\n    //console.log(results);\n    if (results.returnParam) {\n      results.lastId = results.returnParam;\n    }\n  },\n\n  postProcessResults: function (results) {\n    if (results instanceof Array) {\n      var fixKeyFunc = function (key, val) {\n        if (key.toLowerCase() === 'persist_rnum') {\n          return null;\n        }\n        if (key && typeof (key) === \"string\") {\n          return key.toLowerCase();\n        }\n        return key;\n      };\n      var i;\n      for (i = 0; i < results.length; i++) {\n        var result = results[i];\n        persistUtil.alterHashKeys(result, fixKeyFunc);\n      }\n    }\n  },\n\n  _runSql2: function (sql, callback) {\n    var self = this;\n    this.client.execute(sql, [], function (err, results) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      self.updateLastId(results);\n      if (results.command === 'SELECT') {\n        results = results.rows;\n      }\n      self.postProcessResults(results);\n      callback(null, results);\n    });\n  },\n\n  _runSql3: function (sql, values, callback) {\n    var self = this;\n    this.client.execute(sql, values, function (err, results) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      self.updateLastId(results);\n      self.postProcessResults(results);\n      callback(null, results);\n    });\n  },\n\n  _runSqlAll: function (sql, params, callback) {\n    this._runSql(sql, params, callback);\n  },\n\n  _runSqlEach: function (sql, params, callback, doneCallback) {\n    // todo: check with the db-oracle project to see if there is a way to do \"each\" as opposed to getting all the results back\n    this._runSql(sql, params, function (err, rows) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      var i;\n      for (i = 0; i < rows.length; i++) {\n        callback(null, rows[i]);\n      }\n      doneCallback();\n    });\n  }\n});\n\nvar OracleDriver = Driver.extend({\n  init: function () {\n    this._super();\n  },\n\n  connect: function (opts, callback) {\n    var self = this;\n    oracle.connect(opts, function (err, conn) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      var connection = new OracleConnection(self, conn, opts);\n      callback(null, connection);\n    });\n  },\n\n  getValuesSubstitutionString: function (index) {\n    return ':' + index;\n  },\n\n  getTableAliasSql: function (tableName, alias) {\n    return tableName + \" \" + alias;\n  },\n\n  getInsertSql: function (obj) {\n    var columnNamesSql = [];\n    var valuesSql = [];\n    var values = [];\n    var valueSubstitutionIndex = 1;\n    var autoIncrementColumnName;\n\n    var columnKey;\n    for (columnKey in obj._getModel().columns) {\n      var column = obj._getModel().columns[columnKey];\n      if (column.primaryKey && column.autoIncrement) {\n        autoIncrementColumnName = column.dbColumnName;\n      } else {\n        columnNamesSql.push(column.dbColumnName);\n        valuesSql.push(this.getValuesSubstitutionString(valueSubstitutionIndex++));\n        values.push(obj[columnKey]);\n      }\n    }\n\n    var returningSql = '';\n    if (autoIncrementColumnName) {\n      returningSql = 'RETURNING ' + autoIncrementColumnName + ' INTO ' + this.getValuesSubstitutionString(valueSubstitutionIndex++);\n      values.push(new oracle.OutParam());\n    }\n\n    var sql = util.format('INSERT INTO %s (%s) VALUES (%s) %s', obj._getModel().tableName, columnNamesSql.join(','), valuesSql.join(','), returningSql);\n    var result = { sql: sql, values: values };\n    //console.log(result);\n    return result;\n  },\n\n  addLimitClause: function (sql, sqlTree) {\n    if (sqlTree.limitCount || sqlTree.limitOffset) {\n      if (!sqlTree.limitCount) {\n        sqlTree.limitCount = 99999999;\n      }\n      if (!sqlTree.limitOffset) {\n        sqlTree.limitOffset = 0;\n      }\n      sql = util.format(\"SELECT * FROM (SELECT rnumalias.*, ROWNUM persist_rnum FROM (%s) rnumalias WHERE ROWNUM <= %s) WHERE persist_rnum > %s\", sql, sqlTree.limitOffset + sqlTree.limitCount, sqlTree.limitOffset);\n    }\n    return sql;\n  },\n\n  escapeColumnName: function (columnName) {\n    return '\"' + columnName + '\"';\n  }\n});\n\nmodule.exports = OracleDriver;\n"]},"metadata":{},"sourceType":"script"}