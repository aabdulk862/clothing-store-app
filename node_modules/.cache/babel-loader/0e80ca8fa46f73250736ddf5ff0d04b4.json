{"ast":null,"code":"var Driver = require('../driver');\n\nvar dbInfo = require('../db_info');\n\nvar mysql = require('mysql');\n\nvar async = require('async');\n\nvar MysqlDriver = Driver.extend({\n  init: function () {\n    this._super();\n  },\n  parseColumnType: function (columnType) {\n    var results = {\n      type: columnType\n    };\n    var match = columnType.match(/([a-zA-Z]+)\\(([0-9]+)\\)/);\n\n    if (match) {\n      results.type = match[1];\n      results.length = match[2];\n    }\n\n    if (results.type == 'int') {\n      results.type = dbInfo.INTEGER;\n    }\n\n    return results;\n  },\n  columnToDbInfo: function (column) {\n    var info = {\n      name: column['Field'],\n      notNull: column['Null'] == 'NO' ? true : false\n    };\n\n    if (column['Key']) {\n      if (column['Key'] == 'PRI') {\n        info.primaryKey = true;\n      }\n    }\n\n    var columnTypeInfo = this.parseColumnType(column['Type']);\n\n    for (var c in columnTypeInfo) {\n      info[c] = columnTypeInfo[c];\n    }\n\n    return info;\n  },\n  tableToDbInfo: function (db, tableName, columns, callback) {\n    var self = this;\n    var info = {\n      name: tableName,\n      columns: {},\n      indexes: {}\n    };\n\n    for (var i = 0; i < columns.length; i++) {\n      var column = columns[i];\n      var col = this.columnToDbInfo(column);\n      info.columns[col.name] = col;\n    }\n\n    db.query(\"SHOW INDEX FROM \" + tableName + \";\", function (err, rows) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      for (var i = 0; i < rows.length; i++) {\n        self.updateTableDbInfoWithIndex(info, rows[i]);\n      }\n\n      callback(null, info);\n    });\n  },\n  updateTableDbInfoWithIndex: function (tableInfo, indexRow) {\n    if (indexRow['Key_name'] == 'PRIMARY') {\n      return;\n    }\n\n    var keyName = indexRow['Key_name'];\n    var columnName = indexRow['Column_name'];\n\n    if (tableInfo.indexes[keyName]) {\n      tableInfo.indexes[keyName].columns.push(columnName);\n    } else {\n      var result = {\n        tableName: indexRow['Table'],\n        name: keyName,\n        columns: [columnName]\n      };\n      tableInfo.indexes[keyName] = result;\n    }\n  },\n  getInfo: function (opts, callback) {\n    var self = this;\n    var db = opts.db;\n    var createdDb = false;\n\n    if (!db) {\n      db = mysql.createClient(opts);\n      createdDb = true;\n    }\n\n    db.query(\"show tables;\", function (err, rows) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      async.mapSeries(rows, function (row, callback) {\n        var tableName;\n\n        for (var col in row) {\n          tableName = row[col];\n          break;\n        }\n\n        db.query(\"desc \" + tableName + \";\", function (err, rows) {\n          if (err) {\n            callback(err);\n            return;\n          }\n\n          self.tableToDbInfo(db, tableName, rows, callback);\n        });\n      }, function (err, results) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        if (createdDb) {\n          db.end();\n        }\n\n        var info = {\n          tables: {}\n        };\n\n        for (var i = 0; i < results.length; i++) {\n          info.tables[results[i].name] = results[i];\n        }\n\n        callback(null, info);\n      });\n    });\n  }\n});\nmodule.exports = MysqlDriver;","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/node_modules/db-info/lib/drivers/mysql.js"],"names":["Driver","require","dbInfo","mysql","async","MysqlDriver","extend","init","_super","parseColumnType","columnType","results","type","match","length","INTEGER","columnToDbInfo","column","info","name","notNull","primaryKey","columnTypeInfo","c","tableToDbInfo","db","tableName","columns","callback","self","indexes","i","col","query","err","rows","updateTableDbInfoWithIndex","tableInfo","indexRow","keyName","columnName","push","result","getInfo","opts","createdDb","createClient","mapSeries","row","end","tables","module","exports"],"mappings":"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","sourcesContent":["\r\nvar Driver = require('../driver');\r\nvar dbInfo = require('../db_info');\r\nvar mysql = require('mysql');\r\nvar async = require('async');\r\n\r\nvar MysqlDriver = Driver.extend({\r\n\tinit: function() {\r\n\t\tthis._super();\r\n\t},\r\n\r\n\tparseColumnType: function(columnType) {\r\n\t\tvar results = {\r\n\t\t\ttype: columnType\r\n\t\t};\r\n\r\n\t\tvar match = columnType.match(/([a-zA-Z]+)\\(([0-9]+)\\)/);\r\n\t\tif(match) {\r\n\t\t\tresults.type = match[1];\r\n\t\t\tresults.length = match[2];\r\n\t\t}\r\n\r\n\t\tif(results.type == 'int') {\r\n\t\t\tresults.type = dbInfo.INTEGER;\r\n\t\t}\r\n\r\n\t\treturn results;\r\n\t},\r\n\r\n\tcolumnToDbInfo: function(column) {\r\n\t\tvar info = {\r\n\t\t\tname: column['Field'],\r\n\t\t\tnotNull: column['Null'] == 'NO' ? true : false,\r\n\t\t};\r\n\r\n\t\tif(column['Key']) {\r\n\t\t\tif(column['Key'] == 'PRI') {\r\n\t\t\t\tinfo.primaryKey = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar columnTypeInfo = this.parseColumnType(column['Type']);\r\n\t\tfor(var c in columnTypeInfo) {\r\n\t\t\tinfo[c] = columnTypeInfo[c];\r\n\t\t}\r\n\r\n\t\treturn info;\r\n\t},\r\n\r\n\ttableToDbInfo: function(db, tableName, columns, callback) {\r\n\t\tvar self = this;\r\n\t\tvar info = {\r\n\t\t\tname: tableName,\r\n\t\t\tcolumns: {},\r\n\t\t\tindexes: {}\r\n\t\t};\r\n\r\n\t\tfor(var i=0; i<columns.length; i++) {\r\n\t\t\tvar column = columns[i];\r\n\t\t\tvar col = this.columnToDbInfo(column);\r\n\t\t\tinfo.columns[col.name] = col;\r\n\t\t}\r\n\r\n\t\tdb.query(\"SHOW INDEX FROM \" + tableName + \";\", function(err, rows) {\r\n\t\t\tif(err) { callback(err); return; }\r\n\r\n\t\t\tfor(var i=0; i<rows.length; i++) {\r\n\t\t\t\tself.updateTableDbInfoWithIndex(info, rows[i]);\r\n\t\t\t}\r\n\t\t\tcallback(null, info);\r\n\t\t});\r\n\t},\r\n\r\n\tupdateTableDbInfoWithIndex: function(tableInfo, indexRow) {\r\n\t\tif(indexRow['Key_name'] == 'PRIMARY') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar keyName = indexRow['Key_name'];\r\n\t\tvar\tcolumnName = indexRow['Column_name'];\r\n\r\n\t\tif(tableInfo.indexes[keyName]) {\r\n\t\t\ttableInfo.indexes[keyName].columns.push(columnName);\r\n\t\t} else {\r\n\t\t\tvar result = {\r\n\t\t\t\ttableName: indexRow['Table'],\r\n\t\t\t\tname: keyName,\r\n\t\t\t\tcolumns: [ columnName ]\r\n\t\t\t};\r\n\t\t\ttableInfo.indexes[keyName] = result;\r\n\t\t}\r\n\t},\r\n\r\n\tgetInfo: function(opts, callback) {\r\n\t\tvar self = this;\r\n\t\tvar db = opts.db;\r\n\t\tvar createdDb = false;\r\n\t\tif(!db) {\r\n\t\t\tdb = mysql.createClient(opts);\r\n\t\t\tcreatedDb = true;\r\n\t\t}\r\n\r\n\t\tdb.query(\"show tables;\", function(err, rows) {\r\n\t\t\tif(err) { callback(err); return; }\r\n\r\n\t\t\tasync.mapSeries(rows, function(row, callback) {\r\n\t\t\t\tvar tableName;\r\n\t\t\t\tfor(var col in row) {\r\n\t\t\t\t\ttableName = row[col];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdb.query(\"desc \" + tableName + \";\", function(err, rows) {\r\n\t\t\t\t\tif(err) { callback(err); return; }\r\n\t\t\t\t\tself.tableToDbInfo(db, tableName, rows, callback);\r\n\t\t\t\t});\r\n\t\t\t}, function(err, results) {\r\n\t\t\t\tif(err) { callback(err); return; }\r\n\t\t\t\tif(createdDb) {\r\n\t\t\t\t\tdb.end();\r\n\t\t\t\t}\r\n\t\t\t\tvar info = {\r\n\t\t\t\t\ttables: {}\r\n\t\t\t\t};\r\n\t\t\t\tfor(var i=0; i<results.length; i++) {\r\n\t\t\t\t\tinfo.tables[results[i].name] = results[i];\r\n\t\t\t\t}\r\n\t\t\t\tcallback(null, info);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n});\r\n\r\nmodule.exports = MysqlDriver;"]},"metadata":{},"sourceType":"script"}