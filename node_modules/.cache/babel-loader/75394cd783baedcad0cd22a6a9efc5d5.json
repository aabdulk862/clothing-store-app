{"ast":null,"code":"import { CART_ACTION_TYPES } from \"./cart.types\";\nimport { createAction } from \"../../utils/reducer/reducer.utils\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id);\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n\n  return [...cartItems, { ...productToAdd,\n    quantity: 1\n  }];\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  // find the cart item to remove\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id); // check if quantity is equal to 1, if it is remove that item from the cart\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  } // return back cartitems with matching cart item with reduced quantity\n\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};\n\nexport const setIsCartOpen = boolean => createAction(CART_ACTION_TYPES.SET_IS_CART_OPEN, boolean);\n\nconst clearCartItem = (cartItems, cartItemToClear) => cartItems.filter(cartItem => cartItem.id !== cartItemToClear.id);\n\nexport const addItemToCart = (cartItems, productToAdd) => {\n  const newCartItems = addCartItem(cartItems, productToAdd);\n  return createAction(CART_ACTION_TYPES.SET_CART_ITEMS, newCartItems);\n};\nexport const removeItemToCart = (cartItems, cartItemToRemove) => {\n  const newCartItems = removeCartItem(cartItems, cartItemToRemove);\n  return createAction(CART_ACTION_TYPES.SET_CART_ITEMS, newCartItems);\n};\nexport const clearItemFromCart = (cartItems, cartItemToClear) => {\n  const newCartItems = clearCartItem(cartItems, cartItemToClear);\n  return createAction(CART_ACTION_TYPES.SET_CART_ITEMS, newCartItems);\n};","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/src/store/cart/cart.action.js"],"names":["CART_ACTION_TYPES","createAction","addCartItem","cartItems","productToAdd","existingCartItem","find","cartItem","id","map","quantity","removeCartItem","cartItemToRemove","filter","setIsCartOpen","boolean","SET_IS_CART_OPEN","clearCartItem","cartItemToClear","addItemToCart","newCartItems","SET_CART_ITEMS","removeItemToCart","clearItemFromCart"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,cAAlC;AACA,SAASC,YAAT,QAA6B,mCAA7B;;AAEA,MAAMC,WAAW,GAAG,CAACC,SAAD,EAAYC,YAAZ,KAA6B;AAC/C,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACtBC,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBJ,YAAY,CAACI,EADpB,CAAzB;;AAIA,MAAIH,gBAAJ,EAAsB;AACpB,WAAOF,SAAS,CAACM,GAAV,CAAeF,QAAD,IACnBA,QAAQ,CAACC,EAAT,KAAgBJ,YAAY,CAACI,EAA7B,GACI,EAAE,GAAGD,QAAL;AAAeG,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA7C,KADJ,GAEIH,QAHC,CAAP;AAKD;;AAED,SAAO,CAAC,GAAGJ,SAAJ,EAAe,EAAE,GAAGC,YAAL;AAAmBM,IAAAA,QAAQ,EAAE;AAA7B,GAAf,CAAP;AACD,CAdD;;AAgBA,MAAMC,cAAc,GAAG,CAACR,SAAD,EAAYS,gBAAZ,KAAiC;AACtD;AACA,QAAMP,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACtBC,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EADxB,CAAzB,CAFsD,CAMtD;;AACA,MAAIH,gBAAgB,CAACK,QAAjB,KAA8B,CAAlC,EAAqC;AACnC,WAAOP,SAAS,CAACU,MAAV,CAAkBN,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAAhE,CAAP;AACD,GATqD,CAWtD;;;AACA,SAAOL,SAAS,CAACM,GAAV,CAAeF,QAAD,IACnBA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAAjC,GACI,EAAE,GAAGD,QAAL;AAAeG,IAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA7C,GADJ,GAEIH,QAHC,CAAP;AAKD,CAjBD;;AAmBA,OAAO,MAAMO,aAAa,GAAIC,OAAD,IAC3Bd,YAAY,CAACD,iBAAiB,CAACgB,gBAAnB,EAAqCD,OAArC,CADP;;AAGP,MAAME,aAAa,GAAG,CAACd,SAAD,EAAYe,eAAZ,KACpBf,SAAS,CAACU,MAAV,CAAkBN,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBU,eAAe,CAACV,EAA/D,CADF;;AAGA,OAAO,MAAMW,aAAa,GAAG,CAAChB,SAAD,EAAYC,YAAZ,KAA6B;AACxD,QAAMgB,YAAY,GAAGlB,WAAW,CAACC,SAAD,EAAYC,YAAZ,CAAhC;AACA,SAAOH,YAAY,CAACD,iBAAiB,CAACqB,cAAnB,EAAmCD,YAAnC,CAAnB;AACD,CAHM;AAKP,OAAO,MAAME,gBAAgB,GAAG,CAACnB,SAAD,EAAYS,gBAAZ,KAAiC;AAC/D,QAAMQ,YAAY,GAAGT,cAAc,CAACR,SAAD,EAAYS,gBAAZ,CAAnC;AACA,SAAOX,YAAY,CAACD,iBAAiB,CAACqB,cAAnB,EAAmCD,YAAnC,CAAnB;AACD,CAHM;AAKP,OAAO,MAAMG,iBAAiB,GAAG,CAACpB,SAAD,EAAYe,eAAZ,KAAgC;AAC/D,QAAME,YAAY,GAAGH,aAAa,CAACd,SAAD,EAAYe,eAAZ,CAAlC;AACA,SAAOjB,YAAY,CAACD,iBAAiB,CAACqB,cAAnB,EAAmCD,YAAnC,CAAnB;AACD,CAHM","sourcesContent":["import { CART_ACTION_TYPES } from \"./cart.types\";\r\nimport { createAction } from \"../../utils/reducer/reducer.utils\";\r\n\r\nconst addCartItem = (cartItems, productToAdd) => {\r\n  const existingCartItem = cartItems.find(\r\n    (cartItem) => cartItem.id === productToAdd.id\r\n  );\r\n\r\n  if (existingCartItem) {\r\n    return cartItems.map((cartItem) =>\r\n      cartItem.id === productToAdd.id\r\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\r\n        : cartItem\r\n    );\r\n  }\r\n\r\n  return [...cartItems, { ...productToAdd, quantity: 1 }];\r\n};\r\n\r\nconst removeCartItem = (cartItems, cartItemToRemove) => {\r\n  // find the cart item to remove\r\n  const existingCartItem = cartItems.find(\r\n    (cartItem) => cartItem.id === cartItemToRemove.id\r\n  );\r\n\r\n  // check if quantity is equal to 1, if it is remove that item from the cart\r\n  if (existingCartItem.quantity === 1) {\r\n    return cartItems.filter((cartItem) => cartItem.id !== cartItemToRemove.id);\r\n  }\r\n\r\n  // return back cartitems with matching cart item with reduced quantity\r\n  return cartItems.map((cartItem) =>\r\n    cartItem.id === cartItemToRemove.id\r\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\r\n      : cartItem\r\n  );\r\n};\r\n\r\nexport const setIsCartOpen = (boolean) =>\r\n  createAction(CART_ACTION_TYPES.SET_IS_CART_OPEN, boolean);\r\n\r\nconst clearCartItem = (cartItems, cartItemToClear) =>\r\n  cartItems.filter((cartItem) => cartItem.id !== cartItemToClear.id);\r\n\r\nexport const addItemToCart = (cartItems, productToAdd) => {\r\n  const newCartItems = addCartItem(cartItems, productToAdd);\r\n  return createAction(CART_ACTION_TYPES.SET_CART_ITEMS, newCartItems);\r\n};\r\n\r\nexport const removeItemToCart = (cartItems, cartItemToRemove) => {\r\n  const newCartItems = removeCartItem(cartItems, cartItemToRemove);\r\n  return createAction(CART_ACTION_TYPES.SET_CART_ITEMS, newCartItems);\r\n};\r\n\r\nexport const clearItemFromCart = (cartItems, cartItemToClear) => {\r\n  const newCartItems = clearCartItem(cartItems, cartItemToClear);\r\n  return createAction(CART_ACTION_TYPES.SET_CART_ITEMS, newCartItems);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}