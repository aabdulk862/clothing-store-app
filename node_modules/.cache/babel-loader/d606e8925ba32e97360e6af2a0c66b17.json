{"ast":null,"code":"'use strict';\n\nvar persistUtil = require('./persist_utils');\n\nvar Connection = require('./connection');\n\nvar SqlTree = require('./sqltree');\n\nvar type = require('./type');\n\nvar inflection = require('./inflection');\n\nvar Query = function (connection, model) {\n  var self = this;\n\n  this._getConnection = function () {\n    return connection;\n  }; // hide from JSON.stringify\n\n\n  this.model = model;\n  var tableIndex = 0;\n\n  this._getNextTableAlias = function () {\n    return 't' + tableIndex++;\n  };\n\n  this.count = persistUtil.bind('count', this.count, this);\n  this.all = persistUtil.bind('all', this.all, this);\n  this.first = persistUtil.bind('first', this.first, this);\n  this.getById = persistUtil.bind('getById', this.getById, this);\n  this.deleteAll = persistUtil.bind('deleteAll', this.deleteAll, this);\n  this.min = persistUtil.bind('min', this.min, this);\n  this.sum = persistUtil.bind('sum', this.sum, this);\n  this.max = persistUtil.bind('max', this.max, this);\n  var sqlTree = new SqlTree(model);\n\n  this._sqlTree = function () {\n    return sqlTree;\n  }; // hide from JSON.stringify\n\n\n  sqlTree.tableAlias = this._getNextTableAlias();\n\n  if (model.columns) {\n    var propertyName;\n\n    for (propertyName in model.columns) {\n      var colDef = sqlTree.addColumn(model, propertyName, sqlTree.tableAlias);\n\n      if (model.columns[propertyName].primaryKey) {\n        sqlTree.primaryKeyColumn = colDef;\n      }\n    }\n  }\n}; // \"name = ?\", \"bob\"\n// \"name = ? AND age = ?\", [\"bob\", 6]\n// \"name = 'bob'\"\n// { \"name\": \"bob\", \"age\", 6 }\n\n\nQuery.prototype.where = function () {\n  if (typeof arguments[0] === 'string') {\n    var expr = arguments[0];\n    var params = Array.prototype.slice.call(arguments, 1);\n\n    if (params.length === 1 && params[0] instanceof Array) {\n      params = params[0];\n    }\n\n    this._sqlTree().where.push({\n      expr: expr,\n      params: params\n    });\n  } else {\n    var hash = arguments[0];\n    var key;\n\n    for (key in hash) {\n      this.where(key + ' = ?', [hash[key]]);\n    }\n  }\n\n  return this;\n};\n\nQuery.prototype.whereIn = function () {\n  if (typeof arguments[0] === 'string') {\n    var expr = arguments[0];\n    var params = arguments[1];\n    var paramCount = params.length;\n    expr = expr + ' IN (';\n    var i;\n\n    for (i = 0; i < paramCount - 1; i++) {\n      expr = expr + \"?,\";\n    }\n\n    expr = expr + '?)';\n    this.where(expr, params);\n  }\n\n  return this;\n}; // \"people\"\n// [\"people\", \"phones\"]\n\n\nQuery.prototype.include = function () {\n  var join;\n\n  if (typeof arguments[0] === 'string') {\n    var associationPropertyName = arguments[0];\n    var association = this.model.associations[associationPropertyName] || this.model.associations[inflection.singularize(associationPropertyName)] || this.model.associations[inflection.pluralize(associationPropertyName)];\n\n    if (!association) {\n      throw new Error('Could not find association \"' + associationPropertyName + '\" off of \"' + this.model.modelName + '\"');\n    } // join to table\n\n\n    if (association.through) {\n      // otherTable, otherTableId, thisTableId\n      this.leftJoin(association.through, association.foreignKey, this.model.getIdColumn().dbColumnName);\n      join = this._sqlTree().joins[this._sqlTree().joins.length - 1];\n      this.leftJoin(association.model.tableName, association.model.getIdColumn().dbColumnName, {\n        tableAlias: join.tableAlias,\n        dbColumnName: association.manyToManyForeignKey\n      });\n    } else {\n      this.leftJoin(associationPropertyName);\n    } // add the columns from the new table\n\n\n    join = this._sqlTree().joins[this._sqlTree().joins.length - 1];\n    var primaryKeyColumn;\n    var propertyName;\n\n    for (propertyName in association.model.columns) {\n      var col = association.model.columns[propertyName];\n\n      var colDef = this._sqlTree().addColumn(association.model, propertyName, join.tableAlias);\n\n      if (col.primaryKey) {\n        primaryKeyColumn = colDef;\n      }\n    } // add the include\n\n\n    this._sqlTree().includes.push({\n      propertyName: arguments[0],\n      association: association,\n      primaryKeyColumn: primaryKeyColumn\n    });\n  } else if (Array.isArray(arguments[0])) {\n    var arr = arguments[0];\n    var i;\n\n    for (i = 0; i < arr.length; i++) {\n      this.include(arr[i]);\n    }\n  } else if (arguments[0].modelName) {\n    this.include(arguments[0].modelName);\n  } else {\n    throw new Error(\"Include expects a property name or an array of property names.\");\n  }\n\n  return this;\n};\n\nQuery.prototype.join = function (otherTable, otherTableId, thisTableId) {\n  return this._join.apply(this, ['join'].concat(persistUtil.toArray(arguments)));\n};\n\nQuery.prototype.leftJoin = function (otherTable, otherTableId, thisTableId) {\n  return this._join.apply(this, ['left join'].concat(persistUtil.toArray(arguments)));\n}; // type, otherTable, otherTableId, thisTableId\n// type, associationPropertyName\n\n\nQuery.prototype._join = function (type, otherTable, otherTableId, thisTableId) {\n  if (arguments.length === 2) {\n    var association = this.model.associations[arguments[1]] || this.model.associations[inflection.singularize(arguments[1])] || this.model.associations[inflection.pluralize(arguments[1])];\n    otherTable = association.model.tableName;\n\n    if (association.type === 'hasOne') {\n      otherTableId = this.model.getIdColumn().dbColumnName;\n      thisTableId = association.foreignKey;\n    } else {\n      otherTableId = association.foreignKey;\n      thisTableId = this.model.getIdColumn().dbColumnName;\n    }\n  }\n\n  if (thisTableId.tableAlias) {\n    thisTableId = thisTableId.tableAlias + '.' + thisTableId.dbColumnName;\n  } else {\n    thisTableId = this._sqlTree().tableAlias + '.' + thisTableId;\n  }\n\n  this._sqlTree().joins.push({\n    type: type,\n    otherTable: otherTable,\n    otherTableId: otherTableId,\n    thisTableId: thisTableId,\n    tableAlias: this._getNextTableAlias()\n  });\n\n  return this;\n};\n\nQuery.prototype.orderBy = function (name, orderByDirection) {\n  var column = this._sqlTree().getColumnByPropertyName(name);\n\n  if (column === null) {\n    throw new Error(\"Invalid property name [\" + name + \"] for order by clause.\");\n  }\n\n  this._sqlTree().orderBy.push({\n    column: column,\n    direction: orderByDirection\n  });\n\n  return this;\n};\n\nQuery.prototype.limit = function (count, offset) {\n  this._sqlTree().limitCount = count;\n  this._sqlTree().limitOffset = offset;\n  return this;\n}; // connection, callback, doneCallback\n// callback, doneCallback\n\n\nQuery.prototype.each = function () {\n  var connection = this._getConnection();\n\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n\n  var callback = arguments[arguments.length - 2];\n  var doneCallback = arguments[arguments.length - 1];\n\n  if (this._sqlTree().includes.length > 0) {\n    throw new Error(\"includes are not support with 'each' method.\");\n  }\n\n  connection.each(this._sqlTree(), callback, doneCallback);\n};\n\nQuery.prototype.count = function () {\n  var connection = this._getConnection();\n\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n\n  var callback = arguments[arguments.length - 1];\n  this._sqlTree().action = 'count';\n  connection.single(this._sqlTree(), 'count', callback);\n}; // field (chaining)\n// connection, field, callback\n// field, callback\n\n\nQuery.prototype.min = function () {\n  var self = this;\n\n  if (arguments.length === 1) {\n    var fieldName = arguments[0];\n    return function (connection, callback) {\n      self.min(connection, fieldName, callback);\n    };\n  }\n\n  var connection = this._getConnection();\n\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n\n  var field = arguments[arguments.length - 2];\n  var callback = arguments[arguments.length - 1];\n  this._sqlTree().action = 'min';\n  this._sqlTree().columns = [this._sqlTree().getColumnByPropertyName(field)];\n  connection.single(this._sqlTree(), 'min', callback);\n  return null;\n}; // field (chaining)\n// connection, field, callback\n// field, callback\n\n\nQuery.prototype.max = function () {\n  var self = this;\n\n  if (arguments.length === 1) {\n    var fieldName = arguments[0];\n    return function (connection, callback) {\n      self.max(connection, fieldName, callback);\n    };\n  }\n\n  var connection = this._getConnection();\n\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n\n  var field = arguments[arguments.length - 2];\n  var callback = arguments[arguments.length - 1];\n  this._sqlTree().action = 'max';\n  this._sqlTree().columns = [this._sqlTree().getColumnByPropertyName(field)];\n  connection.single(this._sqlTree(), 'max', callback);\n  return null;\n}; // field (chaining)\n// connection, field, callback\n// field, callback\n\n\nQuery.prototype.sum = function () {\n  var self = this;\n\n  if (arguments.length === 1) {\n    var fieldName = arguments[0];\n    return function (connection, callback) {\n      self.sum(connection, fieldName, callback);\n    };\n  }\n\n  var connection = this._getConnection();\n\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n\n  var field = arguments[arguments.length - 2];\n  var callback = arguments[arguments.length - 1];\n  this._sqlTree().action = 'sum';\n  this._sqlTree().columns = [this._sqlTree().getColumnByPropertyName(field)];\n  connection.single(this._sqlTree(), 'sum', function (err, sum) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (sum === null) {\n      sum = 0;\n    }\n\n    return callback(null, sum);\n  });\n  return null;\n};\n\nQuery.prototype.all = function () {\n  var connection = this._getConnection();\n\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n\n  var callback = arguments[arguments.length - 1];\n  connection.all(this._sqlTree(), callback);\n};\n\nQuery.prototype.first = function () {\n  var connection = this._getConnection();\n\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n\n  var callback = arguments[arguments.length - 1]; // TODO: HACK: If we have includes, limit will cause the joined rows not to be included\n  // so we need to not limit and just get all rows and only use the first one.\n\n  if (this._sqlTree().includes.length === 0) {\n    this.limit(1);\n  }\n\n  this.all(connection, function (err, rows) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (rows.length === 0) {\n      callback(null, null);\n    } else {\n      callback(null, rows[0]);\n    }\n  });\n};\n\nQuery.prototype.last = function () {\n  var connection = this._getConnection();\n\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n\n  var callback = arguments[arguments.length - 1];\n  this.all(connection, function (err, rows) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (rows.length === 0) {\n      callback(null, null);\n    } else {\n      callback(null, rows[rows.length - 1]);\n    }\n  });\n};\n\nQuery.prototype.getById = function () {\n  var args = persistUtil.toArray(arguments);\n\n  var connection = this._getConnection();\n\n  if (args[0] instanceof Connection) {\n    connection = args[0];\n    args = args.slice(1);\n  }\n\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n\n  var id = args[0];\n  var callback = args[args.length - 1];\n  this.where(this.model.getIdPropertyName() + \" = ?\", id).first(connection, function (err, row) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    callback(null, row);\n  });\n};\n\nQuery.prototype.deleteAll = function () {\n  var connection = this._getConnection();\n\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n\n  var callback = arguments[arguments.length - 1];\n  this._sqlTree().action = 'delete';\n  this._sqlTree().columns = [];\n  this.all(connection, callback);\n};\n\nQuery.prototype.updateAll = function () {\n  var connection = this._getConnection();\n\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n\n  var updateHash = arguments[arguments.length - 2];\n  var callback = arguments[arguments.length - 1];\n  this._sqlTree().action = 'update';\n  this._sqlTree().updateHash = updateHash;\n  this.all(connection, callback);\n};\n\nmodule.exports = Query;","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/node_modules/persist/lib/query.js"],"names":["persistUtil","require","Connection","SqlTree","type","inflection","Query","connection","model","self","_getConnection","tableIndex","_getNextTableAlias","count","bind","all","first","getById","deleteAll","min","sum","max","sqlTree","_sqlTree","tableAlias","columns","propertyName","colDef","addColumn","primaryKey","primaryKeyColumn","prototype","where","arguments","expr","params","Array","slice","call","length","push","hash","key","whereIn","paramCount","i","include","join","associationPropertyName","association","associations","singularize","pluralize","Error","modelName","through","leftJoin","foreignKey","getIdColumn","dbColumnName","joins","tableName","manyToManyForeignKey","col","includes","isArray","arr","otherTable","otherTableId","thisTableId","_join","apply","concat","toArray","orderBy","name","orderByDirection","column","getColumnByPropertyName","direction","limit","offset","limitCount","limitOffset","each","callback","doneCallback","action","single","fieldName","field","err","rows","last","args","id","getIdPropertyName","row","updateAll","updateHash","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar persistUtil = require('./persist_utils');\nvar Connection = require('./connection');\nvar SqlTree = require('./sqltree');\nvar type = require('./type');\nvar inflection = require('./inflection');\n\nvar Query = function(connection, model) {\n  var self = this;\n  this._getConnection = function() { return connection; }; // hide from JSON.stringify\n  this.model = model;\n  var tableIndex = 0;\n  this._getNextTableAlias = function() { return 't' + (tableIndex++); };\n  this.count = persistUtil.bind('count', this.count, this);\n  this.all = persistUtil.bind('all', this.all, this);\n  this.first = persistUtil.bind('first', this.first, this);\n  this.getById = persistUtil.bind('getById', this.getById, this);\n  this.deleteAll = persistUtil.bind('deleteAll', this.deleteAll, this);\n  this.min = persistUtil.bind('min', this.min, this);\n  this.sum = persistUtil.bind('sum', this.sum, this);\n  this.max = persistUtil.bind('max', this.max, this);\n\n  var sqlTree = new SqlTree(model);\n  this._sqlTree = function() { return sqlTree; }; // hide from JSON.stringify\n\n  sqlTree.tableAlias = this._getNextTableAlias();\n  if (model.columns) {\n    var propertyName;\n    for (propertyName in model.columns) {\n      var colDef = sqlTree.addColumn(model, propertyName, sqlTree.tableAlias);\n      if (model.columns[propertyName].primaryKey) {\n        sqlTree.primaryKeyColumn = colDef;\n      }\n    }\n  }\n};\n\n// \"name = ?\", \"bob\"\n// \"name = ? AND age = ?\", [\"bob\", 6]\n// \"name = 'bob'\"\n// { \"name\": \"bob\", \"age\", 6 }\nQuery.prototype.where = function() {\n  if (typeof (arguments[0]) === 'string') {\n    var expr = arguments[0];\n    var params = Array.prototype.slice.call(arguments, 1);\n    if (params.length === 1 && params[0] instanceof Array) {\n      params = params[0];\n    }\n    this._sqlTree().where.push({expr: expr, params: params});\n  } else {\n    var hash = arguments[0];\n    var key;\n    for (key in hash) {\n      this.where(key + ' = ?', [ hash[key] ]);\n    }\n  }\n  return this;\n};\n\nQuery.prototype.whereIn = function() {\n  if (typeof (arguments[0]) === 'string') {\n    var expr = arguments[0];\n    var params = arguments[1];\n    var paramCount = params.length;\n    expr = expr + ' IN (';\n    var i;\n    for (i = 0; i < paramCount - 1; i++) {\n      expr = expr + \"?,\"\n    }\n    expr = expr + '?)'\n    this.where(expr, params);\n  }\n\n  return this;\n};\n\n\n// \"people\"\n// [\"people\", \"phones\"]\nQuery.prototype.include = function() {\n  var join;\n  if (typeof (arguments[0]) === 'string') {\n    var associationPropertyName = arguments[0];\n    var association = this.model.associations[associationPropertyName]\n                        || this.model.associations[inflection.singularize(associationPropertyName)]\n      || this.model.associations[inflection.pluralize(associationPropertyName)];\n    if (!association) {\n      throw new Error('Could not find association \"' + associationPropertyName + '\" off of \"' + this.model.modelName + '\"');\n    }\n\n    // join to table\n    if (association.through) {\n      // otherTable, otherTableId, thisTableId\n      this.leftJoin(association.through, association.foreignKey, this.model.getIdColumn().dbColumnName);\n      join = this._sqlTree().joins[this._sqlTree().joins.length - 1];\n      this.leftJoin(association.model.tableName, association.model.getIdColumn().dbColumnName, {tableAlias: join.tableAlias, dbColumnName: association.manyToManyForeignKey});\n    } else {\n      this.leftJoin(associationPropertyName);\n    }\n\n    // add the columns from the new table\n    join = this._sqlTree().joins[this._sqlTree().joins.length - 1];\n    var primaryKeyColumn;\n    var propertyName;\n    for (propertyName in association.model.columns) {\n      var col = association.model.columns[propertyName];\n      var colDef = this._sqlTree().addColumn(association.model, propertyName, join.tableAlias);\n      if (col.primaryKey) {\n        primaryKeyColumn = colDef;\n      }\n    }\n\n    // add the include\n    this._sqlTree().includes.push({ propertyName: arguments[0], association: association, primaryKeyColumn: primaryKeyColumn });\n\n  } else if (Array.isArray(arguments[0])) {\n    var arr = arguments[0];\n    var i;\n    for (i = 0; i < arr.length; i++) {\n      this.include(arr[i]);\n    }\n  } else if (arguments[0].modelName) {\n    this.include(arguments[0].modelName);\n  } else {\n    throw new Error(\"Include expects a property name or an array of property names.\");\n  }\n  return this;\n};\n\nQuery.prototype.join = function(otherTable, otherTableId, thisTableId) {\n  return this._join.apply(this, ['join'].concat(persistUtil.toArray(arguments)));\n};\n\nQuery.prototype.leftJoin = function(otherTable, otherTableId, thisTableId) {\n  return this._join.apply(this, ['left join'].concat(persistUtil.toArray(arguments)));\n};\n\n// type, otherTable, otherTableId, thisTableId\n// type, associationPropertyName\nQuery.prototype._join = function(type, otherTable, otherTableId, thisTableId) {\n  if (arguments.length === 2) {\n    var association = this.model.associations[arguments[1]]\n                        || this.model.associations[inflection.singularize(arguments[1])]\n      || this.model.associations[inflection.pluralize(arguments[1])];\n    otherTable = association.model.tableName;\n    if (association.type === 'hasOne') {\n      otherTableId = this.model.getIdColumn().dbColumnName;\n      thisTableId = association.foreignKey;\n    } else {\n      otherTableId = association.foreignKey;\n      thisTableId = this.model.getIdColumn().dbColumnName;\n    }\n  }\n\n  if (thisTableId.tableAlias) {\n    thisTableId = thisTableId.tableAlias + '.' + thisTableId.dbColumnName;\n  } else {\n    thisTableId = this._sqlTree().tableAlias + '.' + thisTableId;\n  }\n\n  this._sqlTree().joins.push({\n    type: type,\n    otherTable: otherTable,\n    otherTableId: otherTableId,\n    thisTableId: thisTableId,\n    tableAlias: this._getNextTableAlias()\n  });\n  return this;\n};\n\nQuery.prototype.orderBy = function(name, orderByDirection) {\n  var column = this._sqlTree().getColumnByPropertyName(name);\n  if (column === null) {\n    throw new Error(\"Invalid property name [\" + name + \"] for order by clause.\");\n  }\n  this._sqlTree().orderBy.push({ column: column, direction: orderByDirection });\n  return this;\n};\n\nQuery.prototype.limit = function(count, offset) {\n  this._sqlTree().limitCount = count;\n  this._sqlTree().limitOffset = offset;\n  return this;\n};\n\n// connection, callback, doneCallback\n// callback, doneCallback\nQuery.prototype.each = function() {\n  var connection = this._getConnection();\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n  var callback = arguments[arguments.length - 2];\n  var doneCallback = arguments[arguments.length - 1];\n\n  if (this._sqlTree().includes.length > 0) {\n    throw new Error(\"includes are not support with 'each' method.\");\n  }\n\n  connection.each(this._sqlTree(), callback, doneCallback);\n};\n\nQuery.prototype.count = function() {\n  var connection = this._getConnection();\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n  var callback = arguments[arguments.length - 1];\n\n  this._sqlTree().action = 'count';\n  connection.single(this._sqlTree(), 'count', callback);\n};\n\n// field (chaining)\n// connection, field, callback\n// field, callback\nQuery.prototype.min = function() {\n  var self = this;\n  if (arguments.length === 1) {\n    var fieldName = arguments[0];\n    return function(connection, callback) {\n      self.min(connection, fieldName, callback);\n    };\n  }\n\n  var connection = this._getConnection();\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n  var field = arguments[arguments.length - 2];\n  var callback = arguments[arguments.length - 1];\n\n  this._sqlTree().action = 'min';\n  this._sqlTree().columns = [ this._sqlTree().getColumnByPropertyName(field) ];\n  connection.single(this._sqlTree(), 'min', callback);\n  return null;\n};\n\n// field (chaining)\n// connection, field, callback\n// field, callback\nQuery.prototype.max = function() {\n  var self = this;\n  if (arguments.length === 1) {\n    var fieldName = arguments[0];\n    return function(connection, callback) {\n      self.max(connection, fieldName, callback);\n    };\n  }\n\n  var connection = this._getConnection();\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n  var field = arguments[arguments.length - 2];\n  var callback = arguments[arguments.length - 1];\n\n  this._sqlTree().action = 'max';\n  this._sqlTree().columns = [ this._sqlTree().getColumnByPropertyName(field) ];\n  connection.single(this._sqlTree(), 'max', callback);\n  return null;\n};\n\n// field (chaining)\n// connection, field, callback\n// field, callback\nQuery.prototype.sum = function() {\n  var self = this;\n  if (arguments.length === 1) {\n    var fieldName = arguments[0];\n    return function(connection, callback) {\n      self.sum(connection, fieldName, callback);\n    };\n  }\n\n  var connection = this._getConnection();\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n  var field = arguments[arguments.length - 2];\n  var callback = arguments[arguments.length - 1];\n\n  this._sqlTree().action = 'sum';\n  this._sqlTree().columns = [ this._sqlTree().getColumnByPropertyName(field) ];\n  connection.single(this._sqlTree(), 'sum', function(err, sum) {\n    if (err) {\n      return callback(err);\n    }\n    if (sum === null) {\n      sum = 0;\n    }\n    return callback(null, sum);\n  });\n  return null;\n};\n\nQuery.prototype.all = function() {\n  var connection = this._getConnection();\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n  var callback = arguments[arguments.length - 1];\n\n  connection.all(this._sqlTree(), callback);\n};\n\nQuery.prototype.first = function() {\n  var connection = this._getConnection();\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n  var callback = arguments[arguments.length - 1];\n\n  // TODO: HACK: If we have includes, limit will cause the joined rows not to be included\n  // so we need to not limit and just get all rows and only use the first one.\n  if (this._sqlTree().includes.length === 0) {\n    this.limit(1);\n  }\n  this.all(connection, function(err, rows) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    if (rows.length === 0) {\n      callback(null, null);\n    } else {\n      callback(null, rows[0]);\n    }\n  });\n};\n\nQuery.prototype.last = function() {\n  var connection = this._getConnection();\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n  var callback = arguments[arguments.length - 1];\n\n  this.all(connection, function(err, rows) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    if (rows.length === 0) {\n      callback(null, null);\n    } else {\n      callback(null, rows[rows.length - 1]);\n    }\n  });\n};\n\n\nQuery.prototype.getById = function() {\n  var args = persistUtil.toArray(arguments);\n  var connection = this._getConnection();\n  if (args[0] instanceof Connection) {\n    connection = args[0];\n    args = args.slice(1);\n  }\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n  var id = args[0];\n  var callback = args[args.length - 1];\n\n  this.where(this.model.getIdPropertyName() + \" = ?\", id).first(connection, function(err, row) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    callback(null, row);\n  });\n};\n\nQuery.prototype.deleteAll = function() {\n  var connection = this._getConnection();\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n  var callback = arguments[arguments.length - 1];\n\n  this._sqlTree().action = 'delete';\n  this._sqlTree().columns = [];\n  this.all(connection, callback);\n};\n\nQuery.prototype.updateAll = function() {\n  var connection = this._getConnection();\n  if (arguments[0] instanceof Connection) {\n    connection = arguments[0];\n  }\n  if (!connection) {\n    throw new Error(\"connection is null or undefined\");\n  }\n  var updateHash = arguments[arguments.length - 2];\n  var callback = arguments[arguments.length - 1];\n\n  this._sqlTree().action = 'update';\n  this._sqlTree().updateHash = updateHash;\n  this.all(connection, callback);\n};\n\nmodule.exports = Query;\n"]},"metadata":{},"sourceType":"script"}