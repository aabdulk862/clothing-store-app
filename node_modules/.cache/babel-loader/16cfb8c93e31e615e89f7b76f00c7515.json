{"ast":null,"code":"import { compose, createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport { rootReducer } from './root-reducer';\nimport { rootSaga } from './root-saga';\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['user']\n};\nconst sagaMiddleware = createSagaMiddleware();\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nconst middleWares = [process.env.NODE_ENV === 'development' && logger, sagaMiddleware].filter(middleware => Boolean(middleware));\nconst composeEnhancer = process.env.NODE_ENV !== 'production' && window && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst composedEnhancers = composeEnhancer(applyMiddleware(...middleWares));\nexport const store = createStore(persistedReducer, undefined, composedEnhancers);\nsagaMiddleware.run(rootSaga);\nexport const persistor = persistStore(store);","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/src/store/store.ts"],"names":["compose","createStore","applyMiddleware","persistStore","persistReducer","storage","logger","createSagaMiddleware","rootReducer","rootSaga","persistConfig","key","whitelist","sagaMiddleware","persistedReducer","middleWares","process","env","NODE_ENV","filter","middleware","Boolean","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","composedEnhancers","store","undefined","run","persistor"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,eAA/B,QAAkE,OAAlE;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,QAAT,QAAyB,aAAzB;AAUA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBN,EAAAA,OAFoB;AAGpBO,EAAAA,SAAS,EAAE,CAAC,MAAD;AAHS,CAAtB;AAMA,MAAMC,cAAc,GAAGN,oBAAoB,EAA3C;AAEA,MAAMO,gBAAgB,GAAGV,cAAc,CAACM,aAAD,EAAgBF,WAAhB,CAAvC;AAEA,MAAMO,WAAW,GAAG,CAClBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0CZ,MADxB,EAElBO,cAFkB,EAGlBM,MAHkB,CAGVC,UAAD,IAAyCC,OAAO,CAACD,UAAD,CAHrC,CAApB;AAKA,MAAME,eAAe,GAClBN,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IACCK,MADD,IAECA,MAAM,CAACC,oCAFT,IAGAxB,OAJF;AAOA,MAAMyB,iBAAiB,GAAGH,eAAe,CAACpB,eAAe,CAAC,GAAGa,WAAJ,CAAhB,CAAzC;AAEA,OAAO,MAAMW,KAAK,GAAGzB,WAAW,CAC9Ba,gBAD8B,EAE9Ba,SAF8B,EAG9BF,iBAH8B,CAAzB;AAMPZ,cAAc,CAACe,GAAf,CAAmBnB,QAAnB;AAEA,OAAO,MAAMoB,SAAS,GAAG1B,YAAY,CAACuB,KAAD,CAA9B","sourcesContent":["import { compose, createStore, applyMiddleware, Middleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { rootReducer } from './root-reducer';\nimport { rootSaga } from './root-saga';\n\nexport type RootState = ReturnType<typeof rootReducer>\n\ndeclare global{\n  interface Window{\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\n  }\n}\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['user'],\n};\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst middleWares = [\n  process.env.NODE_ENV === 'development' && logger,\n  sagaMiddleware,\n].filter((middleware): middleware is Middleware =>Boolean(middleware));\n\nconst composeEnhancer =\n  (process.env.NODE_ENV !== 'production' &&\n    window &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n\n\nconst composedEnhancers = composeEnhancer(applyMiddleware(...middleWares));\n\nexport const store = createStore(\n  persistedReducer,\n  undefined,\n  composedEnhancers\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport const persistor = persistStore(store);\n"]},"metadata":{},"sourceType":"module"}