{"ast":null,"code":"import { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport { USER_ACTION_TYPES } from \"./user.types\";\nimport { signInSuccess, signInFailed } from \"./user.action\";\nimport { getCurrentUser, createUserDocumentFromAuth, signInWithGooglePopup, signInAuthUserWithEmailAndPassword, createAuthUserWithEmailAndPassword } from \"../../utils/firebase/firebase.utils\";\nexport function* getSnapshotFromUserAuth(userAuth, additionalDetails) {\n  try {\n    const userSnapshot = yield call(createUserDocumentFromAuth, userAuth, additionalDetails);\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailed(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield call(signInWithGooglePopup);\n    yield call(getSnapshotFromUserAuth, user);\n  } catch (error) {\n    yield put(signInFailed(error));\n  }\n}\nexport function* signInWithEmail(_ref) {\n  let {\n    payload: {\n      email,\n      password\n    }\n  } = _ref;\n\n  try {\n    const {\n      user\n    } = yield call(signInAuthUserWithEmailAndPassword, email, password);\n    yield call(getSnapshotFromUserAuth, user);\n  } catch (error) {\n    yield put(signInFailed);\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield call(getCurrentUser);\n    if (!userAuth) return;\n    yield call(getSnapshotFromUserAuth, userAuth);\n  } catch (error) {\n    yield put(signInFailed(error));\n  }\n}\nexport function* signUp(_ref2) {\n  let {\n    payload: {\n      email,\n      password,\n      displayName\n    }\n  } = _ref2;\n\n  try {\n    const {\n      user\n    } = yield call(createAuthUserWithEmailAndPassword, email, password);\n    yield put(signInSuccess);\n  } catch (error) {}\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(USER_ACTION_TYPES.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(USER_ACTION_TYPES.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(USER_ACTION_TYPES.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(USER_ACTION_TYPES.SIGN_UP_START, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(USER_ACTION_TYPES.SIGN_UP_SUCCESS, signUp);\n}\nexport function* userSagas() {\n  yield all([call(onCheckUserSession), call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/src/store/user/user.saga.js"],"names":["takeLatest","call","put","all","USER_ACTION_TYPES","signInSuccess","signInFailed","getCurrentUser","createUserDocumentFromAuth","signInWithGooglePopup","signInAuthUserWithEmailAndPassword","createAuthUserWithEmailAndPassword","getSnapshotFromUserAuth","userAuth","additionalDetails","userSnapshot","id","data","error","signInWithGoogle","user","signInWithEmail","payload","email","password","isUserAuthenticated","signUp","displayName","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onEmailSignInStart","EMAIL_SIGN_IN_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, call, put, all } from \"redux-saga/effects\";\r\n\r\nimport { USER_ACTION_TYPES } from \"./user.types\";\r\n\r\nimport { signInSuccess, signInFailed } from \"./user.action\";\r\n\r\nimport {\r\n  getCurrentUser,\r\n  createUserDocumentFromAuth,\r\n  signInWithGooglePopup,\r\n  signInAuthUserWithEmailAndPassword,\r\n  createAuthUserWithEmailAndPassword,\r\n} from \"../../utils/firebase/firebase.utils\";\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth, additionalDetails) {\r\n  try {\r\n    const userSnapshot = yield call(\r\n      createUserDocumentFromAuth,\r\n      userAuth,\r\n      additionalDetails\r\n    );\r\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n  } catch (error) {\r\n    yield put(signInFailed(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n  try {\r\n    const { user } = yield call(signInWithGooglePopup);\r\n    yield call(getSnapshotFromUserAuth, user);\r\n  } catch (error) {\r\n    yield put(signInFailed(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n  try {\r\n    const { user } = yield call(\r\n      signInAuthUserWithEmailAndPassword,\r\n      email,\r\n      password\r\n    );\r\n    yield call(getSnapshotFromUserAuth, user);\r\n  } catch (error) {\r\n    yield put(signInFailed);\r\n  }\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n  try {\r\n    const userAuth = yield call(getCurrentUser);\r\n    if (!userAuth) return;\r\n    yield call(getSnapshotFromUserAuth, userAuth);\r\n  } catch (error) {\r\n    yield put(signInFailed(error));\r\n  }\r\n}\r\n\r\nexport function* signUp({ payload: { email, password, displayName } }) {\r\n  try {\r\n    const { user } = yield call(\r\n      createAuthUserWithEmailAndPassword,\r\n      email,\r\n      password\r\n    );\r\n    yield put(signInSuccess);\r\n  } catch (error) {}\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(USER_ACTION_TYPES.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n  yield takeLatest(USER_ACTION_TYPES.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n  yield takeLatest(USER_ACTION_TYPES.EMAIL_SIGN_IN_START, signInWithEmail);\r\n}\r\n\r\nexport function* onSignUpStart() {\r\n  yield takeLatest(USER_ACTION_TYPES.SIGN_UP_START, signUp);\r\n}\r\n\r\nexport function* onSignUpSuccess() {\r\n  yield takeLatest(USER_ACTION_TYPES.SIGN_UP_SUCCESS, signUp);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(onCheckUserSession),\r\n    call(onGoogleSignInStart),\r\n    call(onEmailSignInStart),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}