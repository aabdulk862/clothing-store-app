{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamj\\\\OneDrive\\\\Desktop\\\\crwn-clothing-app\\\\src\\\\components\\\\payment-form\\\\payment-form.component.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { useSelector } from \"react-redux\";\nimport { selectCartTotal } from \"../../store/cart/cart.selector\";\nimport { selectCurrentUser } from \"../../store/user/user.selector\";\nimport { BUTTON_TYPE_CLASSES } from \"../button/button.component\";\nimport { PaymentFormContainer, FormContainer, PaymentButton } from \"./payment-form.styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PaymentForm = () => {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const amount = useSelector(selectCartTotal);\n  const currentUser = useSelector(selectCurrentUser);\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\n\n  const paymentHandler = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessingPayment(true);\n    const response = await fetch('/.netlify/functions/create-payment-intent', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        amount: amount * 100\n      })\n    }).then(res => res.json());\n    const {\n      paymentIntent: {\n        client_secret\n      }\n    } = response;\n    const cardDetails = elements.getElement(CardElement);\n    if (cardDetails === null) return;\n    const paymentResult = await stripe.confirmCardPayment(client_secret, {\n      payment_method: {\n        card: cardDetails,\n        billing_details: {\n          name: currentUser ? currentUser.displayName : 'Guest'\n        }\n      }\n    });\n    setIsProcessingPayment(false);\n\n    if (paymentResult.error) {\n      alert(paymentResult.error);\n    } else {\n      if (paymentResult.paymentIntent.status === 'succeeded') {\n        alert('Payment Successful');\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(PaymentFormContainer, {\n    children: /*#__PURE__*/_jsxDEV(FormContainer, {\n      onSubmit: paymentHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Credit Card Payment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PaymentButton, {\n        isLoading: isProcessingPayment,\n        buttonType: BUTTON_TYPE_CLASSES.inverted,\n        children: \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PaymentForm, \"zeZvNGpoSXJVIJ/CUzfiu8Kc5to=\", false, function () {\n  return [useStripe, useElements, useSelector, useSelector];\n});\n\n_c = PaymentForm;\nexport default PaymentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentForm\");","map":{"version":3,"sources":["C:/Users/adamj/OneDrive/Desktop/crwn-clothing-app/src/components/payment-form/payment-form.component.tsx"],"names":["useState","CardElement","useStripe","useElements","useSelector","selectCartTotal","selectCurrentUser","BUTTON_TYPE_CLASSES","PaymentFormContainer","FormContainer","PaymentButton","PaymentForm","stripe","elements","amount","currentUser","isProcessingPayment","setIsProcessingPayment","paymentHandler","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","then","res","json","paymentIntent","client_secret","cardDetails","getElement","paymentResult","confirmCardPayment","payment_method","card","billing_details","name","displayName","error","alert","status","inverted"],"mappings":"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","sourcesContent":["import { useState, FormEvent } from \"react\"\r\nimport { CardElement, useStripe, useElements} from \"@stripe/react-stripe-js\"\r\nimport { useSelector } from \"react-redux\"\r\n\r\nimport { selectCartTotal } from \"../../store/cart/cart.selector\"\r\nimport { selectCurrentUser } from \"../../store/user/user.selector\"\r\n\r\nimport {BUTTON_TYPE_CLASSES} from \"../button/button.component\"\r\n\r\nimport {PaymentFormContainer, FormContainer, PaymentButton} from \"./payment-form.styles\"\r\n\r\n\r\nconst PaymentForm = () => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const amount = useSelector(selectCartTotal);\r\n  const currentUser = useSelector(selectCurrentUser);\r\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false)\r\n\r\n  const paymentHandler = async (e: FormEvent<HTMLFormElement>) =>{\r\n      e.preventDefault();\r\n      if(!stripe || !elements){\r\n          return;\r\n      }\r\n      setIsProcessingPayment(true)\r\n      const response = await fetch('/.netlify/functions/create-payment-intent', {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({amount: amount * 100})\r\n      }).then(res=> res.json());\r\n      \r\n      const {paymentIntent: {client_secret}} = response;\r\n\r\n      const cardDetails = elements.getElement(CardElement);\r\n      if(cardDetails === null) return;\r\n      const paymentResult = await stripe.confirmCardPayment(client_secret, {\r\n          payment_method: {\r\n              card: cardDetails,\r\n              billing_details: {\r\n                  name: currentUser ? currentUser.displayName :  'Guest',\r\n              }\r\n          }\r\n      });\r\n\r\n      setIsProcessingPayment(false);\r\n\r\n      if(paymentResult.error){\r\n          alert(paymentResult.error)\r\n      }else{\r\n          if(paymentResult.paymentIntent.status === 'succeeded'){\r\n              alert('Payment Successful')\r\n          }\r\n      }\r\n  }\r\n  return (\r\n    <PaymentFormContainer>\r\n        <FormContainer onSubmit={paymentHandler}>\r\n            <h2>Credit Card Payment</h2>\r\n            <CardElement/>\r\n            <PaymentButton isLoading = {isProcessingPayment} buttonType={BUTTON_TYPE_CLASSES.inverted}>\r\n                Pay now\r\n            </PaymentButton>\r\n        </FormContainer>\r\n    </PaymentFormContainer>\r\n  )\r\n}\r\n\r\nexport default PaymentForm\r\n"]},"metadata":{},"sourceType":"module"}